//
// File generated by /apps/root/5.34.21/root/bin/rootcint at Thu Aug 11 23:24:41 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME SoLIDTrackingDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "SoLIDTrackingDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::ProgressiveTracking ProgressiveTracking;
      #else
      class ProgressiveTracking  {
         public:
         //friend XX;
         bool fDoMC; //
         int fNTracker; //
         int fNElectron; //
         int fNHadron; //
         int fNTrack; //
         bool fIsIterBackward; //
         bool fHasCaloHit; //
         ::TClonesArray* fCoarseTracks; //internal track array of progressive tracking 
         int fNGoodHits[6]; //
         ::TClonesArray* fGoodHits[6]; //
         vector< ::SoLIDCaloHit > fCaloHits; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::SoLIDFieldMap SoLIDFieldMap;
      #else
      class SoLIDFieldMap  {
         public:
         //friend XX;
         double Bz[1201][501]; //hard coded for now, array to store SoLID B field
         double Br[1201][501]; //hard coded for now, array to store SoLID B field
         ::TVector3 fField; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::SoLKalFieldStepper SoLKalFieldStepper;
      #else
      class SoLKalFieldStepper  {
         public:
         //friend XX;
         ::SoLIDFieldMap* fFieldMap; //
         bool fIsMSOn; //! switch for multiple scattering
         bool fIsDEDXOn; //! switch for energy loss
         bool fIsBackward; //kTRUE: backward propagation; kFALSE: forward propagation
         double trackPosAtZ; //z position of the track
         double minPrecision; //minimum precision for the Runge-Kutta method
         double maxPrecision; //maximum precision for the Runge-Kutta method
         double minStepSize; //minimum step size for the Runge-Kutta method
         double maxStepSize; //maximum step size for the Runge-Kutta method
         double maxNumSteps; //maximum number of steps for the Runge-Kutta method
         double stepSizeDec; //step size reduction factor for the Runge-Kutta method
         double stepSizeInc; //step size increasment factor for the Runge-Kutta method
         double stepLength; //distance between the Runge-Kutta start and end points
         double trackLength; //total track length
         double energyLoss; //total energy loss
         double maxDist; //maximum distance for straight line approximation
         int jstep; //Runge-Kutta step number
         double initialStepSize; //initial step size for the Runge-Kutta method
         double minLengthCalcQ; //when the step size of propagation is larger than this value, process noise will be calculated
         double fMass; //
         double fCharge; //
         bool fIsElectron; //
         double fDetMatProperties[2][5]; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::SoLKalTrackFinder SoLKalTrackFinder;
      #else
      class SoLKalTrackFinder  {
         public:
         //friend XX;
         #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
         typedef ::SoLKalTrackFinder::DoubletSeed DoubletSeed;
         #else
         class DoubletSeed  {
            public:
            //friend XX;
            ::SeedType type; //
            ::SoLIDGEMHit* hita; //
            ::SoLIDGEMHit* hitb; //
            bool isActive; //
            double initMom; //
            double initTheta; //
            double initPhi; //
            double charge; //
            ::ECType flag; //
         };
         #endif

         bool fIsMC; //
         vector< ::SoLIDGEMTracker* > fGEMTracker; //
         ::SoLIDECal* fECal; //
         int fNSeeds; //
         bool fSeedEfficiency; //
         bool fMcTrackEfficiency; //
         int fNTrackers; //
         int fEventNum; //
         vector< ::SoLIDCaloHit > fCaloHits; //
         vector< ::SoLIDGEMHit* > fWindowHits; //
         ::SoLKalFieldStepper* fFieldStepper; //
         ::TClonesArray* fCoarseTracks; //
         double fTargetPlaneZ; //
         double fTargetCenter; //
         double fTargetLength; //
         double fBPMX; //
         double fBPMY; //
         map< Int_t, vector< ::SoLIDGEMHit*, allocator< ::SoLIDGEMHit* >  >  > fGoodHits; //
         map< ::SeedType, vector< ::SoLKalTrackFinder::DoubletSeed, allocator< ::SoLKalTrackFinder::DoubletSeed >  >  > fSeedPool; //
         int fNGoodTrack; //
         double fChi2PerNDFCut; //
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void SoLIDGEMReadOut_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SoLIDGEMReadOut(void *p = 0);
   static void *newArray_SoLIDGEMReadOut(Long_t size, void *p);
   static void delete_SoLIDGEMReadOut(void *p);
   static void deleteArray_SoLIDGEMReadOut(void *p);
   static void destruct_SoLIDGEMReadOut(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SoLIDGEMReadOut*)
   {
      ::SoLIDGEMReadOut *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SoLIDGEMReadOut >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SoLIDGEMReadOut", ::SoLIDGEMReadOut::Class_Version(), "./SoLIDGEMReadOut.h", 31,
                  typeid(::SoLIDGEMReadOut), DefineBehavior(ptr, ptr),
                  &::SoLIDGEMReadOut::Dictionary, isa_proxy, 4,
                  sizeof(::SoLIDGEMReadOut) );
      instance.SetNew(&new_SoLIDGEMReadOut);
      instance.SetNewArray(&newArray_SoLIDGEMReadOut);
      instance.SetDelete(&delete_SoLIDGEMReadOut);
      instance.SetDeleteArray(&deleteArray_SoLIDGEMReadOut);
      instance.SetDestructor(&destruct_SoLIDGEMReadOut);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SoLIDGEMReadOut*)
   {
      return GenerateInitInstanceLocal((::SoLIDGEMReadOut*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SoLIDGEMReadOut*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void Hit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Hit(void *p = 0);
   static void *newArray_Hit(Long_t size, void *p);
   static void delete_Hit(void *p);
   static void deleteArray_Hit(void *p);
   static void destruct_Hit(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Hit*)
   {
      ::Hit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Hit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Hit", ::Hit::Class_Version(), "./SoLIDGEMHit.h", 23,
                  typeid(::Hit), DefineBehavior(ptr, ptr),
                  &::Hit::Dictionary, isa_proxy, 4,
                  sizeof(::Hit) );
      instance.SetNew(&new_Hit);
      instance.SetNewArray(&newArray_Hit);
      instance.SetDelete(&delete_Hit);
      instance.SetDeleteArray(&deleteArray_Hit);
      instance.SetDestructor(&destruct_Hit);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Hit*)
   {
      return GenerateInitInstanceLocal((::Hit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Hit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void SoLIDRawHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SoLIDRawHit(void *p = 0);
   static void *newArray_SoLIDRawHit(Long_t size, void *p);
   static void delete_SoLIDRawHit(void *p);
   static void deleteArray_SoLIDRawHit(void *p);
   static void destruct_SoLIDRawHit(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SoLIDRawHit*)
   {
      ::SoLIDRawHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SoLIDRawHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SoLIDRawHit", ::SoLIDRawHit::Class_Version(), "./SoLIDGEMHit.h", 53,
                  typeid(::SoLIDRawHit), DefineBehavior(ptr, ptr),
                  &::SoLIDRawHit::Dictionary, isa_proxy, 4,
                  sizeof(::SoLIDRawHit) );
      instance.SetNew(&new_SoLIDRawHit);
      instance.SetNewArray(&newArray_SoLIDRawHit);
      instance.SetDelete(&delete_SoLIDRawHit);
      instance.SetDeleteArray(&deleteArray_SoLIDRawHit);
      instance.SetDestructor(&destruct_SoLIDRawHit);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SoLIDRawHit*)
   {
      return GenerateInitInstanceLocal((::SoLIDRawHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SoLIDRawHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void SoLIDMCRawHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SoLIDMCRawHit(void *p = 0);
   static void *newArray_SoLIDMCRawHit(Long_t size, void *p);
   static void delete_SoLIDMCRawHit(void *p);
   static void deleteArray_SoLIDMCRawHit(void *p);
   static void destruct_SoLIDMCRawHit(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SoLIDMCRawHit*)
   {
      ::SoLIDMCRawHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SoLIDMCRawHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SoLIDMCRawHit", ::SoLIDMCRawHit::Class_Version(), "./SoLIDGEMHit.h", 82,
                  typeid(::SoLIDMCRawHit), DefineBehavior(ptr, ptr),
                  &::SoLIDMCRawHit::Dictionary, isa_proxy, 4,
                  sizeof(::SoLIDMCRawHit) );
      instance.SetNew(&new_SoLIDMCRawHit);
      instance.SetNewArray(&newArray_SoLIDMCRawHit);
      instance.SetDelete(&delete_SoLIDMCRawHit);
      instance.SetDeleteArray(&deleteArray_SoLIDMCRawHit);
      instance.SetDestructor(&destruct_SoLIDMCRawHit);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SoLIDMCRawHit*)
   {
      return GenerateInitInstanceLocal((::SoLIDMCRawHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SoLIDMCRawHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void SoLIDGEMHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SoLIDGEMHit(void *p = 0);
   static void *newArray_SoLIDGEMHit(Long_t size, void *p);
   static void delete_SoLIDGEMHit(void *p);
   static void deleteArray_SoLIDGEMHit(void *p);
   static void destruct_SoLIDGEMHit(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SoLIDGEMHit*)
   {
      ::SoLIDGEMHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SoLIDGEMHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SoLIDGEMHit", ::SoLIDGEMHit::Class_Version(), "./SoLIDGEMHit.h", 101,
                  typeid(::SoLIDGEMHit), DefineBehavior(ptr, ptr),
                  &::SoLIDGEMHit::Dictionary, isa_proxy, 4,
                  sizeof(::SoLIDGEMHit) );
      instance.SetNew(&new_SoLIDGEMHit);
      instance.SetNewArray(&newArray_SoLIDGEMHit);
      instance.SetDelete(&delete_SoLIDGEMHit);
      instance.SetDeleteArray(&deleteArray_SoLIDGEMHit);
      instance.SetDestructor(&destruct_SoLIDGEMHit);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SoLIDGEMHit*)
   {
      return GenerateInitInstanceLocal((::SoLIDGEMHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SoLIDGEMHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void SoLIDMCGEMHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SoLIDMCGEMHit(void *p = 0);
   static void *newArray_SoLIDMCGEMHit(Long_t size, void *p);
   static void delete_SoLIDMCGEMHit(void *p);
   static void deleteArray_SoLIDMCGEMHit(void *p);
   static void destruct_SoLIDMCGEMHit(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SoLIDMCGEMHit*)
   {
      ::SoLIDMCGEMHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SoLIDMCGEMHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SoLIDMCGEMHit", ::SoLIDMCGEMHit::Class_Version(), "./SoLIDGEMHit.h", 164,
                  typeid(::SoLIDMCGEMHit), DefineBehavior(ptr, ptr),
                  &::SoLIDMCGEMHit::Dictionary, isa_proxy, 4,
                  sizeof(::SoLIDMCGEMHit) );
      instance.SetNew(&new_SoLIDMCGEMHit);
      instance.SetNewArray(&newArray_SoLIDMCGEMHit);
      instance.SetDelete(&delete_SoLIDMCGEMHit);
      instance.SetDeleteArray(&deleteArray_SoLIDMCGEMHit);
      instance.SetDestructor(&destruct_SoLIDMCGEMHit);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SoLIDMCGEMHit*)
   {
      return GenerateInitInstanceLocal((::SoLIDMCGEMHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SoLIDMCGEMHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void SoLIDGEMTracker_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SoLIDGEMTracker(void *p = 0);
   static void *newArray_SoLIDGEMTracker(Long_t size, void *p);
   static void delete_SoLIDGEMTracker(void *p);
   static void deleteArray_SoLIDGEMTracker(void *p);
   static void destruct_SoLIDGEMTracker(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SoLIDGEMTracker*)
   {
      ::SoLIDGEMTracker *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SoLIDGEMTracker >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SoLIDGEMTracker", ::SoLIDGEMTracker::Class_Version(), "./SoLIDGEMTracker.h", 14,
                  typeid(::SoLIDGEMTracker), DefineBehavior(ptr, ptr),
                  &::SoLIDGEMTracker::Dictionary, isa_proxy, 4,
                  sizeof(::SoLIDGEMTracker) );
      instance.SetNew(&new_SoLIDGEMTracker);
      instance.SetNewArray(&newArray_SoLIDGEMTracker);
      instance.SetDelete(&delete_SoLIDGEMTracker);
      instance.SetDeleteArray(&deleteArray_SoLIDGEMTracker);
      instance.SetDestructor(&destruct_SoLIDGEMTracker);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SoLIDGEMTracker*)
   {
      return GenerateInitInstanceLocal((::SoLIDGEMTracker*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SoLIDGEMTracker*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void SoLIDGEMChamber_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SoLIDGEMChamber(void *p = 0);
   static void *newArray_SoLIDGEMChamber(Long_t size, void *p);
   static void delete_SoLIDGEMChamber(void *p);
   static void deleteArray_SoLIDGEMChamber(void *p);
   static void destruct_SoLIDGEMChamber(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SoLIDGEMChamber*)
   {
      ::SoLIDGEMChamber *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SoLIDGEMChamber >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SoLIDGEMChamber", ::SoLIDGEMChamber::Class_Version(), "./SoLIDGEMChamber.h", 18,
                  typeid(::SoLIDGEMChamber), DefineBehavior(ptr, ptr),
                  &::SoLIDGEMChamber::Dictionary, isa_proxy, 4,
                  sizeof(::SoLIDGEMChamber) );
      instance.SetNew(&new_SoLIDGEMChamber);
      instance.SetNewArray(&newArray_SoLIDGEMChamber);
      instance.SetDelete(&delete_SoLIDGEMChamber);
      instance.SetDeleteArray(&deleteArray_SoLIDGEMChamber);
      instance.SetDestructor(&destruct_SoLIDGEMChamber);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SoLIDGEMChamber*)
   {
      return GenerateInitInstanceLocal((::SoLIDGEMChamber*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SoLIDGEMChamber*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void SoLIDECal_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SoLIDECal(void *p = 0);
   static void *newArray_SoLIDECal(Long_t size, void *p);
   static void delete_SoLIDECal(void *p);
   static void deleteArray_SoLIDECal(void *p);
   static void destruct_SoLIDECal(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SoLIDECal*)
   {
      ::SoLIDECal *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SoLIDECal >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SoLIDECal", ::SoLIDECal::Class_Version(), "./SoLIDECal.h", 19,
                  typeid(::SoLIDECal), DefineBehavior(ptr, ptr),
                  &::SoLIDECal::Dictionary, isa_proxy, 4,
                  sizeof(::SoLIDECal) );
      instance.SetNew(&new_SoLIDECal);
      instance.SetNewArray(&newArray_SoLIDECal);
      instance.SetDelete(&delete_SoLIDECal);
      instance.SetDeleteArray(&deleteArray_SoLIDECal);
      instance.SetDestructor(&destruct_SoLIDECal);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SoLIDECal*)
   {
      return GenerateInitInstanceLocal((::SoLIDECal*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SoLIDECal*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void SoLIDTrack_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SoLIDTrack(void *p = 0);
   static void *newArray_SoLIDTrack(Long_t size, void *p);
   static void delete_SoLIDTrack(void *p);
   static void deleteArray_SoLIDTrack(void *p);
   static void destruct_SoLIDTrack(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SoLIDTrack*)
   {
      ::SoLIDTrack *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SoLIDTrack >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SoLIDTrack", ::SoLIDTrack::Class_Version(), "./SoLIDTrack.h", 10,
                  typeid(::SoLIDTrack), DefineBehavior(ptr, ptr),
                  &::SoLIDTrack::Dictionary, isa_proxy, 4,
                  sizeof(::SoLIDTrack) );
      instance.SetNew(&new_SoLIDTrack);
      instance.SetNewArray(&newArray_SoLIDTrack);
      instance.SetDelete(&delete_SoLIDTrack);
      instance.SetDeleteArray(&deleteArray_SoLIDTrack);
      instance.SetDestructor(&destruct_SoLIDTrack);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SoLIDTrack*)
   {
      return GenerateInitInstanceLocal((::SoLIDTrack*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SoLIDTrack*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void SoLIDMCTrack_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SoLIDMCTrack(void *p = 0);
   static void *newArray_SoLIDMCTrack(Long_t size, void *p);
   static void delete_SoLIDMCTrack(void *p);
   static void deleteArray_SoLIDMCTrack(void *p);
   static void destruct_SoLIDMCTrack(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SoLIDMCTrack*)
   {
      ::SoLIDMCTrack *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SoLIDMCTrack >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SoLIDMCTrack", ::SoLIDMCTrack::Class_Version(), "./SoLIDTrack.h", 166,
                  typeid(::SoLIDMCTrack), DefineBehavior(ptr, ptr),
                  &::SoLIDMCTrack::Dictionary, isa_proxy, 4,
                  sizeof(::SoLIDMCTrack) );
      instance.SetNew(&new_SoLIDMCTrack);
      instance.SetNewArray(&newArray_SoLIDMCTrack);
      instance.SetDelete(&delete_SoLIDMCTrack);
      instance.SetDeleteArray(&deleteArray_SoLIDMCTrack);
      instance.SetDestructor(&destruct_SoLIDMCTrack);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SoLIDMCTrack*)
   {
      return GenerateInitInstanceLocal((::SoLIDMCTrack*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SoLIDMCTrack*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void ProgressiveTracking_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ProgressiveTracking_Dictionary();
   static void delete_ProgressiveTracking(void *p);
   static void deleteArray_ProgressiveTracking(void *p);
   static void destruct_ProgressiveTracking(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ProgressiveTracking*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::ProgressiveTracking) == sizeof(::ROOT::Shadow::ProgressiveTracking));
      ::ProgressiveTracking *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::ProgressiveTracking),0);
      static ::ROOT::TGenericClassInfo 
         instance("ProgressiveTracking", "./ProgressiveTracking.h", 21,
                  typeid(::ProgressiveTracking), DefineBehavior(ptr, ptr),
                  &ProgressiveTracking_ShowMembers, &ProgressiveTracking_Dictionary, isa_proxy, 4,
                  sizeof(::ProgressiveTracking) );
      instance.SetDelete(&delete_ProgressiveTracking);
      instance.SetDeleteArray(&deleteArray_ProgressiveTracking);
      instance.SetDestructor(&destruct_ProgressiveTracking);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ProgressiveTracking*)
   {
      return GenerateInitInstanceLocal((::ProgressiveTracking*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ProgressiveTracking*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ProgressiveTracking_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::ProgressiveTracking*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void SoLIDFieldMap_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void SoLIDFieldMap_Dictionary();
   static void delete_SoLIDFieldMap(void *p);
   static void deleteArray_SoLIDFieldMap(void *p);
   static void destruct_SoLIDFieldMap(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SoLIDFieldMap*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::SoLIDFieldMap) == sizeof(::ROOT::Shadow::SoLIDFieldMap));
      ::SoLIDFieldMap *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::SoLIDFieldMap),0);
      static ::ROOT::TGenericClassInfo 
         instance("SoLIDFieldMap", "./SoLIDFieldMap.h", 22,
                  typeid(::SoLIDFieldMap), DefineBehavior(ptr, ptr),
                  &SoLIDFieldMap_ShowMembers, &SoLIDFieldMap_Dictionary, isa_proxy, 4,
                  sizeof(::SoLIDFieldMap) );
      instance.SetDelete(&delete_SoLIDFieldMap);
      instance.SetDeleteArray(&deleteArray_SoLIDFieldMap);
      instance.SetDestructor(&destruct_SoLIDFieldMap);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SoLIDFieldMap*)
   {
      return GenerateInitInstanceLocal((::SoLIDFieldMap*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SoLIDFieldMap*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void SoLIDFieldMap_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::SoLIDFieldMap*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void SoLKalMatrix_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SoLKalMatrix(void *p = 0);
   static void *newArray_SoLKalMatrix(Long_t size, void *p);
   static void delete_SoLKalMatrix(void *p);
   static void deleteArray_SoLKalMatrix(void *p);
   static void destruct_SoLKalMatrix(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SoLKalMatrix*)
   {
      ::SoLKalMatrix *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SoLKalMatrix >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SoLKalMatrix", ::SoLKalMatrix::Class_Version(), "./SoLKalMatrix.h", 7,
                  typeid(::SoLKalMatrix), DefineBehavior(ptr, ptr),
                  &::SoLKalMatrix::Dictionary, isa_proxy, 4,
                  sizeof(::SoLKalMatrix) );
      instance.SetNew(&new_SoLKalMatrix);
      instance.SetNewArray(&newArray_SoLKalMatrix);
      instance.SetDelete(&delete_SoLKalMatrix);
      instance.SetDeleteArray(&deleteArray_SoLKalMatrix);
      instance.SetDestructor(&destruct_SoLKalMatrix);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SoLKalMatrix*)
   {
      return GenerateInitInstanceLocal((::SoLKalMatrix*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SoLKalMatrix*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void SoLKalTrackSystem_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SoLKalTrackSystem(void *p = 0);
   static void *newArray_SoLKalTrackSystem(Long_t size, void *p);
   static void delete_SoLKalTrackSystem(void *p);
   static void deleteArray_SoLKalTrackSystem(void *p);
   static void destruct_SoLKalTrackSystem(void *p);
   static Long64_t merge_SoLKalTrackSystem(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SoLKalTrackSystem*)
   {
      ::SoLKalTrackSystem *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SoLKalTrackSystem >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SoLKalTrackSystem", ::SoLKalTrackSystem::Class_Version(), "./SoLKalTrackSystem.h", 13,
                  typeid(::SoLKalTrackSystem), DefineBehavior(ptr, ptr),
                  &::SoLKalTrackSystem::Dictionary, isa_proxy, 4,
                  sizeof(::SoLKalTrackSystem) );
      instance.SetNew(&new_SoLKalTrackSystem);
      instance.SetNewArray(&newArray_SoLKalTrackSystem);
      instance.SetDelete(&delete_SoLKalTrackSystem);
      instance.SetDeleteArray(&deleteArray_SoLKalTrackSystem);
      instance.SetDestructor(&destruct_SoLKalTrackSystem);
      instance.SetMerge(&merge_SoLKalTrackSystem);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SoLKalTrackSystem*)
   {
      return GenerateInitInstanceLocal((::SoLKalTrackSystem*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SoLKalTrackSystem*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void SoLKalTrackSite_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SoLKalTrackSite(void *p = 0);
   static void *newArray_SoLKalTrackSite(Long_t size, void *p);
   static void delete_SoLKalTrackSite(void *p);
   static void deleteArray_SoLKalTrackSite(void *p);
   static void destruct_SoLKalTrackSite(void *p);
   static Long64_t merge_SoLKalTrackSite(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SoLKalTrackSite*)
   {
      ::SoLKalTrackSite *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SoLKalTrackSite >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SoLKalTrackSite", ::SoLKalTrackSite::Class_Version(), "./SoLKalTrackSite.h", 13,
                  typeid(::SoLKalTrackSite), DefineBehavior(ptr, ptr),
                  &::SoLKalTrackSite::Dictionary, isa_proxy, 4,
                  sizeof(::SoLKalTrackSite) );
      instance.SetNew(&new_SoLKalTrackSite);
      instance.SetNewArray(&newArray_SoLKalTrackSite);
      instance.SetDelete(&delete_SoLKalTrackSite);
      instance.SetDeleteArray(&deleteArray_SoLKalTrackSite);
      instance.SetDestructor(&destruct_SoLKalTrackSite);
      instance.SetMerge(&merge_SoLKalTrackSite);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SoLKalTrackSite*)
   {
      return GenerateInitInstanceLocal((::SoLKalTrackSite*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SoLKalTrackSite*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void SoLKalTrackState_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SoLKalTrackState(void *p = 0);
   static void *newArray_SoLKalTrackState(Long_t size, void *p);
   static void delete_SoLKalTrackState(void *p);
   static void deleteArray_SoLKalTrackState(void *p);
   static void destruct_SoLKalTrackState(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SoLKalTrackState*)
   {
      ::SoLKalTrackState *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SoLKalTrackState >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SoLKalTrackState", ::SoLKalTrackState::Class_Version(), "./SoLKalTrackState.h", 10,
                  typeid(::SoLKalTrackState), DefineBehavior(ptr, ptr),
                  &::SoLKalTrackState::Dictionary, isa_proxy, 4,
                  sizeof(::SoLKalTrackState) );
      instance.SetNew(&new_SoLKalTrackState);
      instance.SetNewArray(&newArray_SoLKalTrackState);
      instance.SetDelete(&delete_SoLKalTrackState);
      instance.SetDeleteArray(&deleteArray_SoLKalTrackState);
      instance.SetDestructor(&destruct_SoLKalTrackState);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SoLKalTrackState*)
   {
      return GenerateInitInstanceLocal((::SoLKalTrackState*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SoLKalTrackState*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void SoLKalFieldStepper_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void SoLKalFieldStepper_Dictionary();
   static void delete_SoLKalFieldStepper(void *p);
   static void deleteArray_SoLKalFieldStepper(void *p);
   static void destruct_SoLKalFieldStepper(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SoLKalFieldStepper*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::SoLKalFieldStepper) == sizeof(::ROOT::Shadow::SoLKalFieldStepper));
      ::SoLKalFieldStepper *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::SoLKalFieldStepper),0);
      static ::ROOT::TGenericClassInfo 
         instance("SoLKalFieldStepper", "./SoLKalFieldStepper.h", 15,
                  typeid(::SoLKalFieldStepper), DefineBehavior(ptr, ptr),
                  &SoLKalFieldStepper_ShowMembers, &SoLKalFieldStepper_Dictionary, isa_proxy, 4,
                  sizeof(::SoLKalFieldStepper) );
      instance.SetDelete(&delete_SoLKalFieldStepper);
      instance.SetDeleteArray(&deleteArray_SoLKalFieldStepper);
      instance.SetDestructor(&destruct_SoLKalFieldStepper);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SoLKalFieldStepper*)
   {
      return GenerateInitInstanceLocal((::SoLKalFieldStepper*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SoLKalFieldStepper*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void SoLKalFieldStepper_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::SoLKalFieldStepper*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void SoLKalTrackFinder_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void SoLKalTrackFinder_Dictionary();
   static void *new_SoLKalTrackFinder(void *p = 0);
   static void *newArray_SoLKalTrackFinder(Long_t size, void *p);
   static void delete_SoLKalTrackFinder(void *p);
   static void deleteArray_SoLKalTrackFinder(void *p);
   static void destruct_SoLKalTrackFinder(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SoLKalTrackFinder*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::SoLKalTrackFinder) == sizeof(::ROOT::Shadow::SoLKalTrackFinder));
      ::SoLKalTrackFinder *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::SoLKalTrackFinder),0);
      static ::ROOT::TGenericClassInfo 
         instance("SoLKalTrackFinder", "./SoLKalTrackFinder.h", 30,
                  typeid(::SoLKalTrackFinder), DefineBehavior(ptr, ptr),
                  &SoLKalTrackFinder_ShowMembers, &SoLKalTrackFinder_Dictionary, isa_proxy, 4,
                  sizeof(::SoLKalTrackFinder) );
      instance.SetNew(&new_SoLKalTrackFinder);
      instance.SetNewArray(&newArray_SoLKalTrackFinder);
      instance.SetDelete(&delete_SoLKalTrackFinder);
      instance.SetDeleteArray(&deleteArray_SoLKalTrackFinder);
      instance.SetDestructor(&destruct_SoLKalTrackFinder);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SoLKalTrackFinder*)
   {
      return GenerateInitInstanceLocal((::SoLKalTrackFinder*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SoLKalTrackFinder*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void SoLKalTrackFinder_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::SoLKalTrackFinder*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void SoLIDTrackerSystem_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SoLIDTrackerSystem(void *p = 0);
   static void *newArray_SoLIDTrackerSystem(Long_t size, void *p);
   static void delete_SoLIDTrackerSystem(void *p);
   static void deleteArray_SoLIDTrackerSystem(void *p);
   static void destruct_SoLIDTrackerSystem(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SoLIDTrackerSystem*)
   {
      ::SoLIDTrackerSystem *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SoLIDTrackerSystem >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SoLIDTrackerSystem", ::SoLIDTrackerSystem::Class_Version(), "./SoLIDTrackerSystem.h", 38,
                  typeid(::SoLIDTrackerSystem), DefineBehavior(ptr, ptr),
                  &::SoLIDTrackerSystem::Dictionary, isa_proxy, 4,
                  sizeof(::SoLIDTrackerSystem) );
      instance.SetNew(&new_SoLIDTrackerSystem);
      instance.SetNewArray(&newArray_SoLIDTrackerSystem);
      instance.SetDelete(&delete_SoLIDTrackerSystem);
      instance.SetDeleteArray(&deleteArray_SoLIDTrackerSystem);
      instance.SetDestructor(&destruct_SoLIDTrackerSystem);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SoLIDTrackerSystem*)
   {
      return GenerateInitInstanceLocal((::SoLIDTrackerSystem*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SoLIDTrackerSystem*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void SolTrackInfo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SolTrackInfo(void *p = 0);
   static void *newArray_SolTrackInfo(Long_t size, void *p);
   static void delete_SolTrackInfo(void *p);
   static void deleteArray_SolTrackInfo(void *p);
   static void destruct_SolTrackInfo(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SolTrackInfo*)
   {
      ::SolTrackInfo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SolTrackInfo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SolTrackInfo", ::SolTrackInfo::Class_Version(), "./SoLIDSpectrometer.h", 27,
                  typeid(::SolTrackInfo), DefineBehavior(ptr, ptr),
                  &::SolTrackInfo::Dictionary, isa_proxy, 4,
                  sizeof(::SolTrackInfo) );
      instance.SetNew(&new_SolTrackInfo);
      instance.SetNewArray(&newArray_SolTrackInfo);
      instance.SetDelete(&delete_SolTrackInfo);
      instance.SetDeleteArray(&deleteArray_SolTrackInfo);
      instance.SetDestructor(&destruct_SolTrackInfo);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SolTrackInfo*)
   {
      return GenerateInitInstanceLocal((::SolTrackInfo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SolTrackInfo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void SoLIDSpectrometer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_SoLIDSpectrometer(void *p);
   static void deleteArray_SoLIDSpectrometer(void *p);
   static void destruct_SoLIDSpectrometer(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SoLIDSpectrometer*)
   {
      ::SoLIDSpectrometer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SoLIDSpectrometer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SoLIDSpectrometer", ::SoLIDSpectrometer::Class_Version(), "./SoLIDSpectrometer.h", 79,
                  typeid(::SoLIDSpectrometer), DefineBehavior(ptr, ptr),
                  &::SoLIDSpectrometer::Dictionary, isa_proxy, 4,
                  sizeof(::SoLIDSpectrometer) );
      instance.SetDelete(&delete_SoLIDSpectrometer);
      instance.SetDeleteArray(&deleteArray_SoLIDSpectrometer);
      instance.SetDestructor(&destruct_SoLIDSpectrometer);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SoLIDSpectrometer*)
   {
      return GenerateInitInstanceLocal((::SoLIDSpectrometer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SoLIDSpectrometer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
atomic_TClass_ptr SoLIDGEMReadOut::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SoLIDGEMReadOut::Class_Name()
{
   return "SoLIDGEMReadOut";
}

//______________________________________________________________________________
const char *SoLIDGEMReadOut::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SoLIDGEMReadOut*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SoLIDGEMReadOut::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SoLIDGEMReadOut*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SoLIDGEMReadOut::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SoLIDGEMReadOut*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SoLIDGEMReadOut::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SoLIDGEMReadOut*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr Hit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *Hit::Class_Name()
{
   return "Hit";
}

//______________________________________________________________________________
const char *Hit::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Hit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Hit::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Hit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Hit::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Hit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Hit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Hit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr SoLIDRawHit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SoLIDRawHit::Class_Name()
{
   return "SoLIDRawHit";
}

//______________________________________________________________________________
const char *SoLIDRawHit::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SoLIDRawHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SoLIDRawHit::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SoLIDRawHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SoLIDRawHit::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SoLIDRawHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SoLIDRawHit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SoLIDRawHit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr SoLIDMCRawHit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SoLIDMCRawHit::Class_Name()
{
   return "SoLIDMCRawHit";
}

//______________________________________________________________________________
const char *SoLIDMCRawHit::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SoLIDMCRawHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SoLIDMCRawHit::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SoLIDMCRawHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SoLIDMCRawHit::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SoLIDMCRawHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SoLIDMCRawHit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SoLIDMCRawHit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr SoLIDGEMHit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SoLIDGEMHit::Class_Name()
{
   return "SoLIDGEMHit";
}

//______________________________________________________________________________
const char *SoLIDGEMHit::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SoLIDGEMHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SoLIDGEMHit::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SoLIDGEMHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SoLIDGEMHit::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SoLIDGEMHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SoLIDGEMHit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SoLIDGEMHit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr SoLIDMCGEMHit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SoLIDMCGEMHit::Class_Name()
{
   return "SoLIDMCGEMHit";
}

//______________________________________________________________________________
const char *SoLIDMCGEMHit::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SoLIDMCGEMHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SoLIDMCGEMHit::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SoLIDMCGEMHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SoLIDMCGEMHit::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SoLIDMCGEMHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SoLIDMCGEMHit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SoLIDMCGEMHit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr SoLIDGEMTracker::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SoLIDGEMTracker::Class_Name()
{
   return "SoLIDGEMTracker";
}

//______________________________________________________________________________
const char *SoLIDGEMTracker::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SoLIDGEMTracker*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SoLIDGEMTracker::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SoLIDGEMTracker*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SoLIDGEMTracker::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SoLIDGEMTracker*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SoLIDGEMTracker::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SoLIDGEMTracker*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr SoLIDGEMChamber::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SoLIDGEMChamber::Class_Name()
{
   return "SoLIDGEMChamber";
}

//______________________________________________________________________________
const char *SoLIDGEMChamber::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SoLIDGEMChamber*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SoLIDGEMChamber::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SoLIDGEMChamber*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SoLIDGEMChamber::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SoLIDGEMChamber*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SoLIDGEMChamber::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SoLIDGEMChamber*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr SoLIDECal::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SoLIDECal::Class_Name()
{
   return "SoLIDECal";
}

//______________________________________________________________________________
const char *SoLIDECal::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SoLIDECal*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SoLIDECal::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SoLIDECal*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SoLIDECal::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SoLIDECal*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SoLIDECal::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SoLIDECal*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr SoLIDTrack::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SoLIDTrack::Class_Name()
{
   return "SoLIDTrack";
}

//______________________________________________________________________________
const char *SoLIDTrack::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SoLIDTrack*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SoLIDTrack::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SoLIDTrack*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SoLIDTrack::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SoLIDTrack*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SoLIDTrack::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SoLIDTrack*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr SoLIDMCTrack::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SoLIDMCTrack::Class_Name()
{
   return "SoLIDMCTrack";
}

//______________________________________________________________________________
const char *SoLIDMCTrack::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SoLIDMCTrack*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SoLIDMCTrack::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SoLIDMCTrack*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SoLIDMCTrack::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SoLIDMCTrack*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SoLIDMCTrack::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SoLIDMCTrack*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr SoLKalMatrix::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SoLKalMatrix::Class_Name()
{
   return "SoLKalMatrix";
}

//______________________________________________________________________________
const char *SoLKalMatrix::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SoLKalMatrix*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SoLKalMatrix::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SoLKalMatrix*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SoLKalMatrix::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SoLKalMatrix*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SoLKalMatrix::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SoLKalMatrix*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr SoLKalTrackSystem::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SoLKalTrackSystem::Class_Name()
{
   return "SoLKalTrackSystem";
}

//______________________________________________________________________________
const char *SoLKalTrackSystem::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SoLKalTrackSystem*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SoLKalTrackSystem::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SoLKalTrackSystem*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SoLKalTrackSystem::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SoLKalTrackSystem*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SoLKalTrackSystem::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SoLKalTrackSystem*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr SoLKalTrackSite::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SoLKalTrackSite::Class_Name()
{
   return "SoLKalTrackSite";
}

//______________________________________________________________________________
const char *SoLKalTrackSite::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SoLKalTrackSite*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SoLKalTrackSite::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SoLKalTrackSite*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SoLKalTrackSite::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SoLKalTrackSite*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SoLKalTrackSite::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SoLKalTrackSite*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr SoLKalTrackState::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SoLKalTrackState::Class_Name()
{
   return "SoLKalTrackState";
}

//______________________________________________________________________________
const char *SoLKalTrackState::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SoLKalTrackState*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SoLKalTrackState::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SoLKalTrackState*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SoLKalTrackState::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SoLKalTrackState*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SoLKalTrackState::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SoLKalTrackState*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr SoLIDTrackerSystem::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SoLIDTrackerSystem::Class_Name()
{
   return "SoLIDTrackerSystem";
}

//______________________________________________________________________________
const char *SoLIDTrackerSystem::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SoLIDTrackerSystem*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SoLIDTrackerSystem::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SoLIDTrackerSystem*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SoLIDTrackerSystem::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SoLIDTrackerSystem*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SoLIDTrackerSystem::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SoLIDTrackerSystem*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr SolTrackInfo::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SolTrackInfo::Class_Name()
{
   return "SolTrackInfo";
}

//______________________________________________________________________________
const char *SolTrackInfo::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SolTrackInfo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SolTrackInfo::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SolTrackInfo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SolTrackInfo::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SolTrackInfo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SolTrackInfo::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SolTrackInfo*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr SoLIDSpectrometer::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *SoLIDSpectrometer::Class_Name()
{
   return "SoLIDSpectrometer";
}

//______________________________________________________________________________
const char *SoLIDSpectrometer::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SoLIDSpectrometer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SoLIDSpectrometer::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SoLIDSpectrometer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SoLIDSpectrometer::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SoLIDSpectrometer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SoLIDSpectrometer::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SoLIDSpectrometer*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void SoLIDSpectrometer::Streamer(TBuffer &R__b)
{
   // Stream an object of class SoLIDSpectrometer.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SoLIDSpectrometer::Class(),this);
   } else {
      R__b.WriteClassBuffer(SoLIDSpectrometer::Class(),this);
   }
}

//______________________________________________________________________________
void SoLIDSpectrometer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SoLIDSpectrometer.
      TClass *R__cl = ::SoLIDSpectrometer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSolTrackInfo", &fSolTrackInfo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNSystem", &fNSystem);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNTracker", &fNTracker);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNSector", &fNSector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNReadOut", &fNReadOut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackerSystem", (void*)&fTrackerSystem);
      R__insp.InspectMember("vector<SoLIDTrackerSystem*>", (void*)&fTrackerSystem, "fTrackerSystem.", false);
      THaSpectrometer::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_SoLIDSpectrometer(void *p) {
      delete ((::SoLIDSpectrometer*)p);
   }
   static void deleteArray_SoLIDSpectrometer(void *p) {
      delete [] ((::SoLIDSpectrometer*)p);
   }
   static void destruct_SoLIDSpectrometer(void *p) {
      typedef ::SoLIDSpectrometer current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SoLIDSpectrometer

//______________________________________________________________________________
void SolTrackInfo::Streamer(TBuffer &R__b)
{
   // Stream an object of class SolTrackInfo.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SolTrackInfo::Class(),this);
   } else {
      R__b.WriteClassBuffer(SolTrackInfo::Class(),this);
   }
}

//______________________________________________________________________________
void SolTrackInfo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SolTrackInfo.
      TClass *R__cl = ::SolTrackInfo::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSector", &fSector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRtransv", &fRtransv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTheta", &fTheta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhi", &fPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhiRot", &fPhiRot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fThetaDir", &fThetaDir);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhiDir", &fPhiDir);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhiDirRot", &fPhiDirRot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMCHitBits", &fMCHitBits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNMCHits", &fNMCHits);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SolTrackInfo(void *p) {
      return  p ? new(p) ::SolTrackInfo : new ::SolTrackInfo;
   }
   static void *newArray_SolTrackInfo(Long_t nElements, void *p) {
      return p ? new(p) ::SolTrackInfo[nElements] : new ::SolTrackInfo[nElements];
   }
   // Wrapper around operator delete
   static void delete_SolTrackInfo(void *p) {
      delete ((::SolTrackInfo*)p);
   }
   static void deleteArray_SolTrackInfo(void *p) {
      delete [] ((::SolTrackInfo*)p);
   }
   static void destruct_SolTrackInfo(void *p) {
      typedef ::SolTrackInfo current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SolTrackInfo

//______________________________________________________________________________
void SoLIDTrackerSystem::Streamer(TBuffer &R__b)
{
   // Stream an object of class SoLIDTrackerSystem.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SoLIDTrackerSystem::Class(),this);
   } else {
      R__b.WriteClassBuffer(SoLIDTrackerSystem::Class(),this);
   }
}

//______________________________________________________________________________
void SoLIDTrackerSystem::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SoLIDTrackerSystem.
      TClass *R__cl = ::SoLIDTrackerSystem::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSystemID", &fSystemID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhi", &fPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRotation", &fRotation);
      R__insp.InspectMember(fRotation, "fRotation.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInvRot", &fInvRot);
      R__insp.InspectMember(fInvRot, "fInvRot.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGEMTracker", (void*)&fGEMTracker);
      R__insp.InspectMember("vector<SoLIDGEMTracker*>", (void*)&fGEMTracker, "fGEMTracker.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fECal", &fECal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFieldMap", &fFieldMap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTracks", &fTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDBPrefix", &fDBPrefix);
      R__insp.InspectMember(fDBPrefix, "fDBPrefix.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCrateMap", &fCrateMap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNTracker", &fNTracker);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChi2Cut", &fChi2Cut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNMaxMissHit", &fNMaxMissHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTrackFinder", &fTrackFinder);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMCDecoder", &fMCDecoder);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChecked", &fChecked);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGoodSignalFlag", &fGoodSignalFlag);
      THaTrackingDetector::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SoLIDTrackerSystem(void *p) {
      return  p ? new(p) ::SoLIDTrackerSystem : new ::SoLIDTrackerSystem;
   }
   static void *newArray_SoLIDTrackerSystem(Long_t nElements, void *p) {
      return p ? new(p) ::SoLIDTrackerSystem[nElements] : new ::SoLIDTrackerSystem[nElements];
   }
   // Wrapper around operator delete
   static void delete_SoLIDTrackerSystem(void *p) {
      delete ((::SoLIDTrackerSystem*)p);
   }
   static void deleteArray_SoLIDTrackerSystem(void *p) {
      delete [] ((::SoLIDTrackerSystem*)p);
   }
   static void destruct_SoLIDTrackerSystem(void *p) {
      typedef ::SoLIDTrackerSystem current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SoLIDTrackerSystem

//______________________________________________________________________________
void SoLIDGEMTracker::Streamer(TBuffer &R__b)
{
   // Stream an object of class SoLIDGEMTracker.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SoLIDGEMTracker::Class(),this);
   } else {
      R__b.WriteClassBuffer(SoLIDGEMTracker::Class(),this);
   }
}

//______________________________________________________________________________
void SoLIDGEMTracker::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SoLIDGEMTracker.
      TClass *R__cl = ::SoLIDGEMTracker::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNChamber", &fNChamber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackerZ", &fTrackerZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDoCombineHits", &fDoCombineHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackerID", &fTrackerID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHits", &fHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGEMChamber", (void*)&fGEMChamber);
      R__insp.InspectMember("vector<SoLIDGEMChamber*>", (void*)&fGEMChamber, "fGEMChamber.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNHits", &fNHits);
      THaSubDetector::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SoLIDGEMTracker(void *p) {
      return  p ? new(p) ::SoLIDGEMTracker : new ::SoLIDGEMTracker;
   }
   static void *newArray_SoLIDGEMTracker(Long_t nElements, void *p) {
      return p ? new(p) ::SoLIDGEMTracker[nElements] : new ::SoLIDGEMTracker[nElements];
   }
   // Wrapper around operator delete
   static void delete_SoLIDGEMTracker(void *p) {
      delete ((::SoLIDGEMTracker*)p);
   }
   static void deleteArray_SoLIDGEMTracker(void *p) {
      delete [] ((::SoLIDGEMTracker*)p);
   }
   static void destruct_SoLIDGEMTracker(void *p) {
      typedef ::SoLIDGEMTracker current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SoLIDGEMTracker

//______________________________________________________________________________
void SoLIDGEMChamber::Streamer(TBuffer &R__b)
{
   // Stream an object of class SoLIDGEMChamber.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SoLIDGEMChamber::Class(),this);
   } else {
      R__b.WriteClassBuffer(SoLIDGEMChamber::Class(),this);
   }
}

//______________________________________________________________________________
void SoLIDGEMChamber::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SoLIDGEMChamber.
      TClass *R__cl = ::SoLIDGEMChamber::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChamberID", &fChamberID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fParentTrackerID", &fParentTrackerID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNReadOut", &fNReadOut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDo3DAmCorr", &fDo3DAmCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "f3DAmCorrCut", &f3DAmCorrCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRMin", &fRMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRMax", &fRMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDz", &fDz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhi", &fPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhiCover", &fPhiCover);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhiOffset", &fPhiOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhiInLab", &fPhiInLab);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fReference", &fReference);
      R__insp.InspectMember(fReference, "fReference.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhiMin", &fPhiMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhiMax", &fPhiMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackerZ", &fTrackerZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHits", &fHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUOccupancy", &fUOccupancy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVOccupancy", &fVOccupancy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUHitOccupancy", &fUHitOccupancy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVHitOccupancy", &fVHitOccupancy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGEMReadOut", (void*)&fGEMReadOut);
      R__insp.InspectMember("vector<SoLIDGEMReadOut*>", (void*)&fGEMReadOut, "fGEMReadOut.", false);
      THaSubDetector::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SoLIDGEMChamber(void *p) {
      return  p ? new(p) ::SoLIDGEMChamber : new ::SoLIDGEMChamber;
   }
   static void *newArray_SoLIDGEMChamber(Long_t nElements, void *p) {
      return p ? new(p) ::SoLIDGEMChamber[nElements] : new ::SoLIDGEMChamber[nElements];
   }
   // Wrapper around operator delete
   static void delete_SoLIDGEMChamber(void *p) {
      delete ((::SoLIDGEMChamber*)p);
   }
   static void deleteArray_SoLIDGEMChamber(void *p) {
      delete [] ((::SoLIDGEMChamber*)p);
   }
   static void destruct_SoLIDGEMChamber(void *p) {
      typedef ::SoLIDGEMChamber current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SoLIDGEMChamber

//______________________________________________________________________________
void SoLIDGEMReadOut::Streamer(TBuffer &R__b)
{
   // Stream an object of class SoLIDGEMReadOut.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SoLIDGEMReadOut::Class(),this);
   } else {
      R__b.WriteClassBuffer(SoLIDGEMReadOut::Class(),this);
   }
}

//______________________________________________________________________________
void SoLIDGEMReadOut::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SoLIDGEMReadOut.
      TClass *R__cl = ::SoLIDGEMReadOut::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fReadOutID", &fReadOutID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStripAngle", &fStripAngle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSinStripAngle", &fSinStripAngle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCosStripAngle", &fCosStripAngle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fResolution", &fResolution);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxClusterSize", &fMaxClusterSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fADCMin", &fADCMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSplitFrac", &fSplitFrac);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxHits", &fMaxHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxTimeSample", &fMaxTimeSample);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fADCSigma", &fADCSigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDoNoise", &fDoNoise);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCheckPulseShape", &fCheckPulseShape);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDoHisto", &fDoHisto);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStripPitch", &fStripPitch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDz", &fDz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDPhi", &fDPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStartPos", &fStartPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNStrip", &fNStrip);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPed", (void*)&fPed);
      R__insp.InspectMember("SoLIDGEMReadOut::Vflt_t", (void*)&fPed, "fPed.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDeconMode", &fDeconMode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fADCraw", &fADCraw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fADC", &fADC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHitTime", &fHitTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fADCcor", &fADCcor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGoodHit", &fGoodHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDNoise", &fDNoise);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigStrips", (void*)&fSigStrips);
      R__insp.InspectMember("SoLIDGEMReadOut::Vint_t", (void*)&fSigStrips, "fSigStrips.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStripsSeen", (void*)&fStripsSeen);
      R__insp.InspectMember("SoLIDGEMReadOut::Vbool_t", (void*)&fStripsSeen, "fStripsSeen.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNRawStrips", &fNRawStrips);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNHitStrips", &fNHitStrips);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHitOcc", &fHitOcc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOccupancy", &fOccupancy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCoorOffset", &fCoorOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHits", &fHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMapType", &fMapType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChanMap", (void*)&fChanMap);
      R__insp.InspectMember("SoLIDGEMReadOut::Vint_t", (void*)&fChanMap, "fChanMap.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fADCMap", &fADCMap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMCHitList", (void*)&fMCHitList);
      R__insp.InspectMember("SoLIDGEMReadOut::Vint_t", (void*)&fMCHitList, "fMCHitList.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMCHitInfo", &fMCHitInfo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHitMap", &fHitMap);
      THaSubDetector::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SoLIDGEMReadOut(void *p) {
      return  p ? new(p) ::SoLIDGEMReadOut : new ::SoLIDGEMReadOut;
   }
   static void *newArray_SoLIDGEMReadOut(Long_t nElements, void *p) {
      return p ? new(p) ::SoLIDGEMReadOut[nElements] : new ::SoLIDGEMReadOut[nElements];
   }
   // Wrapper around operator delete
   static void delete_SoLIDGEMReadOut(void *p) {
      delete ((::SoLIDGEMReadOut*)p);
   }
   static void deleteArray_SoLIDGEMReadOut(void *p) {
      delete [] ((::SoLIDGEMReadOut*)p);
   }
   static void destruct_SoLIDGEMReadOut(void *p) {
      typedef ::SoLIDGEMReadOut current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SoLIDGEMReadOut

//______________________________________________________________________________
void SoLIDECal::Streamer(TBuffer &R__b)
{
   // Stream an object of class SoLIDECal.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SoLIDECal::Class(),this);
   } else {
      R__b.WriteClassBuffer(SoLIDECal::Class(),this);
   }
}

//______________________________________________________________________________
void SoLIDECal::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SoLIDECal.
      TClass *R__cl = ::SoLIDECal::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsLAECTriggered", &fIsLAECTriggered);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsFAECTriggered", &fIsFAECTriggered);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNLAECHits", &fNLAECHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNFAECHits", &fNFAECHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLAECZ", &fLAECZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFAECZ", &fFAECZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLAECEdpCut", &fLAECEdpCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFAECEdpCut", &fFAECEdpCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPosReso", &fPosReso);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEReso", &fEReso);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLAECHitMap", (void*)&fLAECHitMap);
      R__insp.InspectMember("map<Int_t,vector<Float_t> >", (void*)&fLAECHitMap, "fLAECHitMap.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFAECHitMap", (void*)&fFAECHitMap);
      R__insp.InspectMember("map<Int_t,vector<Float_t> >", (void*)&fFAECHitMap, "fFAECHitMap.", false);
      THaSubDetector::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SoLIDECal(void *p) {
      return  p ? new(p) ::SoLIDECal : new ::SoLIDECal;
   }
   static void *newArray_SoLIDECal(Long_t nElements, void *p) {
      return p ? new(p) ::SoLIDECal[nElements] : new ::SoLIDECal[nElements];
   }
   // Wrapper around operator delete
   static void delete_SoLIDECal(void *p) {
      delete ((::SoLIDECal*)p);
   }
   static void deleteArray_SoLIDECal(void *p) {
      delete [] ((::SoLIDECal*)p);
   }
   static void destruct_SoLIDECal(void *p) {
      typedef ::SoLIDECal current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SoLIDECal

//______________________________________________________________________________
void Hit::Streamer(TBuffer &R__b)
{
   // Stream an object of class Hit.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Hit::Class(),this);
   } else {
      R__b.WriteClassBuffer(Hit::Class(),this);
   }
}

//______________________________________________________________________________
void Hit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Hit.
      TClass *R__cl = ::Hit::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPos", &fPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fResolution", &fResolution);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fReadOut", &fReadOut);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Hit(void *p) {
      return  p ? new(p) ::Hit : new ::Hit;
   }
   static void *newArray_Hit(Long_t nElements, void *p) {
      return p ? new(p) ::Hit[nElements] : new ::Hit[nElements];
   }
   // Wrapper around operator delete
   static void delete_Hit(void *p) {
      delete ((::Hit*)p);
   }
   static void deleteArray_Hit(void *p) {
      delete [] ((::Hit*)p);
   }
   static void destruct_Hit(void *p) {
      typedef ::Hit current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Hit

//______________________________________________________________________________
void SoLIDRawHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class SoLIDRawHit.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SoLIDRawHit::Class(),this);
   } else {
      R__b.WriteClassBuffer(SoLIDRawHit::Class(),this);
   }
}

//______________________________________________________________________________
void SoLIDRawHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SoLIDRawHit.
      TClass *R__cl = ::SoLIDRawHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fADCsum", &fADCsum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSize", &fSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fType", &fType);
      Hit::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SoLIDRawHit(void *p) {
      return  p ? new(p) ::SoLIDRawHit : new ::SoLIDRawHit;
   }
   static void *newArray_SoLIDRawHit(Long_t nElements, void *p) {
      return p ? new(p) ::SoLIDRawHit[nElements] : new ::SoLIDRawHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_SoLIDRawHit(void *p) {
      delete ((::SoLIDRawHit*)p);
   }
   static void deleteArray_SoLIDRawHit(void *p) {
      delete [] ((::SoLIDRawHit*)p);
   }
   static void destruct_SoLIDRawHit(void *p) {
      typedef ::SoLIDRawHit current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SoLIDRawHit

//______________________________________________________________________________
void SoLIDGEMHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class SoLIDGEMHit.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SoLIDGEMHit::Class(),this);
   } else {
      R__b.WriteClassBuffer(SoLIDGEMHit::Class(),this);
   }
}

//______________________________________________________________________________
void SoLIDGEMHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SoLIDGEMHit.
      TClass *R__cl = ::SoLIDGEMHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsUsed", &fIsUsed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChamberID", &fChamberID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackerID", &fTrackerID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX", &fX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY", &fY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fR", &fR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhi", &fPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZ", &fZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fUHit", &fUHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fVHit", &fVHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPredictX", &fPredictX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPredictY", &fPredictY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPredicteX", &fPredicteX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPredicteY", &fPredicteY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPX", &fPX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPY", &fPY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPZ", &fPZ);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SoLIDGEMHit(void *p) {
      return  p ? new(p) ::SoLIDGEMHit : new ::SoLIDGEMHit;
   }
   static void *newArray_SoLIDGEMHit(Long_t nElements, void *p) {
      return p ? new(p) ::SoLIDGEMHit[nElements] : new ::SoLIDGEMHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_SoLIDGEMHit(void *p) {
      delete ((::SoLIDGEMHit*)p);
   }
   static void deleteArray_SoLIDGEMHit(void *p) {
      delete [] ((::SoLIDGEMHit*)p);
   }
   static void destruct_SoLIDGEMHit(void *p) {
      typedef ::SoLIDGEMHit current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SoLIDGEMHit

//______________________________________________________________________________
void SoLIDTrack::Streamer(TBuffer &R__b)
{
   // Stream an object of class SoLIDTrack.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SoLIDTrack::Class(),this);
   } else {
      R__b.WriteClassBuffer(SoLIDTrack::Class(),this);
   }
}

//______________________________________________________________________________
void SoLIDTrack::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SoLIDTrack.
      TClass *R__cl = ::SoLIDTrack::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCoarseChi2", &fCoarseChi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFineChi2", &fFineChi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsCoarseFitted", &fIsCoarseFitted);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsFineFitted", &fIsFineFitted);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStatus", &fStatus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCharge", &fCharge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMass", &fMass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPID", &fPID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAngleFlag", &fAngleFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMomMax", &fMomMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMomMin", &fMomMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fThetaMax", &fThetaMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fThetaMin", &fThetaMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMomentum", &fMomentum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVertexZ", &fVertexZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTheta", &fTheta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhi", &fPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNDF", &fNDF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHits", (void*)&fHits);
      R__insp.InspectMember("vector<SoLIDGEMHit*>", (void*)&fHits, "fHits.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SoLIDTrack(void *p) {
      return  p ? new(p) ::SoLIDTrack : new ::SoLIDTrack;
   }
   static void *newArray_SoLIDTrack(Long_t nElements, void *p) {
      return p ? new(p) ::SoLIDTrack[nElements] : new ::SoLIDTrack[nElements];
   }
   // Wrapper around operator delete
   static void delete_SoLIDTrack(void *p) {
      delete ((::SoLIDTrack*)p);
   }
   static void deleteArray_SoLIDTrack(void *p) {
      delete [] ((::SoLIDTrack*)p);
   }
   static void destruct_SoLIDTrack(void *p) {
      typedef ::SoLIDTrack current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SoLIDTrack

//______________________________________________________________________________
namespace ROOT {
   void ProgressiveTracking_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class ProgressiveTracking.
      typedef ::ROOT::Shadow::ProgressiveTracking ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::ProgressiveTracking*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDoMC", &sobj->fDoMC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNTracker", &sobj->fNTracker);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNElectron", &sobj->fNElectron);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNHadron", &sobj->fNHadron);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNTrack", &sobj->fNTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsIterBackward", &sobj->fIsIterBackward);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHasCaloHit", &sobj->fHasCaloHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCoarseTracks", &sobj->fCoarseTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNGoodHits[6]", sobj->fNGoodHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGoodHits[6]", &sobj->fGoodHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCaloHits", (void*)&sobj->fCaloHits);
      R__insp.InspectMember("vector<SoLIDCaloHit>", (void*)&sobj->fCaloHits, "fCaloHits.", false);
   }

}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_ProgressiveTracking(void *p) {
      delete ((::ProgressiveTracking*)p);
   }
   static void deleteArray_ProgressiveTracking(void *p) {
      delete [] ((::ProgressiveTracking*)p);
   }
   static void destruct_ProgressiveTracking(void *p) {
      typedef ::ProgressiveTracking current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::ProgressiveTracking

//______________________________________________________________________________
namespace ROOT {
   void SoLIDFieldMap_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class SoLIDFieldMap.
      typedef ::ROOT::Shadow::SoLIDFieldMap ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::SoLIDFieldMap*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Bz[1201][501]", sobj->Bz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Br[1201][501]", sobj->Br);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fField", &sobj->fField);
      R__insp.InspectMember(sobj->fField, "fField.");
   }

}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_SoLIDFieldMap(void *p) {
      delete ((::SoLIDFieldMap*)p);
   }
   static void deleteArray_SoLIDFieldMap(void *p) {
      delete [] ((::SoLIDFieldMap*)p);
   }
   static void destruct_SoLIDFieldMap(void *p) {
      typedef ::SoLIDFieldMap current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SoLIDFieldMap

//______________________________________________________________________________
namespace ROOT {
   void SoLKalTrackFinder_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class SoLKalTrackFinder.
      typedef ::ROOT::Shadow::SoLKalTrackFinder ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::SoLKalTrackFinder*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsMC", &sobj->fIsMC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGEMTracker", (void*)&sobj->fGEMTracker);
      R__insp.InspectMember("vector<SoLIDGEMTracker*>", (void*)&sobj->fGEMTracker, "fGEMTracker.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fECal", &sobj->fECal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNSeeds", &sobj->fNSeeds);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSeedEfficiency", &sobj->fSeedEfficiency);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMcTrackEfficiency", &sobj->fMcTrackEfficiency);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNTrackers", &sobj->fNTrackers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventNum", &sobj->fEventNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCaloHits", (void*)&sobj->fCaloHits);
      R__insp.InspectMember("vector<SoLIDCaloHit>", (void*)&sobj->fCaloHits, "fCaloHits.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWindowHits", (void*)&sobj->fWindowHits);
      R__insp.InspectMember("vector<SoLIDGEMHit*>", (void*)&sobj->fWindowHits, "fWindowHits.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFieldStepper", &sobj->fFieldStepper);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCoarseTracks", &sobj->fCoarseTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTargetPlaneZ", &sobj->fTargetPlaneZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTargetCenter", &sobj->fTargetCenter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTargetLength", &sobj->fTargetLength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBPMX", &sobj->fBPMX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBPMY", &sobj->fBPMY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGoodHits", (void*)&sobj->fGoodHits);
      R__insp.InspectMember("map<Int_t,vector<SoLIDGEMHit*> >", (void*)&sobj->fGoodHits, "fGoodHits.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSeedPool", (void*)&sobj->fSeedPool);
      R__insp.InspectMember("map<SeedType,vector<DoubletSeed> >", (void*)&sobj->fSeedPool, "fSeedPool.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNGoodTrack", &sobj->fNGoodTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChi2PerNDFCut", &sobj->fChi2PerNDFCut);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SoLKalTrackFinder(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::SoLKalTrackFinder : new ::SoLKalTrackFinder;
   }
   static void *newArray_SoLKalTrackFinder(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::SoLKalTrackFinder[nElements] : new ::SoLKalTrackFinder[nElements];
   }
   // Wrapper around operator delete
   static void delete_SoLKalTrackFinder(void *p) {
      delete ((::SoLKalTrackFinder*)p);
   }
   static void deleteArray_SoLKalTrackFinder(void *p) {
      delete [] ((::SoLKalTrackFinder*)p);
   }
   static void destruct_SoLKalTrackFinder(void *p) {
      typedef ::SoLKalTrackFinder current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SoLKalTrackFinder

//______________________________________________________________________________
void SoLKalMatrix::Streamer(TBuffer &R__b)
{
   // Stream an object of class SoLKalMatrix.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SoLKalMatrix::Class(),this);
   } else {
      R__b.WriteClassBuffer(SoLKalMatrix::Class(),this);
   }
}

//______________________________________________________________________________
void SoLKalMatrix::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SoLKalMatrix.
      TClass *R__cl = ::SoLKalMatrix::IsA();
      if (R__cl || R__insp.IsA()) { }
      TMatrixT<double>::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SoLKalMatrix(void *p) {
      return  p ? new(p) ::SoLKalMatrix : new ::SoLKalMatrix;
   }
   static void *newArray_SoLKalMatrix(Long_t nElements, void *p) {
      return p ? new(p) ::SoLKalMatrix[nElements] : new ::SoLKalMatrix[nElements];
   }
   // Wrapper around operator delete
   static void delete_SoLKalMatrix(void *p) {
      delete ((::SoLKalMatrix*)p);
   }
   static void deleteArray_SoLKalMatrix(void *p) {
      delete [] ((::SoLKalMatrix*)p);
   }
   static void destruct_SoLKalMatrix(void *p) {
      typedef ::SoLKalMatrix current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SoLKalMatrix

//______________________________________________________________________________
void SoLKalTrackSystem::Streamer(TBuffer &R__b)
{
   // Stream an object of class SoLKalTrackSystem.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SoLKalTrackSystem::Class(),this);
   } else {
      R__b.WriteClassBuffer(SoLKalTrackSystem::Class(),this);
   }
}

//______________________________________________________________________________
void SoLKalTrackSystem::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SoLKalTrackSystem.
      TClass *R__cl = ::SoLKalTrackSystem::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDeltaECX", &fDeltaECX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDeltaECY", &fDeltaECY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDeltaECE", &fDeltaECE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCurSitePtr", &fCurSitePtr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChi2", &fChi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMass", &fMass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCharge", &fCharge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsElectron", &fIsElectron);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsGood", &fIsGood);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAngleFlag", &fAngleFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNMissingHits", &fNMissingHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNHits", &fNHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNDF", &fNDF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMomentum", &fMomentum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTheta", &fTheta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhi", &fPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVertexZ", &fVertexZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSeedType", &fSeedType);
      TObjArray::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SoLKalTrackSystem(void *p) {
      return  p ? new(p) ::SoLKalTrackSystem : new ::SoLKalTrackSystem;
   }
   static void *newArray_SoLKalTrackSystem(Long_t nElements, void *p) {
      return p ? new(p) ::SoLKalTrackSystem[nElements] : new ::SoLKalTrackSystem[nElements];
   }
   // Wrapper around operator delete
   static void delete_SoLKalTrackSystem(void *p) {
      delete ((::SoLKalTrackSystem*)p);
   }
   static void deleteArray_SoLKalTrackSystem(void *p) {
      delete [] ((::SoLKalTrackSystem*)p);
   }
   static void destruct_SoLKalTrackSystem(void *p) {
      typedef ::SoLKalTrackSystem current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_SoLKalTrackSystem(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::SoLKalTrackSystem*)obj)->Merge(coll);
   }
} // end of namespace ROOT for class ::SoLKalTrackSystem

//______________________________________________________________________________
void SoLKalTrackState::Streamer(TBuffer &R__b)
{
   // Stream an object of class SoLKalTrackState.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SoLKalTrackState::Class(),this);
   } else {
      R__b.WriteClassBuffer(SoLKalTrackState::Class(),this);
   }
}

//______________________________________________________________________________
void SoLKalTrackState::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SoLKalTrackState.
      TClass *R__cl = ::SoLKalTrackState::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fType", &fType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSitePtr", &fSitePtr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fF", &fF);
      R__insp.InspectMember(fF, "fF.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFt", &fFt);
      R__insp.InspectMember(fFt, "fFt.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQ", &fQ);
      R__insp.InspectMember(fQ, "fQ.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fC", &fC);
      R__insp.InspectMember(fC, "fC.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAttemptState", &fAttemptState);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZ0", &fZ0);
      SoLKalMatrix::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SoLKalTrackState(void *p) {
      return  p ? new(p) ::SoLKalTrackState : new ::SoLKalTrackState;
   }
   static void *newArray_SoLKalTrackState(Long_t nElements, void *p) {
      return p ? new(p) ::SoLKalTrackState[nElements] : new ::SoLKalTrackState[nElements];
   }
   // Wrapper around operator delete
   static void delete_SoLKalTrackState(void *p) {
      delete ((::SoLKalTrackState*)p);
   }
   static void deleteArray_SoLKalTrackState(void *p) {
      delete [] ((::SoLKalTrackState*)p);
   }
   static void destruct_SoLKalTrackState(void *p) {
      typedef ::SoLKalTrackState current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SoLKalTrackState

//______________________________________________________________________________
void SoLKalTrackSite::Streamer(TBuffer &R__b)
{
   // Stream an object of class SoLKalTrackSite.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SoLKalTrackSite::Class(),this);
   } else {
      R__b.WriteClassBuffer(SoLKalTrackSite::Class(),this);
   }
}

//______________________________________________________________________________
void SoLKalTrackSite::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SoLKalTrackSite.
      TClass *R__cl = ::SoLKalTrackSite::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCurStatePtr", &fCurStatePtr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fM", &fM);
      R__insp.InspectMember(fM, "fM.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fV", &fV);
      R__insp.InspectMember(fV, "fV.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fH", &fH);
      R__insp.InspectMember(fH, "fH.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHt", &fHt);
      R__insp.InspectMember(fHt, "fHt.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fResVec", &fResVec);
      R__insp.InspectMember(fResVec, "fResVec.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fR", &fR);
      R__insp.InspectMember(fR, "fR.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDeltaChi2", &fDeltaChi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxDeltaChi2", &fMaxDeltaChi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGEMHit", &fGEMHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZ0", &fZ0);
      TObjArray::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SoLKalTrackSite(void *p) {
      return  p ? new(p) ::SoLKalTrackSite : new ::SoLKalTrackSite;
   }
   static void *newArray_SoLKalTrackSite(Long_t nElements, void *p) {
      return p ? new(p) ::SoLKalTrackSite[nElements] : new ::SoLKalTrackSite[nElements];
   }
   // Wrapper around operator delete
   static void delete_SoLKalTrackSite(void *p) {
      delete ((::SoLKalTrackSite*)p);
   }
   static void deleteArray_SoLKalTrackSite(void *p) {
      delete [] ((::SoLKalTrackSite*)p);
   }
   static void destruct_SoLKalTrackSite(void *p) {
      typedef ::SoLKalTrackSite current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_SoLKalTrackSite(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::SoLKalTrackSite*)obj)->Merge(coll);
   }
} // end of namespace ROOT for class ::SoLKalTrackSite

//______________________________________________________________________________
namespace ROOT {
   void SoLKalFieldStepper_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class SoLKalFieldStepper.
      typedef ::ROOT::Shadow::SoLKalFieldStepper ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::SoLKalFieldStepper*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFieldMap", &sobj->fFieldMap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsMSOn", &sobj->fIsMSOn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsDEDXOn", &sobj->fIsDEDXOn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsBackward", &sobj->fIsBackward);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackPosAtZ", &sobj->trackPosAtZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minPrecision", &sobj->minPrecision);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxPrecision", &sobj->maxPrecision);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minStepSize", &sobj->minStepSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxStepSize", &sobj->maxStepSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxNumSteps", &sobj->maxNumSteps);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stepSizeDec", &sobj->stepSizeDec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stepSizeInc", &sobj->stepSizeInc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stepLength", &sobj->stepLength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackLength", &sobj->trackLength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "energyLoss", &sobj->energyLoss);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxDist", &sobj->maxDist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "jstep", &sobj->jstep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "initialStepSize", &sobj->initialStepSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minLengthCalcQ", &sobj->minLengthCalcQ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMass", &sobj->fMass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCharge", &sobj->fCharge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsElectron", &sobj->fIsElectron);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDetMatProperties[2][5]", sobj->fDetMatProperties);
   }

}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_SoLKalFieldStepper(void *p) {
      delete ((::SoLKalFieldStepper*)p);
   }
   static void deleteArray_SoLKalFieldStepper(void *p) {
      delete [] ((::SoLKalFieldStepper*)p);
   }
   static void destruct_SoLKalFieldStepper(void *p) {
      typedef ::SoLKalFieldStepper current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SoLKalFieldStepper

//______________________________________________________________________________
void SoLIDMCRawHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class SoLIDMCRawHit.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SoLIDMCRawHit::Class(),this);
   } else {
      R__b.WriteClassBuffer(SoLIDMCRawHit::Class(),this);
   }
}

//______________________________________________________________________________
void SoLIDMCRawHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SoLIDMCRawHit.
      TClass *R__cl = ::SoLIDMCRawHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      SoLIDRawHit::ShowMembers(R__insp);
      //This works around a msvc bug and should be harmless on other platforms
      typedef Podd::MCHitInfo baseClass2;
      baseClass2::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SoLIDMCRawHit(void *p) {
      return  p ? new(p) ::SoLIDMCRawHit : new ::SoLIDMCRawHit;
   }
   static void *newArray_SoLIDMCRawHit(Long_t nElements, void *p) {
      return p ? new(p) ::SoLIDMCRawHit[nElements] : new ::SoLIDMCRawHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_SoLIDMCRawHit(void *p) {
      delete ((::SoLIDMCRawHit*)p);
   }
   static void deleteArray_SoLIDMCRawHit(void *p) {
      delete [] ((::SoLIDMCRawHit*)p);
   }
   static void destruct_SoLIDMCRawHit(void *p) {
      typedef ::SoLIDMCRawHit current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SoLIDMCRawHit

//______________________________________________________________________________
void SoLIDMCGEMHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class SoLIDMCGEMHit.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SoLIDMCGEMHit::Class(),this);
   } else {
      R__b.WriteClassBuffer(SoLIDMCGEMHit::Class(),this);
   }
}

//______________________________________________________________________________
void SoLIDMCGEMHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SoLIDMCGEMHit.
      TClass *R__cl = ::SoLIDMCGEMHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      SoLIDGEMHit::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SoLIDMCGEMHit(void *p) {
      return  p ? new(p) ::SoLIDMCGEMHit : new ::SoLIDMCGEMHit;
   }
   static void *newArray_SoLIDMCGEMHit(Long_t nElements, void *p) {
      return p ? new(p) ::SoLIDMCGEMHit[nElements] : new ::SoLIDMCGEMHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_SoLIDMCGEMHit(void *p) {
      delete ((::SoLIDMCGEMHit*)p);
   }
   static void deleteArray_SoLIDMCGEMHit(void *p) {
      delete [] ((::SoLIDMCGEMHit*)p);
   }
   static void destruct_SoLIDMCGEMHit(void *p) {
      typedef ::SoLIDMCGEMHit current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SoLIDMCGEMHit

//______________________________________________________________________________
void SoLIDMCTrack::Streamer(TBuffer &R__b)
{
   // Stream an object of class SoLIDMCTrack.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SoLIDMCTrack::Class(),this);
   } else {
      R__b.WriteClassBuffer(SoLIDMCTrack::Class(),this);
   }
}

//______________________________________________________________________________
void SoLIDMCTrack::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SoLIDMCTrack.
      TClass *R__cl = ::SoLIDMCTrack::IsA();
      if (R__cl || R__insp.IsA()) { }
      SoLIDTrack::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SoLIDMCTrack(void *p) {
      return  p ? new(p) ::SoLIDMCTrack : new ::SoLIDMCTrack;
   }
   static void *newArray_SoLIDMCTrack(Long_t nElements, void *p) {
      return p ? new(p) ::SoLIDMCTrack[nElements] : new ::SoLIDMCTrack[nElements];
   }
   // Wrapper around operator delete
   static void delete_SoLIDMCTrack(void *p) {
      delete ((::SoLIDMCTrack*)p);
   }
   static void deleteArray_SoLIDMCTrack(void *p) {
      delete [] ((::SoLIDMCTrack*)p);
   }
   static void destruct_SoLIDMCTrack(void *p) {
      typedef ::SoLIDMCTrack current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SoLIDMCTrack

namespace ROOT {
   void maplESeedTypecOvectorlESoLKalTrackFindercLcLDoubletSeedgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplESeedTypecOvectorlESoLKalTrackFindercLcLDoubletSeedgRsPgR_Dictionary();
   static void *new_maplESeedTypecOvectorlESoLKalTrackFindercLcLDoubletSeedgRsPgR(void *p = 0);
   static void *newArray_maplESeedTypecOvectorlESoLKalTrackFindercLcLDoubletSeedgRsPgR(Long_t size, void *p);
   static void delete_maplESeedTypecOvectorlESoLKalTrackFindercLcLDoubletSeedgRsPgR(void *p);
   static void deleteArray_maplESeedTypecOvectorlESoLKalTrackFindercLcLDoubletSeedgRsPgR(void *p);
   static void destruct_maplESeedTypecOvectorlESoLKalTrackFindercLcLDoubletSeedgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<SeedType,vector<SoLKalTrackFinder::DoubletSeed> >*)
   {
      map<SeedType,vector<SoLKalTrackFinder::DoubletSeed> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<SeedType,vector<SoLKalTrackFinder::DoubletSeed> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<SeedType,vector<SoLKalTrackFinder::DoubletSeed> >", -2, "prec_stl/map", 63,
                  typeid(map<SeedType,vector<SoLKalTrackFinder::DoubletSeed> >), DefineBehavior(ptr, ptr),
                  0, &maplESeedTypecOvectorlESoLKalTrackFindercLcLDoubletSeedgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(map<SeedType,vector<SoLKalTrackFinder::DoubletSeed> >) );
      instance.SetNew(&new_maplESeedTypecOvectorlESoLKalTrackFindercLcLDoubletSeedgRsPgR);
      instance.SetNewArray(&newArray_maplESeedTypecOvectorlESoLKalTrackFindercLcLDoubletSeedgRsPgR);
      instance.SetDelete(&delete_maplESeedTypecOvectorlESoLKalTrackFindercLcLDoubletSeedgRsPgR);
      instance.SetDeleteArray(&deleteArray_maplESeedTypecOvectorlESoLKalTrackFindercLcLDoubletSeedgRsPgR);
      instance.SetDestructor(&destruct_maplESeedTypecOvectorlESoLKalTrackFindercLcLDoubletSeedgRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<SeedType,vector<SoLKalTrackFinder::DoubletSeed> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<SeedType,vector<SoLKalTrackFinder::DoubletSeed> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplESeedTypecOvectorlESoLKalTrackFindercLcLDoubletSeedgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<SeedType,vector<SoLKalTrackFinder::DoubletSeed> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplESeedTypecOvectorlESoLKalTrackFindercLcLDoubletSeedgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<SeedType,vector<SoLKalTrackFinder::DoubletSeed> > : new map<SeedType,vector<SoLKalTrackFinder::DoubletSeed> >;
   }
   static void *newArray_maplESeedTypecOvectorlESoLKalTrackFindercLcLDoubletSeedgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<SeedType,vector<SoLKalTrackFinder::DoubletSeed> >[nElements] : new map<SeedType,vector<SoLKalTrackFinder::DoubletSeed> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplESeedTypecOvectorlESoLKalTrackFindercLcLDoubletSeedgRsPgR(void *p) {
      delete ((map<SeedType,vector<SoLKalTrackFinder::DoubletSeed> >*)p);
   }
   static void deleteArray_maplESeedTypecOvectorlESoLKalTrackFindercLcLDoubletSeedgRsPgR(void *p) {
      delete [] ((map<SeedType,vector<SoLKalTrackFinder::DoubletSeed> >*)p);
   }
   static void destruct_maplESeedTypecOvectorlESoLKalTrackFindercLcLDoubletSeedgRsPgR(void *p) {
      typedef map<SeedType,vector<SoLKalTrackFinder::DoubletSeed> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<SeedType,vector<SoLKalTrackFinder::DoubletSeed> >

namespace ROOT {
   void maplEintcOvectorlESoLIDGEMHitmUgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEintcOvectorlESoLIDGEMHitmUgRsPgR_Dictionary();
   static void *new_maplEintcOvectorlESoLIDGEMHitmUgRsPgR(void *p = 0);
   static void *newArray_maplEintcOvectorlESoLIDGEMHitmUgRsPgR(Long_t size, void *p);
   static void delete_maplEintcOvectorlESoLIDGEMHitmUgRsPgR(void *p);
   static void deleteArray_maplEintcOvectorlESoLIDGEMHitmUgRsPgR(void *p);
   static void destruct_maplEintcOvectorlESoLIDGEMHitmUgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<int,vector<SoLIDGEMHit*> >*)
   {
      map<int,vector<SoLIDGEMHit*> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<int,vector<SoLIDGEMHit*> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<int,vector<SoLIDGEMHit*> >", -2, "prec_stl/map", 63,
                  typeid(map<int,vector<SoLIDGEMHit*> >), DefineBehavior(ptr, ptr),
                  0, &maplEintcOvectorlESoLIDGEMHitmUgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(map<int,vector<SoLIDGEMHit*> >) );
      instance.SetNew(&new_maplEintcOvectorlESoLIDGEMHitmUgRsPgR);
      instance.SetNewArray(&newArray_maplEintcOvectorlESoLIDGEMHitmUgRsPgR);
      instance.SetDelete(&delete_maplEintcOvectorlESoLIDGEMHitmUgRsPgR);
      instance.SetDeleteArray(&deleteArray_maplEintcOvectorlESoLIDGEMHitmUgRsPgR);
      instance.SetDestructor(&destruct_maplEintcOvectorlESoLIDGEMHitmUgRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<int,vector<SoLIDGEMHit*> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<int,vector<SoLIDGEMHit*> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEintcOvectorlESoLIDGEMHitmUgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<int,vector<SoLIDGEMHit*> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEintcOvectorlESoLIDGEMHitmUgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<int,vector<SoLIDGEMHit*> > : new map<int,vector<SoLIDGEMHit*> >;
   }
   static void *newArray_maplEintcOvectorlESoLIDGEMHitmUgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<int,vector<SoLIDGEMHit*> >[nElements] : new map<int,vector<SoLIDGEMHit*> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEintcOvectorlESoLIDGEMHitmUgRsPgR(void *p) {
      delete ((map<int,vector<SoLIDGEMHit*> >*)p);
   }
   static void deleteArray_maplEintcOvectorlESoLIDGEMHitmUgRsPgR(void *p) {
      delete [] ((map<int,vector<SoLIDGEMHit*> >*)p);
   }
   static void destruct_maplEintcOvectorlESoLIDGEMHitmUgRsPgR(void *p) {
      typedef map<int,vector<SoLIDGEMHit*> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<int,vector<SoLIDGEMHit*> >

namespace ROOT {
   void vectorlESoLIDCaloHitgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlESoLIDCaloHitgR_Dictionary();
   static void *new_vectorlESoLIDCaloHitgR(void *p = 0);
   static void *newArray_vectorlESoLIDCaloHitgR(Long_t size, void *p);
   static void delete_vectorlESoLIDCaloHitgR(void *p);
   static void deleteArray_vectorlESoLIDCaloHitgR(void *p);
   static void destruct_vectorlESoLIDCaloHitgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<SoLIDCaloHit>*)
   {
      vector<SoLIDCaloHit> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<SoLIDCaloHit>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<SoLIDCaloHit>", -2, "prec_stl/vector", 49,
                  typeid(vector<SoLIDCaloHit>), DefineBehavior(ptr, ptr),
                  0, &vectorlESoLIDCaloHitgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<SoLIDCaloHit>) );
      instance.SetNew(&new_vectorlESoLIDCaloHitgR);
      instance.SetNewArray(&newArray_vectorlESoLIDCaloHitgR);
      instance.SetDelete(&delete_vectorlESoLIDCaloHitgR);
      instance.SetDeleteArray(&deleteArray_vectorlESoLIDCaloHitgR);
      instance.SetDestructor(&destruct_vectorlESoLIDCaloHitgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<SoLIDCaloHit> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<SoLIDCaloHit>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlESoLIDCaloHitgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<SoLIDCaloHit>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlESoLIDCaloHitgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SoLIDCaloHit> : new vector<SoLIDCaloHit>;
   }
   static void *newArray_vectorlESoLIDCaloHitgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SoLIDCaloHit>[nElements] : new vector<SoLIDCaloHit>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlESoLIDCaloHitgR(void *p) {
      delete ((vector<SoLIDCaloHit>*)p);
   }
   static void deleteArray_vectorlESoLIDCaloHitgR(void *p) {
      delete [] ((vector<SoLIDCaloHit>*)p);
   }
   static void destruct_vectorlESoLIDCaloHitgR(void *p) {
      typedef vector<SoLIDCaloHit> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<SoLIDCaloHit>

namespace ROOT {
   void vectorlESoLIDGEMHitmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlESoLIDGEMHitmUgR_Dictionary();
   static void *new_vectorlESoLIDGEMHitmUgR(void *p = 0);
   static void *newArray_vectorlESoLIDGEMHitmUgR(Long_t size, void *p);
   static void delete_vectorlESoLIDGEMHitmUgR(void *p);
   static void deleteArray_vectorlESoLIDGEMHitmUgR(void *p);
   static void destruct_vectorlESoLIDGEMHitmUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<SoLIDGEMHit*>*)
   {
      vector<SoLIDGEMHit*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<SoLIDGEMHit*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<SoLIDGEMHit*>", -2, "prec_stl/vector", 49,
                  typeid(vector<SoLIDGEMHit*>), DefineBehavior(ptr, ptr),
                  0, &vectorlESoLIDGEMHitmUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<SoLIDGEMHit*>) );
      instance.SetNew(&new_vectorlESoLIDGEMHitmUgR);
      instance.SetNewArray(&newArray_vectorlESoLIDGEMHitmUgR);
      instance.SetDelete(&delete_vectorlESoLIDGEMHitmUgR);
      instance.SetDeleteArray(&deleteArray_vectorlESoLIDGEMHitmUgR);
      instance.SetDestructor(&destruct_vectorlESoLIDGEMHitmUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<SoLIDGEMHit*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<SoLIDGEMHit*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlESoLIDGEMHitmUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<SoLIDGEMHit*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlESoLIDGEMHitmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SoLIDGEMHit*> : new vector<SoLIDGEMHit*>;
   }
   static void *newArray_vectorlESoLIDGEMHitmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SoLIDGEMHit*>[nElements] : new vector<SoLIDGEMHit*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlESoLIDGEMHitmUgR(void *p) {
      delete ((vector<SoLIDGEMHit*>*)p);
   }
   static void deleteArray_vectorlESoLIDGEMHitmUgR(void *p) {
      delete [] ((vector<SoLIDGEMHit*>*)p);
   }
   static void destruct_vectorlESoLIDGEMHitmUgR(void *p) {
      typedef vector<SoLIDGEMHit*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<SoLIDGEMHit*>

namespace ROOT {
   void vectorlESoLIDGEMTrackermUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlESoLIDGEMTrackermUgR_Dictionary();
   static void *new_vectorlESoLIDGEMTrackermUgR(void *p = 0);
   static void *newArray_vectorlESoLIDGEMTrackermUgR(Long_t size, void *p);
   static void delete_vectorlESoLIDGEMTrackermUgR(void *p);
   static void deleteArray_vectorlESoLIDGEMTrackermUgR(void *p);
   static void destruct_vectorlESoLIDGEMTrackermUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<SoLIDGEMTracker*>*)
   {
      vector<SoLIDGEMTracker*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<SoLIDGEMTracker*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<SoLIDGEMTracker*>", -2, "prec_stl/vector", 49,
                  typeid(vector<SoLIDGEMTracker*>), DefineBehavior(ptr, ptr),
                  0, &vectorlESoLIDGEMTrackermUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<SoLIDGEMTracker*>) );
      instance.SetNew(&new_vectorlESoLIDGEMTrackermUgR);
      instance.SetNewArray(&newArray_vectorlESoLIDGEMTrackermUgR);
      instance.SetDelete(&delete_vectorlESoLIDGEMTrackermUgR);
      instance.SetDeleteArray(&deleteArray_vectorlESoLIDGEMTrackermUgR);
      instance.SetDestructor(&destruct_vectorlESoLIDGEMTrackermUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<SoLIDGEMTracker*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<SoLIDGEMTracker*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlESoLIDGEMTrackermUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<SoLIDGEMTracker*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlESoLIDGEMTrackermUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SoLIDGEMTracker*> : new vector<SoLIDGEMTracker*>;
   }
   static void *newArray_vectorlESoLIDGEMTrackermUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SoLIDGEMTracker*>[nElements] : new vector<SoLIDGEMTracker*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlESoLIDGEMTrackermUgR(void *p) {
      delete ((vector<SoLIDGEMTracker*>*)p);
   }
   static void deleteArray_vectorlESoLIDGEMTrackermUgR(void *p) {
      delete [] ((vector<SoLIDGEMTracker*>*)p);
   }
   static void destruct_vectorlESoLIDGEMTrackermUgR(void *p) {
      typedef vector<SoLIDGEMTracker*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<SoLIDGEMTracker*>

namespace ROOT {
   void vectorlESoLKalTrackFindercLcLDoubletSeedgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlESoLKalTrackFindercLcLDoubletSeedgR_Dictionary();
   static void *new_vectorlESoLKalTrackFindercLcLDoubletSeedgR(void *p = 0);
   static void *newArray_vectorlESoLKalTrackFindercLcLDoubletSeedgR(Long_t size, void *p);
   static void delete_vectorlESoLKalTrackFindercLcLDoubletSeedgR(void *p);
   static void deleteArray_vectorlESoLKalTrackFindercLcLDoubletSeedgR(void *p);
   static void destruct_vectorlESoLKalTrackFindercLcLDoubletSeedgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<SoLKalTrackFinder::DoubletSeed>*)
   {
      vector<SoLKalTrackFinder::DoubletSeed> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<SoLKalTrackFinder::DoubletSeed>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<SoLKalTrackFinder::DoubletSeed>", -2, "prec_stl/vector", 49,
                  typeid(vector<SoLKalTrackFinder::DoubletSeed>), DefineBehavior(ptr, ptr),
                  0, &vectorlESoLKalTrackFindercLcLDoubletSeedgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<SoLKalTrackFinder::DoubletSeed>) );
      instance.SetNew(&new_vectorlESoLKalTrackFindercLcLDoubletSeedgR);
      instance.SetNewArray(&newArray_vectorlESoLKalTrackFindercLcLDoubletSeedgR);
      instance.SetDelete(&delete_vectorlESoLKalTrackFindercLcLDoubletSeedgR);
      instance.SetDeleteArray(&deleteArray_vectorlESoLKalTrackFindercLcLDoubletSeedgR);
      instance.SetDestructor(&destruct_vectorlESoLKalTrackFindercLcLDoubletSeedgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<SoLKalTrackFinder::DoubletSeed> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<SoLKalTrackFinder::DoubletSeed>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlESoLKalTrackFindercLcLDoubletSeedgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<SoLKalTrackFinder::DoubletSeed>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlESoLKalTrackFindercLcLDoubletSeedgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SoLKalTrackFinder::DoubletSeed> : new vector<SoLKalTrackFinder::DoubletSeed>;
   }
   static void *newArray_vectorlESoLKalTrackFindercLcLDoubletSeedgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SoLKalTrackFinder::DoubletSeed>[nElements] : new vector<SoLKalTrackFinder::DoubletSeed>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlESoLKalTrackFindercLcLDoubletSeedgR(void *p) {
      delete ((vector<SoLKalTrackFinder::DoubletSeed>*)p);
   }
   static void deleteArray_vectorlESoLKalTrackFindercLcLDoubletSeedgR(void *p) {
      delete [] ((vector<SoLKalTrackFinder::DoubletSeed>*)p);
   }
   static void destruct_vectorlESoLKalTrackFindercLcLDoubletSeedgR(void *p) {
      typedef vector<SoLKalTrackFinder::DoubletSeed> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<SoLKalTrackFinder::DoubletSeed>

/********************************************************
* SoLIDTrackingDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableSoLIDTrackingDict();

extern "C" void G__set_cpp_environmentSoLIDTrackingDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("SoLIDSpectrometer.h");
  G__add_compiledheader("SoLIDTrackerSystem.h");
  G__add_compiledheader("SoLIDGEMTracker.h");
  G__add_compiledheader("SoLIDGEMChamber.h");
  G__add_compiledheader("SoLIDGEMReadOut.h");
  G__add_compiledheader("SoLIDGEMHit.h");
  G__add_compiledheader("SoLIDTrack.h");
  G__add_compiledheader("SoLIDECal.h");
  G__add_compiledheader("ProgressiveTracking.h");
  G__add_compiledheader("SoLIDFieldMap.h");
  G__add_compiledheader("SoLKalTrackFinder.h");
  G__add_compiledheader("SoLKalMatrix.h");
  G__add_compiledheader("SoLKalTrackSystem.h");
  G__add_compiledheader("SoLKalTrackSite.h");
  G__add_compiledheader("SoLKalTrackState.h");
  G__add_compiledheader("SoLKalFieldStepper.h");
  G__add_compiledheader("SoLIDUtility.h");
  G__add_compiledheader("EProjType.h");
  G__cpp_reset_tagtableSoLIDTrackingDict();
}
#include <new>
extern "C" int G__cpp_dllrevSoLIDTrackingDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* SoLIDGEMReadOut */
static int G__SoLIDTrackingDict_469_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLIDGEMReadOut* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLIDGEMReadOut(
(Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (THaDetectorBase*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) SoLIDGEMReadOut(
(Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (THaDetectorBase*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLIDGEMReadOut(
(Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) SoLIDGEMReadOut(
(Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLIDGEMReadOut((Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) SoLIDGEMReadOut((Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMReadOut));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_469_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLIDGEMReadOut* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLIDGEMReadOut[n];
     } else {
       p = new((void*) gvp) SoLIDGEMReadOut[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLIDGEMReadOut;
     } else {
       p = new((void*) gvp) SoLIDGEMReadOut;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMReadOut));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_469_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const SoLIDGEMReadOut*) G__getstructoffset())->PrintDataBase((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_469_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLIDGEMReadOut*) G__getstructoffset())->SetReadOutID((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_469_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SoLIDGEMReadOut*) G__getstructoffset())->GetReadOutID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_469_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDGEMReadOut*) G__getstructoffset())->GetStripAngle());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_469_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDGEMReadOut*) G__getstructoffset())->GetSinStripAngle());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_469_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDGEMReadOut*) G__getstructoffset())->GetCosStripAngle());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_469_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDGEMReadOut*) G__getstructoffset())->GetStart());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_469_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SoLIDGEMReadOut*) G__getstructoffset())->GetHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_469_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SoLIDGEMReadOut*) G__getstructoffset())->GetNhits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_469_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDGEMReadOut*) G__getstructoffset())->GetResolution());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_469_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SoLIDGEMReadOut*) G__getstructoffset())->GetNSigStrips());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_469_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDGEMReadOut*) G__getstructoffset())->GetPitch());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_469_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDGEMReadOut*) G__getstructoffset())->GetOccupancy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_469_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDGEMReadOut*) G__getstructoffset())->GetHitOccupancy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_469_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((SoLIDGEMReadOut*) G__getstructoffset())->IsNoisyEvent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_469_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SoLIDGEMReadOut::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_469_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLIDGEMReadOut::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_469_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SoLIDGEMReadOut::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_469_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SoLIDGEMReadOut::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_469_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLIDGEMReadOut*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_469_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLIDGEMReadOut::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_469_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SoLIDGEMReadOut::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_469_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLIDGEMReadOut::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_469_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SoLIDGEMReadOut::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SoLIDGEMReadOut G__TSoLIDGEMReadOut;
static int G__SoLIDTrackingDict_469_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SoLIDGEMReadOut*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SoLIDGEMReadOut*) (soff+(sizeof(SoLIDGEMReadOut)*i)))->~G__TSoLIDGEMReadOut();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SoLIDGEMReadOut*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SoLIDGEMReadOut*) (soff))->~G__TSoLIDGEMReadOut();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Hit */
static int G__SoLIDTrackingDict_470_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Hit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Hit[n];
     } else {
       p = new((void*) gvp) Hit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Hit;
     } else {
       p = new((void*) gvp) Hit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_Hit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_470_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Hit* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Hit(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (SoLIDGEMReadOut*) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) Hit(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (SoLIDGEMReadOut*) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_Hit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_470_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const Hit*) G__getstructoffset())->Compare((Hit*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_470_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const Hit*) G__getstructoffset())->GetPos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_470_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const Hit*) G__getstructoffset())->GetResolution());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_470_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const Hit*) G__getstructoffset())->GetReadOut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_470_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Hit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_470_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Hit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_470_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Hit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_470_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Hit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_470_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Hit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_470_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Hit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_470_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Hit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_470_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Hit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_470_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Hit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SoLIDTrackingDict_470_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Hit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Hit(*(Hit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_Hit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Hit G__THit;
static int G__SoLIDTrackingDict_470_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Hit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Hit*) (soff+(sizeof(Hit)*i)))->~G__THit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Hit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Hit*) (soff))->~G__THit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SoLIDTrackingDict_470_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Hit* dest = (Hit*) G__getstructoffset();
   *dest = *(Hit*) libp->para[0].ref;
   const Hit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SoLIDRawHit */
static int G__SoLIDTrackingDict_471_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLIDRawHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLIDRawHit[n];
     } else {
       p = new((void*) gvp) SoLIDRawHit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLIDRawHit;
     } else {
       p = new((void*) gvp) SoLIDRawHit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDRawHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_471_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLIDRawHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 6
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SoLIDRawHit(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (SoLIDGEMReadOut*) G__int(libp->para[5]));
   } else {
     p = new((void*) gvp) SoLIDRawHit(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (SoLIDGEMReadOut*) G__int(libp->para[5]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDRawHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_471_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDRawHit*) G__getstructoffset())->GetADCsum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_471_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const SoLIDRawHit*) G__getstructoffset())->GetSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_471_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SoLIDRawHit*) G__getstructoffset())->GetType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_471_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SoLIDRawHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_471_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLIDRawHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_471_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SoLIDRawHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_471_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SoLIDRawHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_471_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLIDRawHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_471_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLIDRawHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_471_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SoLIDRawHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_471_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLIDRawHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_471_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SoLIDRawHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SoLIDTrackingDict_471_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SoLIDRawHit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SoLIDRawHit(*(SoLIDRawHit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDRawHit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SoLIDRawHit G__TSoLIDRawHit;
static int G__SoLIDTrackingDict_471_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SoLIDRawHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SoLIDRawHit*) (soff+(sizeof(SoLIDRawHit)*i)))->~G__TSoLIDRawHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SoLIDRawHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SoLIDRawHit*) (soff))->~G__TSoLIDRawHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SoLIDTrackingDict_471_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLIDRawHit* dest = (SoLIDRawHit*) G__getstructoffset();
   *dest = *(SoLIDRawHit*) libp->para[0].ref;
   const SoLIDRawHit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SoLIDMCRawHit */
static int G__SoLIDTrackingDict_472_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLIDMCRawHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLIDMCRawHit[n];
     } else {
       p = new((void*) gvp) SoLIDMCRawHit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLIDMCRawHit;
     } else {
       p = new((void*) gvp) SoLIDMCRawHit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDMCRawHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_472_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLIDMCRawHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 10
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SoLIDMCRawHit(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (SoLIDGEMReadOut*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9]));
   } else {
     p = new((void*) gvp) SoLIDMCRawHit(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (SoLIDGEMReadOut*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDMCRawHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_472_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SoLIDMCRawHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_472_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLIDMCRawHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_472_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SoLIDMCRawHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_472_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SoLIDMCRawHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_472_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLIDMCRawHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_472_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLIDMCRawHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_472_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SoLIDMCRawHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_472_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLIDMCRawHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_472_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SoLIDMCRawHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SoLIDTrackingDict_472_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SoLIDMCRawHit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SoLIDMCRawHit(*(SoLIDMCRawHit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDMCRawHit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SoLIDMCRawHit G__TSoLIDMCRawHit;
static int G__SoLIDTrackingDict_472_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SoLIDMCRawHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SoLIDMCRawHit*) (soff+(sizeof(SoLIDMCRawHit)*i)))->~G__TSoLIDMCRawHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SoLIDMCRawHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SoLIDMCRawHit*) (soff))->~G__TSoLIDMCRawHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SoLIDTrackingDict_472_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLIDMCRawHit* dest = (SoLIDMCRawHit*) G__getstructoffset();
   *dest = *(SoLIDMCRawHit*) libp->para[0].ref;
   const SoLIDMCRawHit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SoLIDGEMHit */
static int G__SoLIDTrackingDict_473_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLIDGEMHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLIDGEMHit[n];
     } else {
       p = new((void*) gvp) SoLIDGEMHit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLIDGEMHit;
     } else {
       p = new((void*) gvp) SoLIDGEMHit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_473_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLIDGEMHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 7
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SoLIDGEMHit(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Hit*) G__int(libp->para[5])
, (Hit*) G__int(libp->para[6]));
   } else {
     p = new((void*) gvp) SoLIDGEMHit(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Hit*) G__int(libp->para[5])
, (Hit*) G__int(libp->para[6]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_473_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const SoLIDGEMHit*) G__getstructoffset())->IsUsed());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_473_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SoLIDGEMHit*) G__getstructoffset())->GetChamberID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_473_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SoLIDGEMHit*) G__getstructoffset())->GetTrackerID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_473_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDGEMHit*) G__getstructoffset())->GetZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_473_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDGEMHit*) G__getstructoffset())->GetX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_473_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDGEMHit*) G__getstructoffset())->GetY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_473_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDGEMHit*) G__getstructoffset())->GetR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_473_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDGEMHit*) G__getstructoffset())->GetPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_473_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDGEMHit*) G__getstructoffset())->GetQU());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_473_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDGEMHit*) G__getstructoffset())->GetQV());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_473_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDGEMHit*) G__getstructoffset())->GetUPos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_473_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDGEMHit*) G__getstructoffset())->GetVPos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_473_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const SoLIDGEMHit*) G__getstructoffset())->GetUSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_473_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const SoLIDGEMHit*) G__getstructoffset())->GetVSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_473_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDGEMHit*) G__getstructoffset())->GetPredX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_473_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDGEMHit*) G__getstructoffset())->GetPredY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_473_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDGEMHit*) G__getstructoffset())->GetPredeX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_473_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDGEMHit*) G__getstructoffset())->GetPredeY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_473_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDGEMHit*) G__getstructoffset())->GetPX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_473_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDGEMHit*) G__getstructoffset())->GetPY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_473_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDGEMHit*) G__getstructoffset())->GetPZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_473_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SoLIDGEMHit*) G__getstructoffset())->GetUHit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_473_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SoLIDGEMHit*) G__getstructoffset())->GetVHit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_473_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLIDGEMHit*) G__getstructoffset())->SetPredictHit((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_473_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLIDGEMHit*) G__getstructoffset())->SetMomentum((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_473_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLIDGEMHit*) G__getstructoffset())->SetUsed();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_473_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SoLIDGEMHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_473_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLIDGEMHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_473_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SoLIDGEMHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_473_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SoLIDGEMHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_473_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLIDGEMHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_473_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLIDGEMHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_473_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SoLIDGEMHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_473_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLIDGEMHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_473_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SoLIDGEMHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SoLIDTrackingDict_473_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SoLIDGEMHit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SoLIDGEMHit(*(SoLIDGEMHit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMHit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SoLIDGEMHit G__TSoLIDGEMHit;
static int G__SoLIDTrackingDict_473_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SoLIDGEMHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SoLIDGEMHit*) (soff+(sizeof(SoLIDGEMHit)*i)))->~G__TSoLIDGEMHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SoLIDGEMHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SoLIDGEMHit*) (soff))->~G__TSoLIDGEMHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SoLIDTrackingDict_473_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLIDGEMHit* dest = (SoLIDGEMHit*) G__getstructoffset();
   *dest = *(SoLIDGEMHit*) libp->para[0].ref;
   const SoLIDGEMHit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SoLIDMCGEMHit */
static int G__SoLIDTrackingDict_474_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLIDMCGEMHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLIDMCGEMHit[n];
     } else {
       p = new((void*) gvp) SoLIDMCGEMHit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLIDMCGEMHit;
     } else {
       p = new((void*) gvp) SoLIDMCGEMHit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDMCGEMHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_474_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLIDMCGEMHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 7
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SoLIDMCGEMHit(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Hit*) G__int(libp->para[5])
, (Hit*) G__int(libp->para[6]));
   } else {
     p = new((void*) gvp) SoLIDMCGEMHit(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Hit*) G__int(libp->para[5])
, (Hit*) G__int(libp->para[6]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDMCGEMHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_474_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SoLIDMCGEMHit*) G__getstructoffset())->IsSignalHit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_474_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDMCGEMHit*) G__getstructoffset())->GetUPosMC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_474_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDMCGEMHit*) G__getstructoffset())->GetVPosMC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_474_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SoLIDMCGEMHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_474_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLIDMCGEMHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_474_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SoLIDMCGEMHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_474_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SoLIDMCGEMHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_474_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLIDMCGEMHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_474_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLIDMCGEMHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_474_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SoLIDMCGEMHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_474_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLIDMCGEMHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_474_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SoLIDMCGEMHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SoLIDTrackingDict_474_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SoLIDMCGEMHit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SoLIDMCGEMHit(*(SoLIDMCGEMHit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDMCGEMHit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SoLIDMCGEMHit G__TSoLIDMCGEMHit;
static int G__SoLIDTrackingDict_474_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SoLIDMCGEMHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SoLIDMCGEMHit*) (soff+(sizeof(SoLIDMCGEMHit)*i)))->~G__TSoLIDMCGEMHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SoLIDMCGEMHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SoLIDMCGEMHit*) (soff))->~G__TSoLIDMCGEMHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SoLIDTrackingDict_474_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLIDMCGEMHit* dest = (SoLIDMCGEMHit*) G__getstructoffset();
   *dest = *(SoLIDMCGEMHit*) libp->para[0].ref;
   const SoLIDMCGEMHit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SoLIDGEMTracker */
static int G__SoLIDTrackingDict_486_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLIDGEMTracker* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLIDGEMTracker(
(Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (THaDetectorBase*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) SoLIDGEMTracker(
(Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (THaDetectorBase*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLIDGEMTracker(
(Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) SoLIDGEMTracker(
(Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLIDGEMTracker((Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) SoLIDGEMTracker((Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMTracker));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_486_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLIDGEMTracker* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLIDGEMTracker[n];
     } else {
       p = new((void*) gvp) SoLIDGEMTracker[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLIDGEMTracker;
     } else {
       p = new((void*) gvp) SoLIDGEMTracker;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMTracker));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_486_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const SoLIDGEMTracker*) G__getstructoffset())->PrintDataBase((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_486_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLIDGEMTracker*) G__getstructoffset())->SetTrackerID((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_486_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SoLIDGEMTracker*) G__getstructoffset())->GetTrackerID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_486_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SoLIDGEMTracker*) G__getstructoffset())->GetNChamber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_486_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((SoLIDGEMTracker*) G__getstructoffset())->GetZ();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_486_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SoLIDGEMTracker*) G__getstructoffset())->CombineChamberHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_486_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SoLIDGEMTracker*) G__getstructoffset())->GetChamber((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_486_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SoLIDGEMTracker*) G__getstructoffset())->GetNHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_486_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((SoLIDGEMTracker*) G__getstructoffset())->GetUMeanOccu());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_486_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((SoLIDGEMTracker*) G__getstructoffset())->GetUMeanHitOccu());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_486_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((SoLIDGEMTracker*) G__getstructoffset())->GetVMeanOccu());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_486_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((SoLIDGEMTracker*) G__getstructoffset())->GetVMeanHitOccu());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_486_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SoLIDGEMTracker::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_486_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLIDGEMTracker::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_486_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SoLIDGEMTracker::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_486_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SoLIDGEMTracker::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_486_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLIDGEMTracker*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_486_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLIDGEMTracker::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_486_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SoLIDGEMTracker::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_486_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLIDGEMTracker::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_486_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SoLIDGEMTracker::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SoLIDGEMTracker G__TSoLIDGEMTracker;
static int G__SoLIDTrackingDict_486_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SoLIDGEMTracker*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SoLIDGEMTracker*) (soff+(sizeof(SoLIDGEMTracker)*i)))->~G__TSoLIDGEMTracker();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SoLIDGEMTracker*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SoLIDGEMTracker*) (soff))->~G__TSoLIDGEMTracker();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SoLIDGEMChamber */
static int G__SoLIDTrackingDict_487_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLIDGEMChamber* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLIDGEMChamber(
(Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (THaDetectorBase*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) SoLIDGEMChamber(
(Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (THaDetectorBase*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLIDGEMChamber(
(Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) SoLIDGEMChamber(
(Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLIDGEMChamber((Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) SoLIDGEMChamber((Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMChamber));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_487_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLIDGEMChamber* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLIDGEMChamber[n];
     } else {
       p = new((void*) gvp) SoLIDGEMChamber[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLIDGEMChamber;
     } else {
       p = new((void*) gvp) SoLIDGEMChamber;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMChamber));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_487_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const SoLIDGEMChamber*) G__getstructoffset())->PrintDataBase((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_487_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLIDGEMChamber*) G__getstructoffset())->SetChamberID((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_487_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SoLIDGEMChamber*) G__getstructoffset())->GetChamberID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_487_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDGEMChamber*) G__getstructoffset())->GetPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_487_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDGEMChamber*) G__getstructoffset())->GetPhiCover());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_487_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDGEMChamber*) G__getstructoffset())->GetPhiOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_487_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector2* pobj;
         const TVector2 xobj = ((const SoLIDGEMChamber*) G__getstructoffset())->GetReference();
         pobj = new TVector2(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_487_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3* pobj;
         const TVector3 xobj = ((const SoLIDGEMChamber*) G__getstructoffset())->GetCenterPos();
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_487_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDGEMChamber*) G__getstructoffset())->GetZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_487_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SoLIDGEMChamber*) G__getstructoffset())->GetNHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_487_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SoLIDGEMChamber*) G__getstructoffset())->GetHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_487_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SoLIDGEMChamber*) G__getstructoffset())->GetReadOut((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_487_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDGEMChamber*) G__getstructoffset())->GetUOccupancy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_487_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDGEMChamber*) G__getstructoffset())->GetUHitOccupancy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_487_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDGEMChamber*) G__getstructoffset())->GetVOccupancy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_487_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDGEMChamber*) G__getstructoffset())->GetVHitOccupancy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_487_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SoLIDGEMChamber::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_487_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLIDGEMChamber::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_487_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SoLIDGEMChamber::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_487_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SoLIDGEMChamber::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_487_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLIDGEMChamber*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_487_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLIDGEMChamber::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_487_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SoLIDGEMChamber::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_487_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLIDGEMChamber::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_487_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SoLIDGEMChamber::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SoLIDGEMChamber G__TSoLIDGEMChamber;
static int G__SoLIDTrackingDict_487_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SoLIDGEMChamber*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SoLIDGEMChamber*) (soff+(sizeof(SoLIDGEMChamber)*i)))->~G__TSoLIDGEMChamber();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SoLIDGEMChamber*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SoLIDGEMChamber*) (soff))->~G__TSoLIDGEMChamber();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SoLIDECal */
static int G__SoLIDTrackingDict_724_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLIDECal* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLIDECal[n];
     } else {
       p = new((void*) gvp) SoLIDECal[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLIDECal;
     } else {
       p = new((void*) gvp) SoLIDECal;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDECal));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_724_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLIDECal* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLIDECal(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (THaDetectorBase*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) SoLIDECal(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (THaDetectorBase*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLIDECal((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) SoLIDECal((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLIDECal((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) SoLIDECal((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDECal));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_724_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const SoLIDECal*) G__getstructoffset())->PrintDataBase();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_724_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const SoLIDECal*) G__getstructoffset())->IsFAECTriggered());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_724_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const SoLIDECal*) G__getstructoffset())->IsLAECTriggered());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_724_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const SoLIDECal*) G__getstructoffset())->GetNLAECHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_724_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const SoLIDECal*) G__getstructoffset())->GetNFAECHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_724_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((SoLIDECal*) G__getstructoffset())->GetLAECHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_724_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((SoLIDECal*) G__getstructoffset())->GetFAECHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_724_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDECal*) G__getstructoffset())->GetECZ((ECType) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_724_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDECal*) G__getstructoffset())->GetPosReso());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_724_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDECal*) G__getstructoffset())->GetEReso());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_724_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLIDECal*) G__getstructoffset())->SmearPosition((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_724_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLIDECal*) G__getstructoffset())->SmearEnergy((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_724_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SoLIDECal::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_724_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLIDECal::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_724_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SoLIDECal::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_724_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SoLIDECal::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_724_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLIDECal*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_724_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLIDECal::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_724_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SoLIDECal::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_724_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLIDECal::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_724_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SoLIDECal::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SoLIDECal G__TSoLIDECal;
static int G__SoLIDTrackingDict_724_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SoLIDECal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SoLIDECal*) (soff+(sizeof(SoLIDECal)*i)))->~G__TSoLIDECal();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SoLIDECal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SoLIDECal*) (soff))->~G__TSoLIDECal();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SoLIDTrack */
static int G__SoLIDTrackingDict_732_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLIDTrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLIDTrack[n];
     } else {
       p = new((void*) gvp) SoLIDTrack[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLIDTrack;
     } else {
       p = new((void*) gvp) SoLIDTrack;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLIDTrack*) G__getstructoffset())->SetCoarseFitStatus((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLIDTrack*) G__getstructoffset())->SetCoarseChi2((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLIDTrack*) G__getstructoffset())->SetFineFirStatus((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLIDTrack*) G__getstructoffset())->SetFineChi2((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLIDTrack*) G__getstructoffset())->SetStatus((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLIDTrack*) G__getstructoffset())->SetCharge((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLIDTrack*) G__getstructoffset())->SetMass((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLIDTrack*) G__getstructoffset())->SetPID((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLIDTrack*) G__getstructoffset())->SetAngleFlag((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLIDTrack*) G__getstructoffset())->SetMomMax((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLIDTrack*) G__getstructoffset())->SetMomMin((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLIDTrack*) G__getstructoffset())->SetThetaMax((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLIDTrack*) G__getstructoffset())->SetThetaMin((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLIDTrack*) G__getstructoffset())->SetMomentum((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLIDTrack*) G__getstructoffset())->SetVertexZ((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLIDTrack*) G__getstructoffset())->SetTheta((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLIDTrack*) G__getstructoffset())->SetPhi((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLIDTrack*) G__getstructoffset())->SetNDF((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const SoLIDTrack*) G__getstructoffset())->IsCoarseFitted());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const SoLIDTrack*) G__getstructoffset())->IsFineFitted());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetChi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const SoLIDTrack*) G__getstructoffset())->GetNHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SoLIDTrack*) G__getstructoffset())->GetHit((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const SoLIDTrack*) G__getstructoffset())->GetStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetMass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetPID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SoLIDTrack*) G__getstructoffset())->GetAngleFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetMomMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetMomMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetThetaMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetThetaMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetMomentum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetVertexZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SoLIDTrack*) G__getstructoffset())->GetNDF());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetChi2perNDF());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLIDTrack*) G__getstructoffset())->AddHit((SoLIDGEMHit*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetHitInfo((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetHitX0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetHitX1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetHitX2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetHitX3());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetHitX4());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetHitX5());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetPredHitX0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetPredHitX1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetPredHitX2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetPredHitX3());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetPredHitX4());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetPredHitX5());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetHitY0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetHitY1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetHitY2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetHitY3());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetHitY4());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetHitY5());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetPredHitY0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetPredHitY1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetPredHitY2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetPredHitY3());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetPredHitY4());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetPredHitY5());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetHitTracker0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetHitTracker1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetHitTracker2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetHitTracker3());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetHitTracker4());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetHitTracker5());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetPredHiteX0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetPredHiteX1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetPredHiteX2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetPredHiteX3());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetPredHiteX4());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetPredHiteX5());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetPredHiteY0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetPredHiteY1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetPredHiteY2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetPredHiteY3());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetPredHiteY4());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetPredHiteY5());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetHitPX0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetHitPX1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetHitPX2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetHitPX3());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetHitPX4());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetHitPX5());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetHitPY0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetHitPY1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetHitPY2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetHitPY3());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetHitPY4());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetHitPY5());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetHitPZ0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetHitPZ1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetHitPZ2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_101(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetHitPZ3());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_102(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetHitPZ4());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_103(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrack*) G__getstructoffset())->GetHitPZ5());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_104(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) SoLIDTrack::SortHitZ((SoLIDGEMHit*) G__int(libp->para[0]), (SoLIDGEMHit*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_105(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLIDTrack*) G__getstructoffset())->SortHits();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_106(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SoLIDTrack::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_107(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLIDTrack::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_108(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SoLIDTrack::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_109(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SoLIDTrack::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_113(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLIDTrack*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_114(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLIDTrack::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_115(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SoLIDTrack::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_116(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLIDTrack::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_732_0_117(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SoLIDTrack::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SoLIDTrackingDict_732_0_118(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SoLIDTrack* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SoLIDTrack(*(SoLIDTrack*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SoLIDTrack G__TSoLIDTrack;
static int G__SoLIDTrackingDict_732_0_119(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SoLIDTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SoLIDTrack*) (soff+(sizeof(SoLIDTrack)*i)))->~G__TSoLIDTrack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SoLIDTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SoLIDTrack*) (soff))->~G__TSoLIDTrack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SoLIDTrackingDict_732_0_120(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLIDTrack* dest = (SoLIDTrack*) G__getstructoffset();
   *dest = *(SoLIDTrack*) libp->para[0].ref;
   const SoLIDTrack& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SoLIDMCTrack */
static int G__SoLIDTrackingDict_737_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLIDMCTrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLIDMCTrack[n];
     } else {
       p = new((void*) gvp) SoLIDMCTrack[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLIDMCTrack;
     } else {
       p = new((void*) gvp) SoLIDMCTrack;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDMCTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_737_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDMCTrack*) G__getstructoffset())->GetMCHitInfo((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_737_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDMCTrack*) G__getstructoffset())->IsSignalHit0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_737_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDMCTrack*) G__getstructoffset())->IsSignalHit1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_737_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDMCTrack*) G__getstructoffset())->IsSignalHit2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_737_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDMCTrack*) G__getstructoffset())->IsSignalHit3());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_737_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDMCTrack*) G__getstructoffset())->IsSignalHit4());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_737_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDMCTrack*) G__getstructoffset())->IsSignalHit5());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_737_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SoLIDMCTrack*) G__getstructoffset())->GetNMCHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_737_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SoLIDMCTrack::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_737_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLIDMCTrack::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_737_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SoLIDMCTrack::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_737_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SoLIDMCTrack::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_737_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLIDMCTrack*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_737_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLIDMCTrack::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_737_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SoLIDMCTrack::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_737_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLIDMCTrack::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_737_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SoLIDMCTrack::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SoLIDTrackingDict_737_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SoLIDMCTrack* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SoLIDMCTrack(*(SoLIDMCTrack*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDMCTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SoLIDMCTrack G__TSoLIDMCTrack;
static int G__SoLIDTrackingDict_737_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SoLIDMCTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SoLIDMCTrack*) (soff+(sizeof(SoLIDMCTrack)*i)))->~G__TSoLIDMCTrack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SoLIDMCTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SoLIDMCTrack*) (soff))->~G__TSoLIDMCTrack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SoLIDTrackingDict_737_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLIDMCTrack* dest = (SoLIDMCTrack*) G__getstructoffset();
   *dest = *(SoLIDMCTrack*) libp->para[0].ref;
   const SoLIDMCTrack& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ProgressiveTracking */
static int G__SoLIDTrackingDict_738_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProgressiveTracking* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new ProgressiveTracking((Int_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) ProgressiveTracking((Int_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_ProgressiveTracking));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_738_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ProgressiveTracking*) G__getstructoffset())->ProcessHits((map<Int_t,vector<TSeqCollection*> >*) G__int(libp->para[0]), (TClonesArray*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_738_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((ProgressiveTracking*) G__getstructoffset())->ReadDataBase());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_738_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((ProgressiveTracking*) G__getstructoffset())->Clear((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((ProgressiveTracking*) G__getstructoffset())->Clear();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_738_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const ProgressiveTracking*) G__getstructoffset())->IsIterBackward());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_738_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const ProgressiveTracking*) G__getstructoffset())->HasCaloHit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_738_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ProgressiveTracking*) G__getstructoffset())->SetCaloHit((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_738_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ProgressiveTracking*) G__getstructoffset())->SetIterBackward((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_738_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ProgressiveTracking*) G__getstructoffset())->SetNElectron((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_738_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ProgressiveTracking*) G__getstructoffset())->SetNHadron((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SoLIDTrackingDict_738_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ProgressiveTracking* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ProgressiveTracking(*(ProgressiveTracking*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_ProgressiveTracking));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ProgressiveTracking G__TProgressiveTracking;
static int G__SoLIDTrackingDict_738_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ProgressiveTracking*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ProgressiveTracking*) (soff+(sizeof(ProgressiveTracking)*i)))->~G__TProgressiveTracking();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ProgressiveTracking*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ProgressiveTracking*) (soff))->~G__TProgressiveTracking();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SoLIDTrackingDict_738_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProgressiveTracking* dest = (ProgressiveTracking*) G__getstructoffset();
   *dest = *(ProgressiveTracking*) libp->para[0].ref;
   const ProgressiveTracking& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SoLIDFieldMap */
static int G__SoLIDTrackingDict_754_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SoLIDFieldMap::GetInstance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_754_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3& obj = ((SoLIDFieldMap*) G__getstructoffset())->GetBField((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SoLIDTrackingDict_754_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SoLIDFieldMap* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SoLIDFieldMap(*(SoLIDFieldMap*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDFieldMap));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SoLIDFieldMap G__TSoLIDFieldMap;
static int G__SoLIDTrackingDict_754_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SoLIDFieldMap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SoLIDFieldMap*) (soff+(sizeof(SoLIDFieldMap)*i)))->~G__TSoLIDFieldMap();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SoLIDFieldMap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SoLIDFieldMap*) (soff))->~G__TSoLIDFieldMap();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SoLIDTrackingDict_754_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLIDFieldMap* dest = (SoLIDFieldMap*) G__getstructoffset();
   *dest = *(SoLIDFieldMap*) libp->para[0].ref;
   const SoLIDFieldMap& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SoLKalMatrix */
static int G__SoLIDTrackingDict_755_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLKalMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLKalMatrix((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) SoLKalMatrix((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLKalMatrix((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) SoLKalMatrix((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SoLKalMatrix[n];
       } else {
         p = new((void*) gvp) SoLKalMatrix[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SoLKalMatrix;
       } else {
         p = new((void*) gvp) SoLKalMatrix;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_755_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLKalMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SoLKalMatrix(*(SoLKalMatrix*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) SoLKalMatrix(*(SoLKalMatrix*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_755_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLKalMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SoLKalMatrix(*(TMatrixD*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) SoLKalMatrix(*(TMatrixD*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_755_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLKalMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SoLKalMatrix((TMatrixT<double>::EMatrixCreatorsOp1) G__int(libp->para[0]), *(SoLKalMatrix*) libp->para[1].ref);
   } else {
     p = new((void*) gvp) SoLKalMatrix((TMatrixT<double>::EMatrixCreatorsOp1) G__int(libp->para[0]), *(SoLKalMatrix*) libp->para[1].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_755_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLKalMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SoLKalMatrix((TMatrixT<double>::EMatrixCreatorsOp1) G__int(libp->para[0]), *(TMatrixD*) libp->para[1].ref);
   } else {
     p = new((void*) gvp) SoLKalMatrix((TMatrixT<double>::EMatrixCreatorsOp1) G__int(libp->para[0]), *(TMatrixD*) libp->para[1].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_755_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLKalMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SoLKalMatrix(
*(SoLKalMatrix*) libp->para[0].ref, (TMatrixT<double>::EMatrixCreatorsOp2) G__int(libp->para[1])
, *(SoLKalMatrix*) libp->para[2].ref);
   } else {
     p = new((void*) gvp) SoLKalMatrix(
*(SoLKalMatrix*) libp->para[0].ref, (TMatrixT<double>::EMatrixCreatorsOp2) G__int(libp->para[1])
, *(SoLKalMatrix*) libp->para[2].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_755_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLKalMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SoLKalMatrix(
*(TMatrixD*) libp->para[0].ref, (TMatrixT<double>::EMatrixCreatorsOp2) G__int(libp->para[1])
, *(TMatrixD*) libp->para[2].ref);
   } else {
     p = new((void*) gvp) SoLKalMatrix(
*(TMatrixD*) libp->para[0].ref, (TMatrixT<double>::EMatrixCreatorsOp2) G__int(libp->para[1])
, *(TMatrixD*) libp->para[2].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_755_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLKalMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SoLKalMatrix(*(TVector3*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) SoLKalMatrix(*(TVector3*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_755_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((const SoLKalMatrix*) G__getstructoffset())->DebugPrint((Option_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((const SoLKalMatrix*) G__getstructoffset())->DebugPrint((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const SoLKalMatrix*) G__getstructoffset())->DebugPrint();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_755_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         SoLKalMatrix* pobj;
         SoLKalMatrix xobj = SoLKalMatrix::ToKalMat(*(TVector3*) libp->para[0].ref);
         pobj = new SoLKalMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_755_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TVector3* pobj;
         TVector3 xobj = SoLKalMatrix::ToThreeVec(*(TMatrixD*) libp->para[0].ref);
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_755_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SoLKalMatrix::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_755_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLKalMatrix::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_755_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SoLKalMatrix::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_755_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SoLKalMatrix::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_755_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalMatrix*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_755_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLKalMatrix::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_755_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SoLKalMatrix::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_755_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLKalMatrix::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_755_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SoLKalMatrix::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SoLKalMatrix G__TSoLKalMatrix;
static int G__SoLIDTrackingDict_755_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SoLKalMatrix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SoLKalMatrix*) (soff+(sizeof(SoLKalMatrix)*i)))->~G__TSoLKalMatrix();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SoLKalMatrix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SoLKalMatrix*) (soff))->~G__TSoLKalMatrix();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SoLIDTrackingDict_755_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLKalMatrix* dest = (SoLKalMatrix*) G__getstructoffset();
   *dest = *(SoLKalMatrix*) libp->para[0].ref;
   const SoLKalMatrix& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SoLKalTrackSystem */
static int G__SoLIDTrackingDict_756_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLKalTrackSystem* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLKalTrackSystem((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) SoLKalTrackSystem((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SoLKalTrackSystem[n];
       } else {
         p = new((void*) gvp) SoLKalTrackSystem[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SoLKalTrackSystem;
       } else {
         p = new((void*) gvp) SoLKalTrackSystem;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackSystem));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((SoLKalTrackSystem*) G__getstructoffset())->AddAndFilter(*(SoLKalTrackSite*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalTrackSystem*) G__getstructoffset())->SmoothBackTo((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalTrackSystem*) G__getstructoffset())->SmoothAll();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalTrackSystem*) G__getstructoffset())->InvFilter((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SoLKalTrackSite& obj = ((SoLKalTrackSystem*) G__getstructoffset())->GetCurSite();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SoLKalTrackState& obj = ((SoLKalTrackSystem*) G__getstructoffset())->GetState((SoLKalTrackSite::EStType) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((SoLKalTrackSystem*) G__getstructoffset())->GetChi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalTrackSystem*) G__getstructoffset())->IncreaseChi2((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((const SoLKalTrackSystem*) G__getstructoffset())->GetNDF((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((const SoLKalTrackSystem*) G__getstructoffset())->GetNDF());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLKalTrackSystem*) G__getstructoffset())->GetChi2perNDF());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SoLKalTrackSystem::GetCurInstancePtr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalTrackSystem*) G__getstructoffset())->SetCurInstancePtr((SoLKalTrackSystem*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalTrackSystem*) G__getstructoffset())->SetSitePtrToLastSite();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalTrackSystem*) G__getstructoffset())->SetMomentum((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLKalTrackSystem*) G__getstructoffset())->GetMomentum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalTrackSystem*) G__getstructoffset())->SetTheta((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLKalTrackSystem*) G__getstructoffset())->GetTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalTrackSystem*) G__getstructoffset())->SetPhi((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLKalTrackSystem*) G__getstructoffset())->GetPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalTrackSystem*) G__getstructoffset())->SetVertexZ((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLKalTrackSystem*) G__getstructoffset())->GetVertexZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalTrackSystem*) G__getstructoffset())->SetMass((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLKalTrackSystem*) G__getstructoffset())->GetMass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalTrackSystem*) G__getstructoffset())->SetCharge((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLKalTrackSystem*) G__getstructoffset())->GetCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalTrackSystem*) G__getstructoffset())->SetElectron((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const SoLKalTrackSystem*) G__getstructoffset())->IsElectron());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const SoLKalTrackSystem*) G__getstructoffset())->GetTrackStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalTrackSystem*) G__getstructoffset())->SetTrackStatus((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SoLKalTrackSystem*) G__getstructoffset())->GetAngleFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalTrackSystem*) G__getstructoffset())->SetAngleFlag((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SoLKalTrackSystem*) G__getstructoffset())->GetSeedType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalTrackSystem*) G__getstructoffset())->SetSeedType((SeedType) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalTrackSystem*) G__getstructoffset())->CheckTrackStatus();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Int_t& obj = ((const SoLKalTrackSystem*) G__getstructoffset())->GetNMissingHits();
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalTrackSystem*) G__getstructoffset())->AddMissingHits();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SoLKalTrackSystem*) G__getstructoffset())->GetNHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SoLKalTrackSystem::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLKalTrackSystem::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SoLKalTrackSystem::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SoLKalTrackSystem::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalTrackSystem*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLKalTrackSystem::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SoLKalTrackSystem::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLKalTrackSystem::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_756_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SoLKalTrackSystem::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SoLKalTrackSystem G__TSoLKalTrackSystem;
static int G__SoLIDTrackingDict_756_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SoLKalTrackSystem*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SoLKalTrackSystem*) (soff+(sizeof(SoLKalTrackSystem)*i)))->~G__TSoLKalTrackSystem();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SoLKalTrackSystem*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SoLKalTrackSystem*) (soff))->~G__TSoLKalTrackSystem();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SoLKalTrackSite */
static int G__SoLIDTrackingDict_757_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLKalTrackSite* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLKalTrackSite(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) SoLKalTrackSite(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLKalTrackSite((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) SoLKalTrackSite((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLKalTrackSite((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) SoLKalTrackSite((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SoLKalTrackSite[n];
       } else {
         p = new((void*) gvp) SoLKalTrackSite[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SoLKalTrackSite;
       } else {
         p = new((void*) gvp) SoLKalTrackSite;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackSite));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_757_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLKalTrackSite* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLKalTrackSite(
(SoLIDGEMHit*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3]));
     } else {
       p = new((void*) gvp) SoLKalTrackSite(
(SoLIDGEMHit*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLKalTrackSite(
(SoLIDGEMHit*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) SoLKalTrackSite(
(SoLIDGEMHit*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLKalTrackSite((SoLIDGEMHit*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) SoLKalTrackSite((SoLIDGEMHit*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLKalTrackSite((SoLIDGEMHit*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) SoLKalTrackSite((SoLIDGEMHit*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackSite));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_757_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SoLKalTrackSite*) G__getstructoffset())->CalcExpectedMeasVec(*(SoLKalTrackState*) libp->para[0].ref, *(SoLKalMatrix*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_757_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SoLKalTrackSite*) G__getstructoffset())->CalcMeasVecDerivative(*(SoLKalTrackState*) libp->para[0].ref, *(SoLKalMatrix*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_757_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((SoLKalTrackSite*) G__getstructoffset())->Filter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_757_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalTrackSite*) G__getstructoffset())->Smooth(*(SoLKalTrackSite*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_757_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalTrackSite*) G__getstructoffset())->InvFilter();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_757_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((SoLKalTrackSite*) G__getstructoffset())->IsAccepted());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_757_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalTrackSite*) G__getstructoffset())->SetHitResolution((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_757_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalTrackSite*) G__getstructoffset())->SetMeasurement((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_757_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SoLKalTrackSite*) G__getstructoffset())->GetDimension());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_757_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SoLKalTrackState& obj = ((SoLKalTrackSite*) G__getstructoffset())->GetCurState();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_757_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SoLKalTrackState& obj = ((const SoLKalTrackSite*) G__getstructoffset())->GetCurState();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_757_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SoLKalTrackState& obj = ((SoLKalTrackSite*) G__getstructoffset())->GetState((SoLKalTrackSite::EStType) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_757_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SoLKalMatrix& obj = ((SoLKalTrackSite*) G__getstructoffset())->GetMeasVec();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_757_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SoLKalMatrix& obj = ((SoLKalTrackSite*) G__getstructoffset())->GetMeasNoiseMat();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_757_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SoLKalMatrix& obj = ((SoLKalTrackSite*) G__getstructoffset())->GetResVec();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_757_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SoLKalMatrix& obj = ((SoLKalTrackSite*) G__getstructoffset())->GetCovMat();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_757_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLKalTrackSite*) G__getstructoffset())->GetDeltaChi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_757_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLKalTrackSite*) G__getstructoffset())->GetZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_757_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalTrackSite*) G__getstructoffset())->SetZ((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_757_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         SoLKalMatrix* pobj;
         SoLKalMatrix xobj = ((SoLKalTrackSite*) G__getstructoffset())->GetResVec((SoLKalTrackSite::EStType) G__int(libp->para[0]));
         pobj = new SoLKalMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_757_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SoLKalTrackSite*) G__getstructoffset())->GetHit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_757_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((SoLKalTrackSite*) G__getstructoffset())->GetPredInfoHit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_757_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SoLKalTrackSite::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_757_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLKalTrackSite::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_757_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SoLKalTrackSite::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_757_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SoLKalTrackSite::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_757_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalTrackSite*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_757_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLKalTrackSite::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_757_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SoLKalTrackSite::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_757_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLKalTrackSite::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_757_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SoLKalTrackSite::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SoLKalTrackSite G__TSoLKalTrackSite;
static int G__SoLIDTrackingDict_757_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SoLKalTrackSite*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SoLKalTrackSite*) (soff+(sizeof(SoLKalTrackSite)*i)))->~G__TSoLKalTrackSite();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SoLKalTrackSite*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SoLKalTrackSite*) (soff))->~G__TSoLKalTrackSite();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SoLKalTrackState */
static int G__SoLIDTrackingDict_758_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLKalTrackState* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLKalTrackState((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) SoLKalTrackState((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLKalTrackState((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) SoLKalTrackState((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SoLKalTrackState[n];
       } else {
         p = new((void*) gvp) SoLKalTrackState[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SoLKalTrackState;
       } else {
         p = new((void*) gvp) SoLKalTrackState;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackState));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_758_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLKalTrackState* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLKalTrackState(
*(SoLKalMatrix*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) SoLKalTrackState(
*(SoLKalMatrix*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLKalTrackState(*(SoLKalMatrix*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) SoLKalTrackState(*(SoLKalMatrix*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLKalTrackState(*(SoLKalMatrix*) libp->para[0].ref);
     } else {
       p = new((void*) gvp) SoLKalTrackState(*(SoLKalMatrix*) libp->para[0].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackState));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_758_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLKalTrackState* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLKalTrackState(
*(SoLKalMatrix*) libp->para[0].ref, *(SoLKalMatrix*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) SoLKalTrackState(
*(SoLKalMatrix*) libp->para[0].ref, *(SoLKalMatrix*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLKalTrackState(
*(SoLKalMatrix*) libp->para[0].ref, *(SoLKalMatrix*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) SoLKalTrackState(
*(SoLKalMatrix*) libp->para[0].ref, *(SoLKalMatrix*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLKalTrackState(*(SoLKalMatrix*) libp->para[0].ref, *(SoLKalMatrix*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) SoLKalTrackState(*(SoLKalMatrix*) libp->para[0].ref, *(SoLKalMatrix*) libp->para[1].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackState));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_758_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLKalTrackState* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLKalTrackState(
*(SoLKalMatrix*) libp->para[0].ref, *(SoLKalTrackSite*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) SoLKalTrackState(
*(SoLKalMatrix*) libp->para[0].ref, *(SoLKalTrackSite*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLKalTrackState(
*(SoLKalMatrix*) libp->para[0].ref, *(SoLKalTrackSite*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) SoLKalTrackState(
*(SoLKalMatrix*) libp->para[0].ref, *(SoLKalTrackSite*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLKalTrackState(*(SoLKalMatrix*) libp->para[0].ref, *(SoLKalTrackSite*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) SoLKalTrackState(*(SoLKalMatrix*) libp->para[0].ref, *(SoLKalTrackSite*) libp->para[1].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackState));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_758_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLKalTrackState* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLKalTrackState(
*(SoLKalMatrix*) libp->para[0].ref, *(SoLKalMatrix*) libp->para[1].ref
, *(SoLKalTrackSite*) libp->para[2].ref, (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) SoLKalTrackState(
*(SoLKalMatrix*) libp->para[0].ref, *(SoLKalMatrix*) libp->para[1].ref
, *(SoLKalTrackSite*) libp->para[2].ref, (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLKalTrackState(
*(SoLKalMatrix*) libp->para[0].ref, *(SoLKalMatrix*) libp->para[1].ref
, *(SoLKalTrackSite*) libp->para[2].ref, (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) SoLKalTrackState(
*(SoLKalMatrix*) libp->para[0].ref, *(SoLKalMatrix*) libp->para[1].ref
, *(SoLKalTrackSite*) libp->para[2].ref, (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLKalTrackState(
*(SoLKalMatrix*) libp->para[0].ref, *(SoLKalMatrix*) libp->para[1].ref
, *(SoLKalTrackSite*) libp->para[2].ref);
     } else {
       p = new((void*) gvp) SoLKalTrackState(
*(SoLKalMatrix*) libp->para[0].ref, *(SoLKalMatrix*) libp->para[1].ref
, *(SoLKalTrackSite*) libp->para[2].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackState));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_758_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) ((const SoLKalTrackState*) G__getstructoffset())->MoveTo(*(SoLKalTrackSite*) libp->para[0].ref, *(SoLKalMatrix*) libp->para[1].ref
, (SoLKalMatrix*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((const SoLKalTrackState*) G__getstructoffset())->MoveTo(*(SoLKalTrackSite*) libp->para[0].ref, *(SoLKalMatrix*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_758_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SoLKalTrackState& obj = ((const SoLKalTrackState*) G__getstructoffset())->MoveTo(*(SoLKalTrackSite*) libp->para[0].ref, *(SoLKalMatrix*) libp->para[1].ref
, *(SoLKalMatrix*) libp->para[2].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_758_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) ((const SoLKalTrackState*) G__getstructoffset())->MoveToZ((Double_t) G__double(libp->para[0]), *(SoLKalMatrix*) libp->para[1].ref
, (SoLKalMatrix*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((const SoLKalTrackState*) G__getstructoffset())->MoveToZ((Double_t) G__double(libp->para[0]), *(SoLKalMatrix*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_758_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SoLKalTrackState& obj = ((const SoLKalTrackState*) G__getstructoffset())->MoveToZ((Double_t) G__double(libp->para[0]), *(SoLKalMatrix*) libp->para[1].ref
, *(SoLKalMatrix*) libp->para[2].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_758_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalTrackState*) G__getstructoffset())->Propagate(*(SoLKalTrackSite*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_758_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((SoLKalTrackState*) G__getstructoffset())->PredictSVatZ(*(Double_t*) G__Doubleref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_758_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((SoLKalTrackState*) G__getstructoffset())->PredictSVatNextZ(*(Double_t*) G__Doubleref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_758_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalTrackState*) G__getstructoffset())->InitPredictSV();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_758_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalTrackState*) G__getstructoffset())->ClearAttemptSV();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_758_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SoLKalTrackState*) G__getstructoffset())->GetDimension());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_758_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SoLKalTrackSite& obj = ((const SoLKalTrackState*) G__getstructoffset())->GetSite();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_758_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SoLKalMatrix& obj = ((const SoLKalTrackState*) G__getstructoffset())->GetCovMat();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_758_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SoLKalMatrix& obj = ((const SoLKalTrackState*) G__getstructoffset())->GetProcNoiseMat();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_758_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      {
         const SoLKalMatrix& obj = ((const SoLKalTrackState*) G__getstructoffset())->GetPropMat((const Char_t*) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
      break;
   case 0:
      {
         const SoLKalMatrix& obj = ((const SoLKalTrackState*) G__getstructoffset())->GetPropMat();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_758_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Int_t& obj = ((const SoLKalTrackState*) G__getstructoffset())->GetType();
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_758_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((const SoLKalTrackState*) G__getstructoffset())->GetZ0();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_758_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalTrackState*) G__getstructoffset())->SetStateVec(*(SoLKalMatrix*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_758_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalTrackState*) G__getstructoffset())->SetCovMat(*(SoLKalMatrix*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_758_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalTrackState*) G__getstructoffset())->SetProcNoiseMat(*(SoLKalMatrix*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_758_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalTrackState*) G__getstructoffset())->SetSitePtr((SoLKalTrackSite*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_758_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalTrackState*) G__getstructoffset())->SetZ0((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_758_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const SoLKalTrackState*) G__getstructoffset())->CalcDir(*(TVector3*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_758_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SoLKalTrackState::CalcDir(*(TVector3*) libp->para[0].ref, *(SoLKalMatrix*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_758_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const SoLKalTrackState*) G__getstructoffset())->CalcMomVec(*(TVector3*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_758_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SoLKalTrackState::CalcMomVec(*(TVector3*) libp->para[0].ref, *(SoLKalMatrix*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_758_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SoLKalTrackState::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_758_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLKalTrackState::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_758_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SoLKalTrackState::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_758_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SoLKalTrackState::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_758_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalTrackState*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_758_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLKalTrackState::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_758_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SoLKalTrackState::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_758_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLKalTrackState::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_758_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SoLKalTrackState::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SoLIDTrackingDict_758_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SoLKalTrackState* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SoLKalTrackState(*(SoLKalTrackState*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackState));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SoLKalTrackState G__TSoLKalTrackState;
static int G__SoLIDTrackingDict_758_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SoLKalTrackState*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SoLKalTrackState*) (soff+(sizeof(SoLKalTrackState)*i)))->~G__TSoLKalTrackState();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SoLKalTrackState*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SoLKalTrackState*) (soff))->~G__TSoLKalTrackState();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SoLIDTrackingDict_758_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLKalTrackState* dest = (SoLKalTrackState*) G__getstructoffset();
   *dest = *(SoLKalTrackState*) libp->para[0].ref;
   const SoLKalTrackState& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SoLKalFieldStepper */
static int G__SoLIDTrackingDict_759_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SoLKalFieldStepper::GetInstance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_759_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalFieldStepper*) G__getstructoffset())->TurnOnMS();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_759_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalFieldStepper*) G__getstructoffset())->TurnOffMS();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_759_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalFieldStepper*) G__getstructoffset())->TurnOnDEDX();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_759_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalFieldStepper*) G__getstructoffset())->TurnOffDEDX();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_759_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const SoLKalFieldStepper*) G__getstructoffset())->IsMSOn());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_759_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const SoLKalFieldStepper*) G__getstructoffset())->IsDEDXOn());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_759_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLKalFieldStepper*) G__getstructoffset())->GetEnergyLoss());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_759_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLKalFieldStepper*) G__getstructoffset())->GetTrackLength());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_759_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLKalFieldStepper*) G__getstructoffset())->GetTrackPosAtZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_759_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalFieldStepper*) G__getstructoffset())->Transport(*(SoLKalTrackSite*) libp->para[0].ref, *(SoLKalTrackSite*) libp->para[1].ref
, *(SoLKalMatrix*) libp->para[2].ref, *(SoLKalMatrix*) libp->para[3].ref
, *(SoLKalMatrix*) libp->para[4].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_759_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalFieldStepper*) G__getstructoffset())->Transport(*(SoLKalTrackSite*) libp->para[0].ref, *(Double_t*) G__Doubleref(&libp->para[1])
, *(SoLKalMatrix*) libp->para[2].ref, *(SoLKalMatrix*) libp->para[3].ref
, *(SoLKalMatrix*) libp->para[4].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_759_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalFieldStepper*) G__getstructoffset())->Transport(*(SoLKalTrackState*) libp->para[0].ref, *(Double_t*) G__Doubleref(&libp->para[1])
, *(SoLKalMatrix*) libp->para[2].ref, *(SoLKalMatrix*) libp->para[3].ref
, *(SoLKalMatrix*) libp->para[4].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_759_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((SoLKalFieldStepper*) G__getstructoffset())->RKPropagation(*(SoLKalMatrix*) libp->para[0].ref, *(SoLKalMatrix*) libp->para[1].ref
, (Double_t) G__double(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_759_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalFieldStepper*) G__getstructoffset())->PropagationClassicalRK4(
*(TVector3*) libp->para[0].ref, *(TVector3*) libp->para[1].ref
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])
, *(Double_t*) G__Doubleref(&libp->para[4]), *(TVector3*) libp->para[5].ref
, *(TVector3*) libp->para[6].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_759_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalFieldStepper*) G__getstructoffset())->RightHandSide((Double_t*) G__int(libp->para[0]), (const Double_t) G__double(libp->para[1])
, (const Double_t) G__double(libp->para[2]), (Double_t*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_759_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((SoLKalFieldStepper*) G__getstructoffset())->Distance2Points(*(TVector3*) libp->para[0].ref, *(TVector3*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_759_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((SoLKalFieldStepper*) G__getstructoffset())->FindTargetPlaneIntersection(*(TVector3*) libp->para[0].ref, (Double_t) G__double(libp->para[1])
, *(TVector3*) libp->para[2].ref, *(TVector3*) libp->para[3].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_759_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalFieldStepper*) G__getstructoffset())->PropagateStraightLine(*(SoLKalMatrix*) libp->para[0].ref, *(SoLKalMatrix*) libp->para[1].ref
, *(Double_t*) G__Doubleref(&libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_759_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((SoLKalFieldStepper*) G__getstructoffset())->PropagateStraightLine(*(SoLKalMatrix*) libp->para[0].ref, *(SoLKalMatrix*) libp->para[1].ref
, *(Double_t*) G__Doubleref(&libp->para[2]), (const Double_t) G__double(libp->para[3])
, (Bool_t) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_759_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalFieldStepper*) G__getstructoffset())->InitTrack(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Bool_t*) G__Boolref(&libp->para[2]), (Bool_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_759_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalFieldStepper*) G__getstructoffset())->UseDefaultStep();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_759_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalFieldStepper*) G__getstructoffset())->UseFineStep();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_759_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letdouble(result7, 100, (double) ((SoLKalFieldStepper*) G__getstructoffset())->CalcMultScat(*(SoLKalMatrix*) libp->para[0].ref, *(SoLKalMatrix*) libp->para[1].ref
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (SoLMatType) G__int(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 100, (double) ((SoLKalFieldStepper*) G__getstructoffset())->CalcMultScat(*(SoLKalMatrix*) libp->para[0].ref, *(SoLKalMatrix*) libp->para[1].ref
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_759_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letdouble(result7, 100, (double) ((SoLKalFieldStepper*) G__getstructoffset())->CalcEnergyLoss(*(SoLKalMatrix*) libp->para[0].ref, *(SoLKalMatrix*) libp->para[1].ref
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (SoLMatType) G__int(libp->para[5])));
      break;
   case 5:
      G__letdouble(result7, 100, (double) ((SoLKalFieldStepper*) G__getstructoffset())->CalcEnergyLoss(*(SoLKalMatrix*) libp->para[0].ref, *(SoLKalMatrix*) libp->para[1].ref
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_759_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((SoLKalFieldStepper*) G__getstructoffset())->CalcRadLoss(*(SoLKalMatrix*) libp->para[0].ref, (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_759_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((SoLKalFieldStepper*) G__getstructoffset())->CalcDEDXIonLepton((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_759_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((SoLKalFieldStepper*) G__getstructoffset())->CalcDEDXBetheBloch((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SoLIDTrackingDict_759_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SoLKalFieldStepper* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SoLKalFieldStepper(*(SoLKalFieldStepper*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalFieldStepper));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SoLKalFieldStepper G__TSoLKalFieldStepper;
static int G__SoLIDTrackingDict_759_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SoLKalFieldStepper*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SoLKalFieldStepper*) (soff+(sizeof(SoLKalFieldStepper)*i)))->~G__TSoLKalFieldStepper();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SoLKalFieldStepper*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SoLKalFieldStepper*) (soff))->~G__TSoLKalFieldStepper();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SoLIDTrackingDict_759_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLKalFieldStepper* dest = (SoLKalFieldStepper*) G__getstructoffset();
   *dest = *(SoLKalFieldStepper*) libp->para[0].ref;
   const SoLKalFieldStepper& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SoLKalTrackFinder */
static int G__SoLIDTrackingDict_760_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLKalTrackFinder* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLKalTrackFinder[n];
     } else {
       p = new((void*) gvp) SoLKalTrackFinder[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLKalTrackFinder;
     } else {
       p = new((void*) gvp) SoLKalTrackFinder;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackFinder));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_760_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLKalTrackFinder* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SoLKalTrackFinder((bool) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) SoLKalTrackFinder((bool) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackFinder));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_760_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalTrackFinder*) G__getstructoffset())->SetGEMDetector(*((vector<SoLIDGEMTracker*>*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_760_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalTrackFinder*) G__getstructoffset())->SetECalDetector((SoLIDECal*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_760_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalTrackFinder*) G__getstructoffset())->ProcessHits((TClonesArray*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_760_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalTrackFinder*) G__getstructoffset())->SetCaloHit((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_760_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalTrackFinder*) G__getstructoffset())->SetBPM((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_760_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLKalTrackFinder*) G__getstructoffset())->CalCircle(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t*) G__int(libp->para[6]), (Double_t*) G__int(libp->para[7])
, (Double_t*) G__int(libp->para[8]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_760_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((SoLKalTrackFinder*) G__getstructoffset())->Clear((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((SoLKalTrackFinder*) G__getstructoffset())->Clear();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_760_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SoLKalTrackFinder*) G__getstructoffset())->GetNSeeds());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_760_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const SoLKalTrackFinder*) G__getstructoffset())->GetSeedEfficiency());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_760_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const SoLKalTrackFinder*) G__getstructoffset())->GetMCTrackEfficiency());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SoLIDTrackingDict_760_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SoLKalTrackFinder* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SoLKalTrackFinder(*(SoLKalTrackFinder*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackFinder));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SoLKalTrackFinder G__TSoLKalTrackFinder;
static int G__SoLIDTrackingDict_760_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SoLKalTrackFinder*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SoLKalTrackFinder*) (soff+(sizeof(SoLKalTrackFinder)*i)))->~G__TSoLKalTrackFinder();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SoLKalTrackFinder*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SoLKalTrackFinder*) (soff))->~G__TSoLKalTrackFinder();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SoLIDTrackingDict_760_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLKalTrackFinder* dest = (SoLKalTrackFinder*) G__getstructoffset();
   *dest = *(SoLKalTrackFinder*) libp->para[0].ref;
   const SoLKalTrackFinder& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SoLIDTrackerSystem */
static int G__SoLIDTrackingDict_786_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLIDTrackerSystem* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLIDTrackerSystem(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (THaApparatus*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) SoLIDTrackerSystem(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (THaApparatus*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLIDTrackerSystem((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) SoLIDTrackerSystem((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLIDTrackerSystem((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) SoLIDTrackerSystem((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDTrackerSystem));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_786_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLIDTrackerSystem* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLIDTrackerSystem[n];
     } else {
       p = new((void*) gvp) SoLIDTrackerSystem[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLIDTrackerSystem;
     } else {
       p = new((void*) gvp) SoLIDTrackerSystem;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDTrackerSystem));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_786_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const SoLIDTrackerSystem*) G__getstructoffset())->PrintDataBase((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_786_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrackerSystem*) G__getstructoffset())->GetPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_786_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const SoLIDTrackerSystem*) G__getstructoffset())->LoadDAQmodel((THaDetMap::Module*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_786_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SoLIDTrackerSystem*) G__getstructoffset())->LoadDAQresolution((THaDetMap::Module*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_786_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const SoLIDTrackerSystem*) G__getstructoffset())->GetDAQnchan((THaDetMap::Module*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_786_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLIDTrackerSystem*) G__getstructoffset())->SetSystemID((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_786_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SoLIDTrackerSystem*) G__getstructoffset())->GetSystemID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_786_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SoLIDTrackerSystem*) G__getstructoffset())->GetNTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_786_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SoLIDTrackerSystem*) G__getstructoffset())->GetNSeeds());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_786_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const SoLIDTrackerSystem*) G__getstructoffset())->GetSeedEfficiency());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_786_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const SoLIDTrackerSystem*) G__getstructoffset())->GetMCTrackEfficiency());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_786_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SoLIDTrackerSystem*) G__getstructoffset())->GetTracker((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_786_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SoLIDTrackerSystem::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_786_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLIDTrackerSystem::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_786_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SoLIDTrackerSystem::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_786_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SoLIDTrackerSystem::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_786_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLIDTrackerSystem*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_786_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLIDTrackerSystem::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_786_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SoLIDTrackerSystem::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_786_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLIDTrackerSystem::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_786_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SoLIDTrackerSystem::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SoLIDTrackerSystem G__TSoLIDTrackerSystem;
static int G__SoLIDTrackingDict_786_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SoLIDTrackerSystem*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SoLIDTrackerSystem*) (soff+(sizeof(SoLIDTrackerSystem)*i)))->~G__TSoLIDTrackerSystem();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SoLIDTrackerSystem*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SoLIDTrackerSystem*) (soff))->~G__TSoLIDTrackerSystem();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SolTrackInfo */
static int G__SoLIDTrackingDict_788_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SolTrackInfo* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SolTrackInfo[n];
     } else {
       p = new((void*) gvp) SolTrackInfo[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SolTrackInfo;
     } else {
       p = new((void*) gvp) SolTrackInfo;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SolTrackInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_788_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SolTrackInfo* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SolTrackInfo(
(Int_t) G__int(libp->para[0]), *(TVector3*) libp->para[1].ref
, *(TVector3*) libp->para[2].ref, (Double_t) G__double(libp->para[3]));
   } else {
     p = new((void*) gvp) SolTrackInfo(
(Int_t) G__int(libp->para[0]), *(TVector3*) libp->para[1].ref
, *(TVector3*) libp->para[2].ref, (Double_t) G__double(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SolTrackInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_788_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SolTrackInfo*) G__getstructoffset())->GetMCHitBits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_788_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SolTrackInfo*) G__getstructoffset())->GetNMCHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_788_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SolTrackInfo*) G__getstructoffset())->SetMCHitBits((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_788_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SolTrackInfo*) G__getstructoffset())->SetNMCHits((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_788_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SolTrackInfo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_788_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SolTrackInfo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_788_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SolTrackInfo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_788_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SolTrackInfo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_788_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SolTrackInfo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_788_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SolTrackInfo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_788_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SolTrackInfo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_788_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SolTrackInfo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_788_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SolTrackInfo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SoLIDTrackingDict_788_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SolTrackInfo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SolTrackInfo(*(SolTrackInfo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SolTrackInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SolTrackInfo G__TSolTrackInfo;
static int G__SoLIDTrackingDict_788_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SolTrackInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SolTrackInfo*) (soff+(sizeof(SolTrackInfo)*i)))->~G__TSolTrackInfo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SolTrackInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SolTrackInfo*) (soff))->~G__TSolTrackInfo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SoLIDTrackingDict_788_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SolTrackInfo* dest = (SolTrackInfo*) G__getstructoffset();
   *dest = *(SolTrackInfo*) libp->para[0].ref;
   const SolTrackInfo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SoLIDSpectrometer */
static int G__SoLIDTrackingDict_789_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SoLIDSpectrometer* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLIDSpectrometer(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (UInt_t) G__int(libp->para[4]), (UInt_t) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) SoLIDSpectrometer(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (UInt_t) G__int(libp->para[4]), (UInt_t) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLIDSpectrometer(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (UInt_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) SoLIDSpectrometer(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (UInt_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLIDSpectrometer(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) SoLIDSpectrometer(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLIDSpectrometer(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) SoLIDSpectrometer(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SoLIDSpectrometer((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) SoLIDSpectrometer((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDSpectrometer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_789_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const SoLIDSpectrometer*) G__getstructoffset())->PrintDataBase((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_789_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const SoLIDSpectrometer*) G__getstructoffset())->IsSetup());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_789_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((SoLIDSpectrometer*) G__getstructoffset())->GetTrackInfo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_789_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SoLIDSpectrometer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_789_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLIDSpectrometer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_789_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SoLIDSpectrometer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_789_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SoLIDSpectrometer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_789_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SoLIDSpectrometer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_789_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLIDSpectrometer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_789_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SoLIDSpectrometer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_789_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SoLIDSpectrometer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SoLIDTrackingDict_789_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SoLIDSpectrometer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SoLIDSpectrometer G__TSoLIDSpectrometer;
static int G__SoLIDTrackingDict_789_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SoLIDSpectrometer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SoLIDSpectrometer*) (soff+(sizeof(SoLIDSpectrometer)*i)))->~G__TSoLIDSpectrometer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SoLIDSpectrometer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SoLIDSpectrometer*) (soff))->~G__TSoLIDSpectrometer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* SoLIDGEMReadOut */

/* Hit */

/* SoLIDRawHit */

/* SoLIDMCRawHit */

/* SoLIDGEMHit */

/* SoLIDMCGEMHit */

/* SoLIDGEMTracker */

/* SoLIDGEMChamber */

/* SoLIDECal */

/* SoLIDTrack */

/* SoLIDMCTrack */

/* ProgressiveTracking */

/* SoLIDFieldMap */

/* SoLKalMatrix */

/* SoLKalTrackSystem */

/* SoLKalTrackSite */

/* SoLKalTrackState */

/* SoLKalFieldStepper */

/* SoLKalTrackFinder */

/* SoLIDTrackerSystem */

/* SolTrackInfo */

/* SoLIDSpectrometer */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncSoLIDTrackingDict {
 public:
  G__Sizep2memfuncSoLIDTrackingDict(): p(&G__Sizep2memfuncSoLIDTrackingDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncSoLIDTrackingDict::*p)();
};

size_t G__get_sizep2memfuncSoLIDTrackingDict()
{
  G__Sizep2memfuncSoLIDTrackingDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceSoLIDTrackingDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMReadOut))) {
     SoLIDGEMReadOut *G__Lderived;
     G__Lderived=(SoLIDGEMReadOut*)0x1000;
     {
       THaSubDetector *G__Lpbase=(THaSubDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMReadOut),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_THaSubDetector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       THaDetectorBase *G__Lpbase=(THaDetectorBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMReadOut),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_THaDetectorBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaAnalysisObject *G__Lpbase=(THaAnalysisObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMReadOut),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_THaAnalysisObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMReadOut),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMReadOut),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_Hit))) {
     Hit *G__Lderived;
     G__Lderived=(Hit*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_Hit),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDRawHit))) {
     SoLIDRawHit *G__Lderived;
     G__Lderived=(SoLIDRawHit*)0x1000;
     {
       Hit *G__Lpbase=(Hit*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDRawHit),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_Hit),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDRawHit),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDMCRawHit))) {
     SoLIDMCRawHit *G__Lderived;
     G__Lderived=(SoLIDMCRawHit*)0x1000;
     {
       SoLIDRawHit *G__Lpbase=(SoLIDRawHit*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDMCRawHit),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDRawHit),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       Hit *G__Lpbase=(Hit*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDMCRawHit),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_Hit),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDMCRawHit),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       Podd::MCHitInfo *G__Lpbase=(Podd::MCHitInfo*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDMCRawHit),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_PoddcLcLMCHitInfo),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMHit))) {
     SoLIDGEMHit *G__Lderived;
     G__Lderived=(SoLIDGEMHit*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMHit),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDMCGEMHit))) {
     SoLIDMCGEMHit *G__Lderived;
     G__Lderived=(SoLIDMCGEMHit*)0x1000;
     {
       SoLIDGEMHit *G__Lpbase=(SoLIDGEMHit*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDMCGEMHit),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMHit),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDMCGEMHit),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMTracker))) {
     SoLIDGEMTracker *G__Lderived;
     G__Lderived=(SoLIDGEMTracker*)0x1000;
     {
       THaSubDetector *G__Lpbase=(THaSubDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMTracker),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_THaSubDetector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       THaDetectorBase *G__Lpbase=(THaDetectorBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMTracker),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_THaDetectorBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaAnalysisObject *G__Lpbase=(THaAnalysisObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMTracker),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_THaAnalysisObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMTracker),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMTracker),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMChamber))) {
     SoLIDGEMChamber *G__Lderived;
     G__Lderived=(SoLIDGEMChamber*)0x1000;
     {
       THaSubDetector *G__Lpbase=(THaSubDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMChamber),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_THaSubDetector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       THaDetectorBase *G__Lpbase=(THaDetectorBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMChamber),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_THaDetectorBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaAnalysisObject *G__Lpbase=(THaAnalysisObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMChamber),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_THaAnalysisObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMChamber),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMChamber),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDECal))) {
     SoLIDECal *G__Lderived;
     G__Lderived=(SoLIDECal*)0x1000;
     {
       THaSubDetector *G__Lpbase=(THaSubDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDECal),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_THaSubDetector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       THaDetectorBase *G__Lpbase=(THaDetectorBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDECal),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_THaDetectorBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaAnalysisObject *G__Lpbase=(THaAnalysisObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDECal),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_THaAnalysisObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDECal),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDECal),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDTrack))) {
     SoLIDTrack *G__Lderived;
     G__Lderived=(SoLIDTrack*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDTrack),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDMCTrack))) {
     SoLIDMCTrack *G__Lderived;
     G__Lderived=(SoLIDMCTrack*)0x1000;
     {
       SoLIDTrack *G__Lpbase=(SoLIDTrack*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDMCTrack),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDTrack),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDMCTrack),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalMatrix))) {
     SoLKalMatrix *G__Lderived;
     G__Lderived=(SoLKalMatrix*)0x1000;
     {
       TMatrixT<double> *G__Lpbase=(TMatrixT<double>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalMatrix),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TMatrixTlEdoublegR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TMatrixTBase<double> *G__Lpbase=(TMatrixTBase<double>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalMatrix),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TMatrixTBaselEdoublegR),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalMatrix),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackSystem))) {
     SoLKalTrackSystem *G__Lderived;
     G__Lderived=(SoLKalTrackSystem*)0x1000;
     {
       TObjArray *G__Lpbase=(TObjArray*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackSystem),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TObjArray),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TSeqCollection *G__Lpbase=(TSeqCollection*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackSystem),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TSeqCollection),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TCollection *G__Lpbase=(TCollection*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackSystem),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TCollection),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackSystem),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackSite))) {
     SoLKalTrackSite *G__Lderived;
     G__Lderived=(SoLKalTrackSite*)0x1000;
     {
       TObjArray *G__Lpbase=(TObjArray*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackSite),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TObjArray),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TSeqCollection *G__Lpbase=(TSeqCollection*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackSite),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TSeqCollection),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TCollection *G__Lpbase=(TCollection*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackSite),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TCollection),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackSite),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackState))) {
     SoLKalTrackState *G__Lderived;
     G__Lderived=(SoLKalTrackState*)0x1000;
     {
       SoLKalMatrix *G__Lpbase=(SoLKalMatrix*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackState),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalMatrix),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TMatrixT<double> *G__Lpbase=(TMatrixT<double>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackState),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TMatrixTlEdoublegR),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TMatrixTBase<double> *G__Lpbase=(TMatrixTBase<double>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackState),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TMatrixTBaselEdoublegR),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackState),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDTrackerSystem))) {
     SoLIDTrackerSystem *G__Lderived;
     G__Lderived=(SoLIDTrackerSystem*)0x1000;
     {
       THaTrackingDetector *G__Lpbase=(THaTrackingDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDTrackerSystem),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_THaTrackingDetector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       THaSpectrometerDetector *G__Lpbase=(THaSpectrometerDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDTrackerSystem),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_THaSpectrometerDetector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaDetector *G__Lpbase=(THaDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDTrackerSystem),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_THaDetector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaDetectorBase *G__Lpbase=(THaDetectorBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDTrackerSystem),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_THaDetectorBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaAnalysisObject *G__Lpbase=(THaAnalysisObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDTrackerSystem),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_THaAnalysisObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDTrackerSystem),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDTrackerSystem),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SolTrackInfo))) {
     SolTrackInfo *G__Lderived;
     G__Lderived=(SolTrackInfo*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SolTrackInfo),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDSpectrometer))) {
     SoLIDSpectrometer *G__Lderived;
     G__Lderived=(SoLIDSpectrometer*)0x1000;
     {
       THaSpectrometer *G__Lpbase=(THaSpectrometer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDSpectrometer),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_THaSpectrometer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       THaApparatus *G__Lpbase=(THaApparatus*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDSpectrometer),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_THaApparatus),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaAnalysisObject *G__Lpbase=(THaAnalysisObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDSpectrometer),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_THaAnalysisObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDSpectrometer),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDSpectrometer),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaTrackingModule *G__Lpbase=(THaTrackingModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDSpectrometer),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_THaTrackingModule),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       THaVertexModule *G__Lpbase=(THaVertexModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDSpectrometer),G__get_linked_tagnum(&G__SoLIDTrackingDictLN_THaVertexModule),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableSoLIDTrackingDict() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::string>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Int_t>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSym<Double_t>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TMatrixTSymlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Double_t>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TMatrixTRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Double_t>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TMatrixTColumn_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Double_t>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TMatrixTDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Double_t>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TMatrixTFlat_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Double_t>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TMatrixTSub_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Double_t>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TMatrixTSparseRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Double_t>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TMatrixTSparseDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Double_t>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TMatrixTRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Double_t>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TMatrixTColumnlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Double_t>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TMatrixTDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Double_t>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TMatrixTFlatlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Double_t>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TMatrixTSublEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Double_t>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TMatrixTSparseRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Double_t>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TMatrixTSparseDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Double_t>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TElementActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Double_t>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TElementPosActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Vint_t",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlEintcOallocatorlEintgRsPgR),0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMReadOut));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Float_t>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Vflt_t",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMReadOut));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Bool_t>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlEboolcOallocatorlEboolgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Vbool_t",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlEboolcOallocatorlEboolgRsPgR),0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMReadOut));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<SoLIDGEMReadOut*>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlESoLIDGEMReadOutmUcOallocatorlESoLIDGEMReadOutmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlESoLIDGEMReadOutmUcOallocatorlESoLIDGEMReadOutmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlESoLIDGEMReadOutmUcOallocatorlESoLIDGEMReadOutmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlESoLIDGEMReadOutmUcOallocatorlESoLIDGEMReadOutmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlESoLIDGEMReadOutmUcOallocatorlESoLIDGEMReadOutmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<SoLIDGEMChamber*>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlESoLIDGEMChambermUcOallocatorlESoLIDGEMChambermUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlESoLIDGEMChambermUcOallocatorlESoLIDGEMChambermUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlESoLIDGEMChambermUcOallocatorlESoLIDGEMChambermUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlESoLIDGEMChambermUcOallocatorlESoLIDGEMChambermUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlESoLIDGEMChambermUcOallocatorlESoLIDGEMChambermUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,vector<Float_t> >",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_maplEintcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,vector<float,allocator<float> > >",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_maplEintcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,vector<float,allocator<float> >,less<int> >",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_maplEintcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<SoLIDGEMHit*>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlESoLIDGEMHitmUcOallocatorlESoLIDGEMHitmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlESoLIDGEMHitmUcOallocatorlESoLIDGEMHitmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlESoLIDGEMHitmUcOallocatorlESoLIDGEMHitmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlESoLIDGEMHitmUcOallocatorlESoLIDGEMHitmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlESoLIDGEMHitmUcOallocatorlESoLIDGEMHitmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TSeqCollection*>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlETSeqCollectionmUcOallocatorlETSeqCollectionmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlETSeqCollectionmUcOallocatorlETSeqCollectionmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlETSeqCollectionmUcOallocatorlETSeqCollectionmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlETSeqCollectionmUcOallocatorlETSeqCollectionmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlETSeqCollectionmUcOallocatorlETSeqCollectionmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,vector<TSeqCollection*> >",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_maplEintcOvectorlETSeqCollectionmUcOallocatorlETSeqCollectionmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlETSeqCollectionmUcOallocatorlETSeqCollectionmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,vector<TSeqCollection*,allocator<TSeqCollection*> > >",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_maplEintcOvectorlETSeqCollectionmUcOallocatorlETSeqCollectionmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlETSeqCollectionmUcOallocatorlETSeqCollectionmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,vector<TSeqCollection*,allocator<TSeqCollection*> >,less<int> >",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_maplEintcOvectorlETSeqCollectionmUcOallocatorlETSeqCollectionmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlETSeqCollectionmUcOallocatorlETSeqCollectionmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<SoLIDCaloHit>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlESoLIDCaloHitcOallocatorlESoLIDCaloHitgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlESoLIDCaloHitcOallocatorlESoLIDCaloHitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlESoLIDCaloHitcOallocatorlESoLIDCaloHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlESoLIDCaloHitcOallocatorlESoLIDCaloHitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlESoLIDCaloHitcOallocatorlESoLIDCaloHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Double_t>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TMatrixTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixD",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TMatrixTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<SoLIDGEMTracker*>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlESoLIDGEMTrackermUcOallocatorlESoLIDGEMTrackermUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlESoLIDGEMTrackermUcOallocatorlESoLIDGEMTrackermUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlESoLIDGEMTrackermUcOallocatorlESoLIDGEMTrackermUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlESoLIDGEMTrackermUcOallocatorlESoLIDGEMTrackermUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlESoLIDGEMTrackermUcOallocatorlESoLIDGEMTrackermUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,vector<SoLIDGEMHit*> >",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_maplEintcOvectorlESoLIDGEMHitmUcOallocatorlESoLIDGEMHitmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESoLIDGEMHitmUcOallocatorlESoLIDGEMHitmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,vector<SoLIDGEMHit*,allocator<SoLIDGEMHit*> > >",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_maplEintcOvectorlESoLIDGEMHitmUcOallocatorlESoLIDGEMHitmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESoLIDGEMHitmUcOallocatorlESoLIDGEMHitmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,vector<SoLIDGEMHit*,allocator<SoLIDGEMHit*> >,less<int> >",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_maplEintcOvectorlESoLIDGEMHitmUcOallocatorlESoLIDGEMHitmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESoLIDGEMHitmUcOallocatorlESoLIDGEMHitmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<DoubletSeed>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlESoLKalTrackFindercLcLDoubletSeedcOallocatorlESoLKalTrackFindercLcLDoubletSeedgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlESoLKalTrackFindercLcLDoubletSeedcOallocatorlESoLKalTrackFindercLcLDoubletSeedgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlESoLKalTrackFindercLcLDoubletSeedcOallocatorlESoLKalTrackFindercLcLDoubletSeedgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlESoLKalTrackFindercLcLDoubletSeedcOallocatorlESoLKalTrackFindercLcLDoubletSeedgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlESoLKalTrackFindercLcLDoubletSeedcOallocatorlESoLKalTrackFindercLcLDoubletSeedgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<SoLKalTrackFinder::DoubletSeed>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlESoLKalTrackFindercLcLDoubletSeedcOallocatorlESoLKalTrackFindercLcLDoubletSeedgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<SeedType,vector<DoubletSeed> >",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_maplESeedTypecOvectorlESoLKalTrackFindercLcLDoubletSeedcOallocatorlESoLKalTrackFindercLcLDoubletSeedgRsPgRcOlesslESeedTypegRcOallocatorlEpairlEconstsPSeedTypecOvectorlESoLKalTrackFindercLcLDoubletSeedcOallocatorlESoLKalTrackFindercLcLDoubletSeedgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<SeedType,vector<SoLKalTrackFinder::DoubletSeed,allocator<SoLKalTrackFinder::DoubletSeed> > >",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_maplESeedTypecOvectorlESoLKalTrackFindercLcLDoubletSeedcOallocatorlESoLKalTrackFindercLcLDoubletSeedgRsPgRcOlesslESeedTypegRcOallocatorlEpairlEconstsPSeedTypecOvectorlESoLKalTrackFindercLcLDoubletSeedcOallocatorlESoLKalTrackFindercLcLDoubletSeedgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<SeedType,vector<SoLKalTrackFinder::DoubletSeed,allocator<SoLKalTrackFinder::DoubletSeed> >,less<SeedType> >",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_maplESeedTypecOvectorlESoLKalTrackFindercLcLDoubletSeedcOallocatorlESoLKalTrackFindercLcLDoubletSeedgRsPgRcOlesslESeedTypegRcOallocatorlEpairlEconstsPSeedTypecOvectorlESoLKalTrackFindercLcLDoubletSeedcOallocatorlESoLKalTrackFindercLcLDoubletSeedgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<SoLIDTrackerSystem*>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlESoLIDTrackerSystemmUcOallocatorlESoLIDTrackerSystemmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlESoLIDTrackerSystemmUcOallocatorlESoLIDTrackerSystemmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlESoLIDTrackerSystemmUcOallocatorlESoLIDTrackerSystemmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlESoLIDTrackerSystemmUcOallocatorlESoLIDTrackerSystemmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlESoLIDTrackerSystemmUcOallocatorlESoLIDTrackerSystemmUgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* SoLIDGEMReadOut */
static void G__setup_memvarSoLIDGEMReadOut(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMReadOut));
   { SoLIDGEMReadOut *p; p=(SoLIDGEMReadOut*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fReadOutID=",0,"0 means u and 1 means v   ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fStripAngle=",0,"strip angle of the readout strip with respect");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fSinStripAngle=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fCosStripAngle=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fResolution=",0,"assumed resolution of the reconstructed hit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMaxClusterSize=",0,"maximum cluster size we allow before splitting");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fADCMin=",0,"ADC cut");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fSplitFrac=",0,"used in clustering for splitting a cluster");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMaxHits=",0,"Maximum number of hits we allow in reconstruction");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMaxTimeSample=",0,"The maximum number of time sample from APV25");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fADCSigma=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fDoNoise=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fCheckPulseShape=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fDoHisto=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fStripPitch=",0,"Pitch of the readout strips");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fDz=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fDPhi=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fStartPos=",0,"Starting position of the readout strips");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNStrip=",0,"total number of strips on this readout");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("Vflt_t"),-1,2,"fPed=",0,"pedestal for each channal");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fDeconMode=",0,"1 if the APV25 chip is in the deconvolution mode");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fADCraw=",0,"[fNelem] Integral of raw ADC samples");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fADC=",0,"[fNelem] Integral of deconvoluted ADC samples");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fHitTime=",0,"[fNelem] Leading-edge time of deconv signal (ns)");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fADCcor=",0,"[fNelem] fADC corrected for pedestal & noise");
   G__memvar_setup((void*)0,66,0,0,-1,G__defined_typename("Byte_t"),-1,2,"fGoodHit=",0,"[fNelem] Strip data passed pulse shape test");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fDNoise=",0,"Event-by-event noise (avg below fMinAmpl)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("Vint_t"),-1,2,"fSigStrips=",0,"Ordered strip numbers with signal (adccor > minampl)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlEboolcOallocatorlEboolgRsPgR),G__defined_typename("Vbool_t"),-1,2,"fStripsSeen=",0,"Flags for duplicate strip number detection");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fNRawStrips=",0,"Statistics: strips with any data");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fNHitStrips=",0,"Statistics: strips > 0");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fHitOcc=",0,"Statistics: hit occupancy fNhitStrips/fNelem");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fOccupancy=",0,"Statistics: occupancy GetNsigStrips/fNelem");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fCoorOffset=",0,"The offset needed to transport the hit coordinate");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClonesArray),-1,-1,2,"fHits=",0,"Cluster data (groups of hits)");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMReadOutcLcLEChanMapType),-1,-2,2,"kOneToOne=0LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMReadOutcLcLEChanMapType),-1,-2,2,"kReverse=1LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMReadOutcLcLEChanMapType),-1,-2,2,"kGassiplexAdapter1=2LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMReadOutcLcLEChanMapType),-1,-2,2,"kGassiplexAdapter2=3LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMReadOutcLcLEChanMapType),-1,-2,2,"kTable=4LL",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMReadOutcLcLEChanMapType),-1,-1,2,"fMapType=",0,"Type of hardware channel mapping to use");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("Vint_t"),-1,2,"fChanMap=",0,"[fNelem] Optional hardware channel mapping");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TH1),-1,-1,2,"fADCMap=",0,"Histogram of strip numbers weighted by ADC");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("Vint_t"),-1,2,"fMCHitList=",0,"Elements in fMCHitInfo with data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_PoddcLcLMCHitInfo),-1,-1,2,"fMCHitInfo=",0,"[fNStrip] MC truth data for fHits");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TH1),-1,-1,2,"fHitMap=",0,"Histogram of active sensor numbers");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Hit */
static void G__setup_memvarHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_Hit));
   { Hit *p; p=(Hit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPos=",0,"Hit position along plane coordinate axis (m)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fResolution=",0,"Resolution of fPos (sigma, m)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMReadOut),-1,-1,2,"fReadOut=",0,"! Pointer to the readout obj where this hit occurred");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SoLIDRawHit */
static void G__setup_memvarSoLIDRawHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDRawHit));
   { SoLIDRawHit *p; p=(SoLIDRawHit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fADCsum=",0,"Sum of ADC values of active strips");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fSize=",0,"Number of active strips");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fType=",0,"Result code of cluster analysis");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SoLIDMCRawHit */
static void G__setup_memvarSoLIDMCRawHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDMCRawHit));
   { SoLIDMCRawHit *p; p=(SoLIDMCRawHit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SoLIDGEMHit */
static void G__setup_memvarSoLIDGEMHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMHit));
   { SoLIDGEMHit *p; p=(SoLIDGEMHit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fIsUsed=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fChamberID=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fTrackerID=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fR=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPhi=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_Hit),-1,-1,2,"fUHit=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_Hit),-1,-1,2,"fVHit=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPredictX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPredictY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPredicteX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPredicteY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SoLIDMCGEMHit */
static void G__setup_memvarSoLIDMCGEMHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDMCGEMHit));
   { SoLIDMCGEMHit *p; p=(SoLIDMCGEMHit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SoLIDGEMTracker */
static void G__setup_memvarSoLIDGEMTracker(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMTracker));
   { SoLIDGEMTracker *p; p=(SoLIDGEMTracker*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNChamber=",0,"number of GEM sectors/chambers this tracker has");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTrackerZ=",0,"the z position of a tracker, indivial chamber may");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fDoCombineHits=",0,"whether combine all the hits from Chamber for ouput");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fTrackerID=",0,"GEM ID, 0~5 for SIDIS, 0~4 for PVDIS");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClonesArray),-1,-1,2,"fHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlESoLIDGEMChambermUcOallocatorlESoLIDGEMChambermUgRsPgR),G__defined_typename("vector<SoLIDGEMChamber*>"),-1,2,"fGEMChamber=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SoLIDGEMChamber */
static void G__setup_memvarSoLIDGEMChamber(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMChamber));
   { SoLIDGEMChamber *p; p=(SoLIDGEMChamber*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fChamberID=",0,"sector is the same as chamber, but chamber sounds nicer IMO  ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fParentTrackerID=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNReadOut=",0,"number of readout plane for in this chamber");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fDo3DAmCorr=",0,"whether we do charge amplitude correlation cut");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"f3DAmCorrCut=",0,"cut on the charge amplitude correlation ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRMin=",0,"inner radius of the chamber");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRMax=",0,"outer radius of the chamber");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fDz=",0,"shift in z with respect to the parent tracker");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPhi=",0,"the phi angle of this chamber with respect to the phi angle of");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPhiCover=",0,"the phi coverage of this chamber with respect to the reference");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPhiOffset=",0,"phi offset in addition to fPhi of this chamber");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPhiInLab=",0,"the total phi angle with respect to the lab system");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TVector2),-1,-1,2,"fReference=",0,"the reference point of this chamber, see comment in ReadGeometry ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPhiMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPhiMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTrackerZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClonesArray),-1,-1,2,"fHits=",0,"collection for a pair of raw hits, checked by amplitude matching, ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fUOccupancy=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fVOccupancy=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fUHitOccupancy=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fVHitOccupancy=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlESoLIDGEMReadOutmUcOallocatorlESoLIDGEMReadOutmUgRsPgR),G__defined_typename("vector<SoLIDGEMReadOut*>"),-1,2,"fGEMReadOut=",0,"The readout plane that the chamber has, usually 2 ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SoLIDECal */
static void G__setup_memvarSoLIDECal(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDECal));
   { SoLIDECal *p; p=(SoLIDECal*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fIsLAECTriggered=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fIsFAECTriggered=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fNLAECHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fNFAECHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fLAECZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fFAECZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fLAECEdpCut=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fFAECEdpCut=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPosReso=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fEReso=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_maplEintcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgR),G__defined_typename("map<Int_t,vector<Float_t> >"),-1,2,"fLAECHitMap=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_maplEintcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgR),G__defined_typename("map<Int_t,vector<Float_t> >"),-1,2,"fFAECHitMap=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SoLIDTrack */
static void G__setup_memvarSoLIDTrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDTrack));
   { SoLIDTrack *p; p=(SoLIDTrack*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fCoarseChi2=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fFineChi2=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fIsCoarseFitted=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fIsFineFitted=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fStatus=",0,"status of the track, whether it is still a good track");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fCharge=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMass=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fPID=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fAngleFlag=",0,"0 for SIDIS large angle, 1 for SIDIS forwardangle, 0 for PVDIS");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMomMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMomMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fThetaMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fThetaMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMomentum=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fVertexZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTheta=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPhi=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNDF=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlESoLIDGEMHitmUcOallocatorlESoLIDGEMHitmUgRsPgR),G__defined_typename("vector<SoLIDGEMHit*>"),-1,2,"fHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SoLIDMCTrack */
static void G__setup_memvarSoLIDMCTrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDMCTrack));
   { SoLIDMCTrack *p; p=(SoLIDMCTrack*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ProgressiveTracking */
static void G__setup_memvarProgressiveTracking(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_ProgressiveTracking));
   { ProgressiveTracking *p; p=(ProgressiveTracking*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fDoMC=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNTracker=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNElectron=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNHadron=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNTrack=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsIterBackward=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fHasCaloHit=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClonesArray),-1,-1,4,"fCoarseTracks=",0,"internal track array of progressive tracking ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNGoodHits[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClonesArray),-1,-1,4,"fGoodHits[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlESoLIDCaloHitcOallocatorlESoLIDCaloHitgRsPgR),G__defined_typename("vector<SoLIDCaloHit>"),-1,4,"fCaloHits=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SoLIDFieldMap */
static void G__setup_memvarSoLIDFieldMap(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDFieldMap));
   { SoLIDFieldMap *p; p=(SoLIDFieldMap*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDFieldMap),-1,-2,2,"fInstance=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"Bz[1201][501]=",0,"hard coded for now, array to store SoLID B field");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"Br[1201][501]=",0,"hard coded for now, array to store SoLID B field");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TVector3),-1,-1,2,"fField=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SoLKalMatrix */
static void G__setup_memvarSoLKalMatrix(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalMatrix));
   { SoLKalMatrix *p; p=(SoLKalMatrix*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SoLKalTrackSystem */
static void G__setup_memvarSoLKalTrackSystem(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackSystem));
   { SoLKalTrackSystem *p; p=(SoLKalTrackSystem*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->fDeltaECX)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fDeltaECX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fDeltaECY)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fDeltaECY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fDeltaECE)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fDeltaECE=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackSite),-1,-1,4,"fCurSitePtr=",0,"pointer to current site");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fChi2=",0,"current total chi2");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackSystem),-1,-2,4,"fgCurInstancePtr=",0,"! currently active instance");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMass=",0,"mass [GeV]");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fCharge=",0,"in unit of proton charge");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsElectron=",0,"kTRUE if the particle is a lepton, otherwise kFALSE");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsGood=",0,"for track fitting monitering ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fAngleFlag=",0,"0 for the large angle 1 for the forward angle");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNMissingHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNDF=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMomentum=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTheta=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPhi=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fVertexZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SeedType),-1,-1,4,"fSeedType=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SoLKalTrackSite */
static void G__setup_memvarSoLKalTrackSite(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackSite));
   { SoLKalTrackSite *p; p=(SoLKalTrackSite*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackSitecLcLEStType),-1,-2,1,G__FastAllocString(2048).Format("kPredicted=%lldLL",(long long)SoLKalTrackSite::kPredicted).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackSitecLcLEStType),-1,-2,1,G__FastAllocString(2048).Format("kFiltered=%lldLL",(long long)SoLKalTrackSite::kFiltered).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackSitecLcLEStType),-1,-2,1,G__FastAllocString(2048).Format("kSmoothed=%lldLL",(long long)SoLKalTrackSite::kSmoothed).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackSitecLcLEStType),-1,-2,1,G__FastAllocString(2048).Format("kInvFiltered=%lldLL",(long long)SoLKalTrackSite::kInvFiltered).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackState),-1,-1,4,"fCurStatePtr=",0,"pointer to current best state");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalMatrix),-1,-1,4,"fM=",0,"measurement vector: M(m,1)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalMatrix),-1,-1,4,"fV=",0,"noise matrix: M(m,m)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalMatrix),-1,-1,4,"fH=",0,"H = (@h/@a): M(m,p)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalMatrix),-1,-1,4,"fHt=",0,"H^t = (@h/@a)^t: M(p,m)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalMatrix),-1,-1,4,"fResVec=",0,"m - h(a): M(m,1)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalMatrix),-1,-1,4,"fR=",0,"covariance matrix: M(m,m)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDeltaChi2=",0,"chi2 increment");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMaxDeltaChi2=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMHit),-1,-1,4,"fGEMHit=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fZ0=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SoLKalTrackState */
static void G__setup_memvarSoLKalTrackState(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackState));
   { SoLKalTrackState *p; p=(SoLKalTrackState*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fType=",0,"(0,1,2,3) = (uninited,predicted,filtered,smoothed)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackSite),-1,-1,4,"fSitePtr=",0,"pointer to corresponding KalSite");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalMatrix),-1,-1,4,"fF=",0,"propagator matrix to next site (F = @f/@a)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalMatrix),-1,-1,4,"fFt=",0,"transposed propagator matrix (F^T = (@f/@a)^T)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalMatrix),-1,-1,4,"fQ=",0,"process noise from this to the next sites");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalMatrix),-1,-1,4,"fC=",0,"covariance matrix");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackState),-1,-1,4,"fAttemptState=",0,"a pointer to the next predicted state vector");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fZ0=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SoLKalFieldStepper */
static void G__setup_memvarSoLKalFieldStepper(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalFieldStepper));
   { SoLKalFieldStepper *p; p=(SoLKalFieldStepper*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDFieldMap),-1,-1,2,"fFieldMap=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalFieldStepper),-1,-2,2,"fSoLKalFieldStepper=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fIsMSOn=",0,"! switch for multiple scattering");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fIsDEDXOn=",0,"! switch for energy loss");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fIsBackward=",0,"kTRUE: backward propagation; kFALSE: forward propagation");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"trackPosAtZ=",0,"z position of the track");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"minPrecision=",0,"minimum precision for the Runge-Kutta method");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"maxPrecision=",0,"maximum precision for the Runge-Kutta method");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"minStepSize=",0,"minimum step size for the Runge-Kutta method");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"maxStepSize=",0,"maximum step size for the Runge-Kutta method");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"maxNumSteps=",0,"maximum number of steps for the Runge-Kutta method");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"stepSizeDec=",0,"step size reduction factor for the Runge-Kutta method");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"stepSizeInc=",0,"step size increasment factor for the Runge-Kutta method");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"stepLength=",0,"distance between the Runge-Kutta start and end points");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"trackLength=",0,"total track length");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"energyLoss=",0,"total energy loss");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"maxDist=",0,"maximum distance for straight line approximation");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"jstep=",0,"Runge-Kutta step number");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"initialStepSize=",0,"initial step size for the Runge-Kutta method");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"minLengthCalcQ=",0,"when the step size of propagation is larger than this value, process noise will be calculated");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMass=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fCharge=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fIsElectron=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fDetMatProperties[2][5]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SoLKalTrackFinder */
static void G__setup_memvarSoLKalTrackFinder(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackFinder));
   { SoLKalTrackFinder *p; p=(SoLKalTrackFinder*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"fIsMC=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlESoLIDGEMTrackermUcOallocatorlESoLIDGEMTrackermUgRsPgR),G__defined_typename("vector<SoLIDGEMTracker*>"),-1,2,"fGEMTracker=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDECal),-1,-1,2,"fECal=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"fNSeeds=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"fSeedEfficiency=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"fMcTrackEfficiency=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNTrackers=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fEventNum=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlESoLIDCaloHitcOallocatorlESoLIDCaloHitgRsPgR),G__defined_typename("vector<SoLIDCaloHit>"),-1,2,"fCaloHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlESoLIDGEMHitmUcOallocatorlESoLIDGEMHitmUgRsPgR),G__defined_typename("vector<SoLIDGEMHit*>"),-1,2,"fWindowHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalFieldStepper),-1,-1,2,"fFieldStepper=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClonesArray),-1,-1,2,"fCoarseTracks=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTargetPlaneZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTargetCenter=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTargetLength=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fBPMX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fBPMY=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_maplEintcOvectorlESoLIDGEMHitmUcOallocatorlESoLIDGEMHitmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESoLIDGEMHitmUcOallocatorlESoLIDGEMHitmUgRsPgRsPgRsPgRsPgR),G__defined_typename("map<Int_t,vector<SoLIDGEMHit*> >"),-1,2,"fGoodHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_maplESeedTypecOvectorlESoLKalTrackFindercLcLDoubletSeedcOallocatorlESoLKalTrackFindercLcLDoubletSeedgRsPgRcOlesslESeedTypegRcOallocatorlEpairlEconstsPSeedTypecOvectorlESoLKalTrackFindercLcLDoubletSeedcOallocatorlESoLKalTrackFindercLcLDoubletSeedgRsPgRsPgRsPgRsPgR),G__defined_typename("map<SeedType,vector<DoubletSeed> >"),-1,2,"fSeedPool=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNGoodTrack=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fChi2PerNDFCut=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SoLIDTrackerSystem */
static void G__setup_memvarSoLIDTrackerSystem(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDTrackerSystem));
   { SoLIDTrackerSystem *p; p=(SoLIDTrackerSystem*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDTrackerSystemcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kMCData=%lldLL",(long long)SoLIDTrackerSystem::kMCData).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDTrackerSystemcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kDoRawDecode=%lldLL",(long long)SoLIDTrackerSystem::kDoRawDecode).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDTrackerSystemcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kDoCoarse=%lldLL",(long long)SoLIDTrackerSystem::kDoCoarse).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDTrackerSystemcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kDoFine=%lldLL",(long long)SoLIDTrackerSystem::kDoFine).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDTrackerSystemcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kDoChi2=%lldLL",(long long)SoLIDTrackerSystem::kDoChi2).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fSystemID=",0,"track system ID, 0 for SIDIS and J/Psi, 0~29 for PVDIS");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPhi=",0,"Phi rotation of this tracker system");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TRotation),-1,-1,2,"fRotation=",0,"Rotation Tracker -> lab frame");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TRotation),-1,-1,2,"fInvRot=",0,"Rotation lab frame -> Tracker");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlESoLIDGEMTrackermUcOallocatorlESoLIDGEMTrackermUgRsPgR),G__defined_typename("vector<SoLIDGEMTracker*>"),-1,2,"fGEMTracker=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDECal),-1,-1,2,"fECal=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDFieldMap),-1,-1,2,"fFieldMap=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClonesArray),-1,-1,2,"fTracks=",0,"array for storing SoLIDTrack(SoLIDMCTrack) objects");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TString),-1,-1,2,"fDBPrefix=",0,"Safe storage for database file name prefix");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_THashTable),-1,-1,2,"fCrateMap=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNTracker=",0,"total number of GEM detectors in this system SIDIS:6, PVDIS:5");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fChi2Cut=",0,"chi2 cut after fitting the track");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNMaxMissHit=",0,"maximum number of hits that is allowed in the coarse tracking");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackFinder),-1,-1,2,"fTrackFinder=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_PoddcLcLSimDecoder),-1,-1,2,"fMCDecoder=",0,"! MC data decoder (if kMCdata)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fChecked=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fGoodSignalFlag=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SolTrackInfo */
static void G__setup_memvarSolTrackInfo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SolTrackInfo));
   { SolTrackInfo *p; p=(SolTrackInfo*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fSector=",0,"Sector where this track was reconstructed");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRtransv=",0,"Transverse distance of track point from beam [m]");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTheta=",0,"Polar angle of track point wrt target center [rad]");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPhi=",0,"Azimuth of track point [rad]");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPhiRot=",0,"Azimuth of track point wrt to sector center [rad]");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fThetaDir=",0,"Polar angle of track direction [rad]");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPhiDir=",0,"Azimuth of track direction [rad]");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPhiDirRot=",0,"Azimuth of track dir wrt to sector center [rad]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMCHitBits=",0,"Bitpattern of plane #s w/MC hit used by this track");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNMCHits=",0,"Number of MC hits in this track (# bits set in fMCHitBits)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SoLIDSpectrometer */
static void G__setup_memvarSoLIDSpectrometer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDSpectrometer));
   { SoLIDSpectrometer *p; p=(SoLIDSpectrometer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClonesArray),-1,-1,2,"fSolTrackInfo=",0,"SoLID-specific per-track info");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNSystem=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNTracker=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNSector=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNReadOut=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_vectorlESoLIDTrackerSystemmUcOallocatorlESoLIDTrackerSystemmUgRsPgR),G__defined_typename("vector<SoLIDTrackerSystem*>"),-1,2,"fTrackerSystem=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarSoLIDTrackingDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncSoLIDGEMReadOut(void) {
   /* SoLIDGEMReadOut */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMReadOut));
   G__memfunc_setup("SoLIDGEMReadOut",1320,G__SoLIDTrackingDict_469_0_1, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMReadOut), -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - ireadout C - - 10 - name "
"C - - 10 '\"\"' description U 'THaDetectorBase' - 0 '0' parent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SoLIDGEMReadOut",1320,G__SoLIDTrackingDict_469_0_2, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMReadOut), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Decode",580,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'THaEvData' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_THaAnalysisObjectcLcLEStatus), -1, 0, 1, 1, 1, 0, "u 'TDatime' - 11 - date", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PrintDataBase",1282,G__SoLIDTrackingDict_469_0_7, 121, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - level", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Begin",485,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'THaRunBase' - 0 '0' r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("End",279,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'THaRunBase' - 0 '0' r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetReadOutID",1133,G__SoLIDTrackingDict_469_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetReadOutID",1121,G__SoLIDTrackingDict_469_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStripAngle",1305,G__SoLIDTrackingDict_469_0_12, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSinStripAngle",1603,G__SoLIDTrackingDict_469_0_13, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCosStripAngle",1598,G__SoLIDTrackingDict_469_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStart",814,G__SoLIDTrackingDict_469_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHits",696,G__SoLIDTrackingDict_469_0_16, 85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TSeqCollection), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNhits",806,G__SoLIDTrackingDict_469_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetResolution",1364,G__SoLIDTrackingDict_469_0_18, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNSigStrips",1302,G__SoLIDTrackingDict_469_0_19, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPitch",792,G__SoLIDTrackingDict_469_0_20, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOccupancy",1221,G__SoLIDTrackingDict_469_0_21, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitOccupancy",1514,G__SoLIDTrackingDict_469_0_22, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsNoisyEvent",1232,G__SoLIDTrackingDict_469_0_23, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadDatabase",1169,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "u 'TDatime' - 11 - date", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DefineVariables",1508,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "i 'THaAnalysisObject::EMode' - 0 'kDefine' mode", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ChargeDep",867,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_StripData_t), -1, 0, 1, 1, 2, 0, "u 'vector<float,allocator<float> >' 'vector<Float_t>' 11 - amp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ChipChargeDep",1255,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_StripData_t), -1, 0, 1, 1, 2, 0, "u 'vector<float,allocator<float> >' 'vector<Float_t>' 11 - amp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MapChannel",983,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 8, "i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddStrip",795,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - istrip", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateOffset",1226,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SoLIDTrackingDict_469_0_31, 85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SoLIDGEMReadOut::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SoLIDTrackingDict_469_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLIDGEMReadOut::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SoLIDTrackingDict_469_0_33, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SoLIDGEMReadOut::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SoLIDTrackingDict_469_0_34, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SoLIDGEMReadOut::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SoLIDTrackingDict_469_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SoLIDTrackingDict_469_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLIDGEMReadOut::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SoLIDTrackingDict_469_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SoLIDGEMReadOut::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SoLIDTrackingDict_469_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLIDGEMReadOut::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SoLIDTrackingDict_469_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SoLIDGEMReadOut::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SoLIDGEMReadOut", 1446, G__SoLIDTrackingDict_469_0_43, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHit(void) {
   /* Hit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_Hit));
   G__memfunc_setup("Hit",293,G__SoLIDTrackingDict_470_0_1, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_Hit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Hit",293,G__SoLIDTrackingDict_470_0_2, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_Hit), -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - pos d - 'Double_t' 0 - res "
"U 'SoLIDGEMReadOut' - 0 - readout", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Compare",711,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Compare",711,G__SoLIDTrackingDict_470_0_4, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"U 'Hit' - 10 - rhs d - 'Double_t' 0 - maxdist", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsSortable",1016,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPos",594,G__SoLIDTrackingDict_470_0_7, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetResolution",1364,G__SoLIDTrackingDict_470_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetReadOut",980,G__SoLIDTrackingDict_470_0_9, 85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMReadOut), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SoLIDTrackingDict_470_0_10, 85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Hit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SoLIDTrackingDict_470_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Hit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SoLIDTrackingDict_470_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Hit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SoLIDTrackingDict_470_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Hit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SoLIDTrackingDict_470_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SoLIDTrackingDict_470_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Hit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SoLIDTrackingDict_470_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Hit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SoLIDTrackingDict_470_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Hit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SoLIDTrackingDict_470_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Hit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Hit", 293, G__SoLIDTrackingDict_470_0_22, (int) ('i'), G__get_linked_tagnum(&G__SoLIDTrackingDictLN_Hit), -1, 0, 1, 1, 1, 0, "u 'Hit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Hit", 419, G__SoLIDTrackingDict_470_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SoLIDTrackingDict_470_0_24, (int) ('u'), G__get_linked_tagnum(&G__SoLIDTrackingDictLN_Hit), -1, 1, 1, 1, 1, 0, "u 'Hit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSoLIDRawHit(void) {
   /* SoLIDRawHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDRawHit));
   G__memfunc_setup("SoLIDRawHit",1002,G__SoLIDTrackingDict_471_0_1, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDRawHit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SoLIDRawHit",1002,G__SoLIDTrackingDict_471_0_2, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDRawHit), -1, 0, 6, 1, 1, 0, 
"d - 'Double_t' 0 - pos d - 'Double_t' 0 - adc_sum "
"h - 'UInt_t' 0 - num_strips i - 'Int_t' 0 - type "
"d - 'Double_t' 0 - res U 'SoLIDGEMReadOut' - 0 - readout", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetADCsum",829,G__SoLIDTrackingDict_471_0_4, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSize",699,G__SoLIDTrackingDict_471_0_5, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetType",706,G__SoLIDTrackingDict_471_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SoLIDTrackingDict_471_0_7, 85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SoLIDRawHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SoLIDTrackingDict_471_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLIDRawHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SoLIDTrackingDict_471_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SoLIDRawHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SoLIDTrackingDict_471_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SoLIDRawHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SoLIDTrackingDict_471_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SoLIDTrackingDict_471_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLIDRawHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SoLIDTrackingDict_471_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SoLIDRawHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SoLIDTrackingDict_471_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLIDRawHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SoLIDTrackingDict_471_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SoLIDRawHit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SoLIDRawHit", 1002, G__SoLIDTrackingDict_471_0_19, (int) ('i'), G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDRawHit), -1, 0, 1, 1, 1, 0, "u 'SoLIDRawHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SoLIDRawHit", 1128, G__SoLIDTrackingDict_471_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SoLIDTrackingDict_471_0_21, (int) ('u'), G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDRawHit), -1, 1, 1, 1, 1, 0, "u 'SoLIDRawHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSoLIDMCRawHit(void) {
   /* SoLIDMCRawHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDMCRawHit));
   G__memfunc_setup("SoLIDMCRawHit",1146,G__SoLIDTrackingDict_472_0_1, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDMCRawHit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SoLIDMCRawHit",1146,G__SoLIDTrackingDict_472_0_2, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDMCRawHit), -1, 0, 10, 1, 1, 0, 
"d - 'Double_t' 0 - pos d - 'Double_t' 0 - adc_sum "
"h - 'UInt_t' 0 - num_strips i - 'Int_t' 0 - type "
"d - 'Double_t' 0 - res U 'SoLIDGEMReadOut' - 0 - readout "
"i - 'Int_t' 0 - mctrk d - 'Double_t' 0 - mcpos "
"d - 'Double_t' 0 - mctime i - 'Int_t' 0 - num_bg_strips", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SoLIDTrackingDict_472_0_4, 85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SoLIDMCRawHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SoLIDTrackingDict_472_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLIDMCRawHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SoLIDTrackingDict_472_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SoLIDMCRawHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SoLIDTrackingDict_472_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SoLIDMCRawHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SoLIDTrackingDict_472_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SoLIDTrackingDict_472_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLIDMCRawHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SoLIDTrackingDict_472_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SoLIDMCRawHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SoLIDTrackingDict_472_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLIDMCRawHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SoLIDTrackingDict_472_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SoLIDMCRawHit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SoLIDMCRawHit", 1146, G__SoLIDTrackingDict_472_0_16, (int) ('i'), G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDMCRawHit), -1, 0, 1, 1, 1, 0, "u 'SoLIDMCRawHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SoLIDMCRawHit", 1272, G__SoLIDTrackingDict_472_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SoLIDTrackingDict_472_0_18, (int) ('u'), G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDMCRawHit), -1, 1, 1, 1, 1, 0, "u 'SoLIDMCRawHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSoLIDGEMHit(void) {
   /* SoLIDGEMHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMHit));
   G__memfunc_setup("SoLIDGEMHit",921,G__SoLIDTrackingDict_473_0_1, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMHit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SoLIDGEMHit",921,G__SoLIDTrackingDict_473_0_2, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMHit), -1, 0, 7, 1, 1, 0, 
"i - 'Int_t' 0 - chamberID i - 'Int_t' 0 - trackerID "
"d - 'Double_t' 0 - r d - 'Double_t' 0 - phi "
"d - 'Double_t' 0 - z U 'Hit' - 0 - uhit "
"U 'Hit' - 0 - vhit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSortable",1016,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Compare",711,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsUsed",589,G__SoLIDTrackingDict_473_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChamberID",1119,G__SoLIDTrackingDict_473_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrackerID",1145,G__SoLIDTrackingDict_473_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZ",378,G__SoLIDTrackingDict_473_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetX",376,G__SoLIDTrackingDict_473_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetY",377,G__SoLIDTrackingDict_473_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetR",370,G__SoLIDTrackingDict_473_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhi",577,G__SoLIDTrackingDict_473_0_12, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQU",454,G__SoLIDTrackingDict_473_0_13, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQV",455,G__SoLIDTrackingDict_473_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUPos",679,G__SoLIDTrackingDict_473_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVPos",680,G__SoLIDTrackingDict_473_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUSize",784,G__SoLIDTrackingDict_473_0_17, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVSize",785,G__SoLIDTrackingDict_473_0_18, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPredX",771,G__SoLIDTrackingDict_473_0_19, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPredY",772,G__SoLIDTrackingDict_473_0_20, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPredeX",872,G__SoLIDTrackingDict_473_0_21, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPredeY",873,G__SoLIDTrackingDict_473_0_22, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPX",456,G__SoLIDTrackingDict_473_0_23, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPY",457,G__SoLIDTrackingDict_473_0_24, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPZ",458,G__SoLIDTrackingDict_473_0_25, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUHit",666,G__SoLIDTrackingDict_473_0_26, 85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_Hit), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVHit",667,G__SoLIDTrackingDict_473_0_27, 85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_Hit), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPredictHit",1308,G__SoLIDTrackingDict_473_0_28, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 0 - ex d - 'Double_t' 0 - ey", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMomentum",1150,G__SoLIDTrackingDict_473_0_29, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - px d - 'Double_t' 0 - py "
"d - 'Double_t' 0 - pz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUsed",701,G__SoLIDTrackingDict_473_0_30, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SoLIDTrackingDict_473_0_31, 85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SoLIDGEMHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SoLIDTrackingDict_473_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLIDGEMHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SoLIDTrackingDict_473_0_33, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SoLIDGEMHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SoLIDTrackingDict_473_0_34, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SoLIDGEMHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SoLIDTrackingDict_473_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SoLIDTrackingDict_473_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLIDGEMHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SoLIDTrackingDict_473_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SoLIDGEMHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SoLIDTrackingDict_473_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLIDGEMHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SoLIDTrackingDict_473_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SoLIDGEMHit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SoLIDGEMHit", 921, G__SoLIDTrackingDict_473_0_43, (int) ('i'), G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMHit), -1, 0, 1, 1, 1, 0, "u 'SoLIDGEMHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SoLIDGEMHit", 1047, G__SoLIDTrackingDict_473_0_44, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SoLIDTrackingDict_473_0_45, (int) ('u'), G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMHit), -1, 1, 1, 1, 1, 0, "u 'SoLIDGEMHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSoLIDMCGEMHit(void) {
   /* SoLIDMCGEMHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDMCGEMHit));
   G__memfunc_setup("SoLIDMCGEMHit",1065,G__SoLIDTrackingDict_474_0_1, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDMCGEMHit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SoLIDMCGEMHit",1065,G__SoLIDTrackingDict_474_0_2, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDMCGEMHit), -1, 0, 7, 1, 1, 0, 
"i - 'Int_t' 0 - chamberID i - 'Int_t' 0 - trackerID "
"d - 'Double_t' 0 - r d - 'Double_t' 0 - phi "
"d - 'Double_t' 0 - z U 'Hit' - 0 - uhit "
"U 'Hit' - 0 - vhit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSignalHit",1087,G__SoLIDTrackingDict_474_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUPosMC",823,G__SoLIDTrackingDict_474_0_4, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVPosMC",824,G__SoLIDTrackingDict_474_0_5, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SoLIDTrackingDict_474_0_6, 85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SoLIDMCGEMHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SoLIDTrackingDict_474_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLIDMCGEMHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SoLIDTrackingDict_474_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SoLIDMCGEMHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SoLIDTrackingDict_474_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SoLIDMCGEMHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SoLIDTrackingDict_474_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SoLIDTrackingDict_474_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLIDMCGEMHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SoLIDTrackingDict_474_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SoLIDMCGEMHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SoLIDTrackingDict_474_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLIDMCGEMHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SoLIDTrackingDict_474_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SoLIDMCGEMHit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SoLIDMCGEMHit", 1065, G__SoLIDTrackingDict_474_0_18, (int) ('i'), G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDMCGEMHit), -1, 0, 1, 1, 1, 0, "u 'SoLIDMCGEMHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SoLIDMCGEMHit", 1191, G__SoLIDTrackingDict_474_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SoLIDTrackingDict_474_0_20, (int) ('u'), G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDMCGEMHit), -1, 1, 1, 1, 1, 0, "u 'SoLIDMCGEMHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSoLIDGEMTracker(void) {
   /* SoLIDGEMTracker */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMTracker));
   G__memfunc_setup("SoLIDGEMTracker",1344,G__SoLIDTrackingDict_486_0_1, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMTracker), -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - iGEM C - - 10 - name "
"C - - 10 '\"\"' description U 'THaDetectorBase' - 0 '0' parent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SoLIDGEMTracker",1344,G__SoLIDTrackingDict_486_0_2, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMTracker), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Decode",580,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'THaEvData' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_THaAnalysisObjectcLcLEStatus), -1, 0, 1, 1, 1, 0, "u 'TDatime' - 11 - date", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PrintDataBase",1282,G__SoLIDTrackingDict_486_0_7, 121, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - level", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Begin",485,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'THaRunBase' - 0 '0' r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("End",279,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'THaRunBase' - 0 '0' r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTrackerID",1157,G__SoLIDTrackingDict_486_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrackerID",1145,G__SoLIDTrackingDict_486_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNChamber",1056,G__SoLIDTrackingDict_486_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZ",378,G__SoLIDTrackingDict_486_0_13, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CombineChamberHits",1799,G__SoLIDTrackingDict_486_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChamber",978,G__SoLIDTrackingDict_486_0_15, 85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMChamber), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNHits",774,G__SoLIDTrackingDict_486_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUMeanOccu",1152,G__SoLIDTrackingDict_486_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUMeanHitOccu",1445,G__SoLIDTrackingDict_486_0_18, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVMeanOccu",1153,G__SoLIDTrackingDict_486_0_19, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVMeanHitOccu",1446,G__SoLIDTrackingDict_486_0_20, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadDatabase",1169,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "u 'TDatime' - 11 - date", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DefineVariables",1508,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "i 'THaAnalysisObject::EMode' - 0 'kDefine' mode", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SoLIDTrackingDict_486_0_23, 85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SoLIDGEMTracker::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SoLIDTrackingDict_486_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLIDGEMTracker::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SoLIDTrackingDict_486_0_25, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SoLIDGEMTracker::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SoLIDTrackingDict_486_0_26, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SoLIDGEMTracker::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SoLIDTrackingDict_486_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SoLIDTrackingDict_486_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLIDGEMTracker::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SoLIDTrackingDict_486_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SoLIDGEMTracker::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SoLIDTrackingDict_486_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLIDGEMTracker::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SoLIDTrackingDict_486_0_34, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SoLIDGEMTracker::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SoLIDGEMTracker", 1470, G__SoLIDTrackingDict_486_0_35, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSoLIDGEMChamber(void) {
   /* SoLIDGEMChamber */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMChamber));
   G__memfunc_setup("SoLIDGEMChamber",1318,G__SoLIDTrackingDict_487_0_1, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMChamber), -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - ichamber C - - 10 - name "
"C - - 10 '\"\"' description U 'THaDetectorBase' - 0 '0' parent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SoLIDGEMChamber",1318,G__SoLIDTrackingDict_487_0_2, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMChamber), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Decode",580,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'THaEvData' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_THaAnalysisObjectcLcLEStatus), -1, 0, 1, 1, 1, 0, "u 'TDatime' - 11 - date", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PrintDataBase",1282,G__SoLIDTrackingDict_487_0_7, 121, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - level", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Begin",485,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'THaRunBase' - 0 '0' r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("End",279,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'THaRunBase' - 0 '0' r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetChamberID",1131,G__SoLIDTrackingDict_487_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChamberID",1119,G__SoLIDTrackingDict_487_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhi",577,G__SoLIDTrackingDict_487_0_12, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "in rad from -pi to pi", (void*) NULL, 0);
   G__memfunc_setup("GetPhiCover",1088,G__SoLIDTrackingDict_487_0_13, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhiOffset",1192,G__SoLIDTrackingDict_487_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetReference",1199,G__SoLIDTrackingDict_487_0_15, 117, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TVector2), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCenterPos",1203,G__SoLIDTrackingDict_487_0_16, 117, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TVector3), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZ",378,G__SoLIDTrackingDict_487_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNHits",774,G__SoLIDTrackingDict_487_0_18, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHits",696,G__SoLIDTrackingDict_487_0_19, 85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TSeqCollection), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetReadOut",980,G__SoLIDTrackingDict_487_0_20, 85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMReadOut), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUOccupancy",1306,G__SoLIDTrackingDict_487_0_21, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUHitOccupancy",1599,G__SoLIDTrackingDict_487_0_22, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVOccupancy",1307,G__SoLIDTrackingDict_487_0_23, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVHitOccupancy",1600,G__SoLIDTrackingDict_487_0_24, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadDatabase",1169,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "u 'TDatime' - 11 - date", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadGeometry",1224,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 2, 0, 
"E - - 0 - file u 'TDatime' - 11 - date "
"g - 'Bool_t' 0 'kTRUE' required", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DefineVariables",1508,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "i 'THaAnalysisObject::EMode' - 0 'kDefine' mode", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ProcessRawHits",1441,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 2, 0, 
"U 'TSeqCollection' - 0 - uhits U 'TSeqCollection' - 0 - vhits", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UVtoCylinCoor",1312,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 2, 0, 
"d - 'Double_t' 0 - upos d - 'Double_t' 0 - vpos "
"D - 'Double_t' 0 - r D - 'Double_t' 0 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Contains",831,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 2, 0, 
"D - 'Double_t' 0 - r D - 'Double_t' 0 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckChargeAsymmetry",2035,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 2, 0, 
"d - 'Double_t' 0 - qu d - 'Double_t' 0 - qv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RotateToLab",1089,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "D - 'Double_t' 0 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SoLIDTrackingDict_487_0_33, 85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SoLIDGEMChamber::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SoLIDTrackingDict_487_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLIDGEMChamber::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SoLIDTrackingDict_487_0_35, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SoLIDGEMChamber::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SoLIDTrackingDict_487_0_36, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SoLIDGEMChamber::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SoLIDTrackingDict_487_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SoLIDTrackingDict_487_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLIDGEMChamber::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SoLIDTrackingDict_487_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SoLIDGEMChamber::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SoLIDTrackingDict_487_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLIDGEMChamber::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SoLIDTrackingDict_487_0_44, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SoLIDGEMChamber::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SoLIDGEMChamber", 1444, G__SoLIDTrackingDict_487_0_45, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSoLIDECal(void) {
   /* SoLIDECal */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDECal));
   G__memfunc_setup("SoLIDECal",752,G__SoLIDTrackingDict_724_0_1, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDECal), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SoLIDECal",752,G__SoLIDTrackingDict_724_0_2, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDECal), -1, 0, 3, 1, 1, 0, 
"C - - 10 - name C - - 10 '\"\"' description "
"U 'THaDetectorBase' - 0 '0' parent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Decode",580,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'THaEvData' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_THaAnalysisObjectcLcLEStatus), -1, 0, 1, 1, 1, 0, "u 'TDatime' - 11 - date", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PrintDataBase",1282,G__SoLIDTrackingDict_724_0_7, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Begin",485,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'THaRunBase' - 0 '0' r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("End",279,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'THaRunBase' - 0 '0' r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsFAECTriggered",1384,G__SoLIDTrackingDict_724_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsLAECTriggered",1390,G__SoLIDTrackingDict_724_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNLAECHits",1051,G__SoLIDTrackingDict_724_0_12, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNFAECHits",1045,G__SoLIDTrackingDict_724_0_13, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLAECHits",973,G__SoLIDTrackingDict_724_0_14, 85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_maplEintcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgR), G__defined_typename("map<Int_t,vector<Float_t> >"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFAECHits",967,G__SoLIDTrackingDict_724_0_15, 85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_maplEintcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgR), G__defined_typename("map<Int_t,vector<Float_t> >"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetECZ",514,G__SoLIDTrackingDict_724_0_16, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i 'ECType' - 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPosReso",1003,G__SoLIDTrackingDict_724_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEReso",766,G__SoLIDTrackingDict_724_0_18, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SmearPosition",1357,G__SoLIDTrackingDict_724_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"F - 'Float_t' 0 - x F - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SmearEnergy",1122,G__SoLIDTrackingDict_724_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - energy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadDatabase",1169,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "u 'TDatime' - 11 - date", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DefineVariables",1508,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "i 'THaAnalysisObject::EMode' - 0 'kDefine' mode", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SoLIDTrackingDict_724_0_23, 85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SoLIDECal::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SoLIDTrackingDict_724_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLIDECal::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SoLIDTrackingDict_724_0_25, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SoLIDECal::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SoLIDTrackingDict_724_0_26, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SoLIDECal::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SoLIDTrackingDict_724_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SoLIDTrackingDict_724_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLIDECal::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SoLIDTrackingDict_724_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SoLIDECal::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SoLIDTrackingDict_724_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLIDECal::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SoLIDTrackingDict_724_0_34, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SoLIDECal::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SoLIDECal", 878, G__SoLIDTrackingDict_724_0_35, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSoLIDTrack(void) {
   /* SoLIDTrack */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDTrack));
   G__memfunc_setup("SoLIDTrack",912,G__SoLIDTrackingDict_732_0_1, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDTrack), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Compare",711,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsSortable",1016,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetCoarseFitStatus",1840,G__SoLIDTrackingDict_732_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - is", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCoarseChi2",1231,G__SoLIDTrackingDict_732_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - chi2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFineFirStatus",1619,G__SoLIDTrackingDict_732_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - is", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFineChi2",1012,G__SoLIDTrackingDict_732_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - chi2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStatus",944,G__SoLIDTrackingDict_732_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - is", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCharge",886,G__SoLIDTrackingDict_732_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - charge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMass",704,G__SoLIDTrackingDict_732_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - mass", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPID",521,G__SoLIDTrackingDict_732_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - pid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAngleFlag",1165,G__SoLIDTrackingDict_732_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - angleflag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMomMax",891,G__SoLIDTrackingDict_732_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - mommax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMomMin",889,G__SoLIDTrackingDict_732_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - mommin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetThetaMax",1096,G__SoLIDTrackingDict_732_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - thetamax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetThetaMin",1094,G__SoLIDTrackingDict_732_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - thetamin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMomentum",1150,G__SoLIDTrackingDict_732_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - momentum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVertexZ",1028,G__SoLIDTrackingDict_732_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - vertexz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTheta",802,G__SoLIDTrackingDict_732_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - theta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPhi",589,G__SoLIDTrackingDict_732_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNDF",516,G__SoLIDTrackingDict_732_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ndf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsCoarseFitted",1401,G__SoLIDTrackingDict_732_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsFineFitted",1182,G__SoLIDTrackingDict_732_0_23, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChi2",614,G__SoLIDTrackingDict_732_0_24, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNHits",774,G__SoLIDTrackingDict_732_0_25, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHit",581,G__SoLIDTrackingDict_732_0_26, 85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMHit), -1, 0, 1, 1, 1, 8, "h - 'UInt_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStatus",932,G__SoLIDTrackingDict_732_0_27, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCharge",874,G__SoLIDTrackingDict_732_0_28, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMass",692,G__SoLIDTrackingDict_732_0_29, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPID",509,G__SoLIDTrackingDict_732_0_30, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAngleFlag",1153,G__SoLIDTrackingDict_732_0_31, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMomMax",879,G__SoLIDTrackingDict_732_0_32, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMomMin",877,G__SoLIDTrackingDict_732_0_33, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetThetaMax",1084,G__SoLIDTrackingDict_732_0_34, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetThetaMin",1082,G__SoLIDTrackingDict_732_0_35, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMomentum",1138,G__SoLIDTrackingDict_732_0_36, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVertexZ",1016,G__SoLIDTrackingDict_732_0_37, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTheta",790,G__SoLIDTrackingDict_732_0_38, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhi",577,G__SoLIDTrackingDict_732_0_39, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNDF",504,G__SoLIDTrackingDict_732_0_40, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChi2perNDF",1157,G__SoLIDTrackingDict_732_0_41, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddHit",558,G__SoLIDTrackingDict_732_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "U 'SoLIDGEMHit' - 0 - theHit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitInfo",977,G__SoLIDTrackingDict_732_0_43, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"h - 'UInt_t' 0 - i h - 'UInt_t' 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitX0",717,G__SoLIDTrackingDict_732_0_44, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitX1",718,G__SoLIDTrackingDict_732_0_45, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitX2",719,G__SoLIDTrackingDict_732_0_46, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitX3",720,G__SoLIDTrackingDict_732_0_47, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitX4",721,G__SoLIDTrackingDict_732_0_48, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitX5",722,G__SoLIDTrackingDict_732_0_49, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPredHitX0",1112,G__SoLIDTrackingDict_732_0_50, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPredHitX1",1113,G__SoLIDTrackingDict_732_0_51, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPredHitX2",1114,G__SoLIDTrackingDict_732_0_52, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPredHitX3",1115,G__SoLIDTrackingDict_732_0_53, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPredHitX4",1116,G__SoLIDTrackingDict_732_0_54, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPredHitX5",1117,G__SoLIDTrackingDict_732_0_55, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitY0",718,G__SoLIDTrackingDict_732_0_56, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitY1",719,G__SoLIDTrackingDict_732_0_57, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitY2",720,G__SoLIDTrackingDict_732_0_58, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitY3",721,G__SoLIDTrackingDict_732_0_59, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitY4",722,G__SoLIDTrackingDict_732_0_60, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitY5",723,G__SoLIDTrackingDict_732_0_61, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPredHitY0",1113,G__SoLIDTrackingDict_732_0_62, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPredHitY1",1114,G__SoLIDTrackingDict_732_0_63, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPredHitY2",1115,G__SoLIDTrackingDict_732_0_64, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPredHitY3",1116,G__SoLIDTrackingDict_732_0_65, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPredHitY4",1117,G__SoLIDTrackingDict_732_0_66, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPredHitY5",1118,G__SoLIDTrackingDict_732_0_67, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitTracker0",1345,G__SoLIDTrackingDict_732_0_68, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitTracker1",1346,G__SoLIDTrackingDict_732_0_69, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitTracker2",1347,G__SoLIDTrackingDict_732_0_70, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitTracker3",1348,G__SoLIDTrackingDict_732_0_71, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitTracker4",1349,G__SoLIDTrackingDict_732_0_72, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitTracker5",1350,G__SoLIDTrackingDict_732_0_73, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPredHiteX0",1213,G__SoLIDTrackingDict_732_0_74, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPredHiteX1",1214,G__SoLIDTrackingDict_732_0_75, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPredHiteX2",1215,G__SoLIDTrackingDict_732_0_76, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPredHiteX3",1216,G__SoLIDTrackingDict_732_0_77, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPredHiteX4",1217,G__SoLIDTrackingDict_732_0_78, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPredHiteX5",1218,G__SoLIDTrackingDict_732_0_79, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPredHiteY0",1214,G__SoLIDTrackingDict_732_0_80, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPredHiteY1",1215,G__SoLIDTrackingDict_732_0_81, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPredHiteY2",1216,G__SoLIDTrackingDict_732_0_82, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPredHiteY3",1217,G__SoLIDTrackingDict_732_0_83, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPredHiteY4",1218,G__SoLIDTrackingDict_732_0_84, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPredHiteY5",1219,G__SoLIDTrackingDict_732_0_85, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitPX0",797,G__SoLIDTrackingDict_732_0_86, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitPX1",798,G__SoLIDTrackingDict_732_0_87, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitPX2",799,G__SoLIDTrackingDict_732_0_88, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitPX3",800,G__SoLIDTrackingDict_732_0_89, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitPX4",801,G__SoLIDTrackingDict_732_0_90, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitPX5",802,G__SoLIDTrackingDict_732_0_91, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitPY0",798,G__SoLIDTrackingDict_732_0_92, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitPY1",799,G__SoLIDTrackingDict_732_0_93, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitPY2",800,G__SoLIDTrackingDict_732_0_94, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitPY3",801,G__SoLIDTrackingDict_732_0_95, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitPY4",802,G__SoLIDTrackingDict_732_0_96, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitPY5",803,G__SoLIDTrackingDict_732_0_97, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitPZ0",799,G__SoLIDTrackingDict_732_0_98, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitPZ1",800,G__SoLIDTrackingDict_732_0_99, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitPZ2",801,G__SoLIDTrackingDict_732_0_100, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitPZ3",802,G__SoLIDTrackingDict_732_0_101, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitPZ4",803,G__SoLIDTrackingDict_732_0_102, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitPZ5",804,G__SoLIDTrackingDict_732_0_103, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SortHitZ",807,G__SoLIDTrackingDict_732_0_104, 103, -1, -1, 0, 2, 3, 1, 0, 
"U 'SoLIDGEMHit' - 10 - a U 'SoLIDGEMHit' - 10 - b", (char*)NULL, (void*) G__func2void( (bool (*)(const SoLIDGEMHit*, const SoLIDGEMHit*))(&SoLIDTrack::SortHitZ) ), 0);
   G__memfunc_setup("SortHits",832,G__SoLIDTrackingDict_732_0_105, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SoLIDTrackingDict_732_0_106, 85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SoLIDTrack::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SoLIDTrackingDict_732_0_107, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLIDTrack::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SoLIDTrackingDict_732_0_108, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SoLIDTrack::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SoLIDTrackingDict_732_0_109, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SoLIDTrack::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SoLIDTrackingDict_732_0_113, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SoLIDTrackingDict_732_0_114, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLIDTrack::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SoLIDTrackingDict_732_0_115, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SoLIDTrack::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SoLIDTrackingDict_732_0_116, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLIDTrack::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SoLIDTrackingDict_732_0_117, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SoLIDTrack::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SoLIDTrack", 912, G__SoLIDTrackingDict_732_0_118, (int) ('i'), G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDTrack), -1, 0, 1, 1, 1, 0, "u 'SoLIDTrack' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SoLIDTrack", 1038, G__SoLIDTrackingDict_732_0_119, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SoLIDTrackingDict_732_0_120, (int) ('u'), G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDTrack), -1, 1, 1, 1, 1, 0, "u 'SoLIDTrack' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSoLIDMCTrack(void) {
   /* SoLIDMCTrack */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDMCTrack));
   G__memfunc_setup("SoLIDMCTrack",1056,G__SoLIDTrackingDict_737_0_1, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDMCTrack), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMCHitInfo",1121,G__SoLIDTrackingDict_737_0_2, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"h - 'UInt_t' 0 - i h - 'UInt_t' 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSignalHit0",1135,G__SoLIDTrackingDict_737_0_3, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSignalHit1",1136,G__SoLIDTrackingDict_737_0_4, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSignalHit2",1137,G__SoLIDTrackingDict_737_0_5, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSignalHit3",1138,G__SoLIDTrackingDict_737_0_6, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSignalHit4",1139,G__SoLIDTrackingDict_737_0_7, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSignalHit5",1140,G__SoLIDTrackingDict_737_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNMCHits",918,G__SoLIDTrackingDict_737_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SoLIDTrackingDict_737_0_10, 85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SoLIDMCTrack::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SoLIDTrackingDict_737_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLIDMCTrack::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SoLIDTrackingDict_737_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SoLIDMCTrack::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SoLIDTrackingDict_737_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SoLIDMCTrack::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SoLIDTrackingDict_737_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SoLIDTrackingDict_737_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLIDMCTrack::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SoLIDTrackingDict_737_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SoLIDMCTrack::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SoLIDTrackingDict_737_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLIDMCTrack::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SoLIDTrackingDict_737_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SoLIDMCTrack::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SoLIDMCTrack", 1056, G__SoLIDTrackingDict_737_0_22, (int) ('i'), G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDMCTrack), -1, 0, 1, 1, 1, 0, "u 'SoLIDMCTrack' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SoLIDMCTrack", 1182, G__SoLIDTrackingDict_737_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SoLIDTrackingDict_737_0_24, (int) ('u'), G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDMCTrack), -1, 1, 1, 1, 1, 0, "u 'SoLIDMCTrack' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncProgressiveTracking(void) {
   /* ProgressiveTracking */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_ProgressiveTracking));
   G__memfunc_setup("ProgressiveTracking",1996,G__SoLIDTrackingDict_738_0_1, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_ProgressiveTracking), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - ntracker g - 'Bool_t' 0 - isMC", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessHits",1143,G__SoLIDTrackingDict_738_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'map<int,vector<TSeqCollection*,allocator<TSeqCollection*> >,less<int>,allocator<pair<const int,vector<TSeqCollection*,allocator<TSeqCollection*> > > > >' 'map<Int_t,vector<TSeqCollection*> >' 0 - theHitMap U 'TClonesArray' - 0 - theTracks", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadDataBase",1137,G__SoLIDTrackingDict_738_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__SoLIDTrackingDict_738_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsIterBackward",1391,G__SoLIDTrackingDict_738_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HasCaloHit",960,G__SoLIDTrackingDict_738_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCaloHit",976,G__SoLIDTrackingDict_738_0_7, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 - xpos d - 'Double_t' 0 - ypos "
"i - 'Int_t' 0 - plane d - 'Double_t' 0 - edp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetIterBackward",1503,G__SoLIDTrackingDict_738_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - is", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNElectron",1206,G__SoLIDTrackingDict_738_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNHadron",982,G__SoLIDTrackingDict_738_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindTrack",886,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"i - 'Int_t' 0 - angleflag i - 'Int_t' 0 - type "
"U 'map<int,vector<TSeqCollection*,allocator<TSeqCollection*> >,less<int>,allocator<pair<const int,vector<TSeqCollection*,allocator<TSeqCollection*> > > > >' 'map<Int_t,vector<TSeqCollection*> >' 0 - theHitMap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckTracks",1094,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CombineTrackRoad",1592,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'TClonesArray' - 0 - theTracks", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindMomRange",1175,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 7, 1, 4, 0, 
"i - 'Int_t' 0 - layer1 d - 'Double_t' 0 - phi0 "
"i - 'Int_t' 0 - layer2 d - 'Double_t' 0 - phi1 "
"D - 'Double_t' 0 - mom_min D - 'Double_t' 0 - mom_max "
"i - 'Int_t' 0 - angleflag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindThetaRange",1380,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 7, 1, 4, 0, 
"d - 'Double_t' 0 - r1 i - 'Int_t' 0 - layer1 "
"d - 'Double_t' 0 - r2 i - 'Int_t' 0 - layer2 "
"D - 'Double_t' 0 - thetaMin D - 'Double_t' 0 - thetaMax "
"i - 'Int_t' 0 - angleflag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalCircle",866,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 9, 1, 4, 0, 
"d - 'Double_t' 0 - x1 d - 'Double_t' 0 - y1 "
"d - 'Double_t' 0 - x2 d - 'Double_t' 0 - y2 "
"d - 'Double_t' 0 - x3 d - 'Double_t' 0 - y3 "
"D - 'Double_t' 0 - R D - 'Double_t' 0 - Xc "
"D - 'Double_t' 0 - Yc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalDeltaPhi",1051,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 4, 0, 
"d - 'Double_t' 0 - phi1 d - 'Double_t' 0 - phi2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalChargeAsy",1159,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 4, 0, 
"d - 'Double_t' 0 - qu d - 'Double_t' 0 - qv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalVertexZ",1000,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 7, 1, 4, 0, 
"U 'SoLIDGEMHit' - 0 - hit1 U 'SoLIDGEMHit' - 0 - hit2 "
"U 'SoLIDGEMHit' - 0 - hit3 D - 'Double_t' 0 - Rmom "
"i - 'Int_t' 0 - angleFlag D - 'Double_t' 0 - reconVertexZ "
"D - 'Double_t' 0 - reconTheta", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("ProgressiveTracking", 1996, G__SoLIDTrackingDict_738_0_20, (int) ('i'), G__get_linked_tagnum(&G__SoLIDTrackingDictLN_ProgressiveTracking), -1, 0, 1, 1, 1, 0, "u 'ProgressiveTracking' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ProgressiveTracking", 2122, G__SoLIDTrackingDict_738_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SoLIDTrackingDict_738_0_22, (int) ('u'), G__get_linked_tagnum(&G__SoLIDTrackingDictLN_ProgressiveTracking), -1, 1, 1, 1, 1, 0, "u 'ProgressiveTracking' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSoLIDFieldMap(void) {
   /* SoLIDFieldMap */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDFieldMap));
   G__memfunc_setup("GetInstance",1109,G__SoLIDTrackingDict_754_0_1, 85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDFieldMap), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (SoLIDFieldMap* (*)())(&SoLIDFieldMap::GetInstance) ), 0);
   G__memfunc_setup("GetBField",838,G__SoLIDTrackingDict_754_0_2, 117, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TVector3), -1, 1, 3, 1, 1, 0, 
"d - - 0 - x d - - 0 - y "
"d - - 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SoLIDFieldMap",1181,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDFieldMap), -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadFieldMap",1154,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("SoLIDFieldMap", 1181, G__SoLIDTrackingDict_754_0_5, (int) ('i'), G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDFieldMap), -1, 0, 1, 1, 1, 0, "u 'SoLIDFieldMap' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SoLIDFieldMap", 1307, G__SoLIDTrackingDict_754_0_6, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SoLIDTrackingDict_754_0_7, (int) ('u'), G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDFieldMap), -1, 1, 1, 1, 1, 0, "u 'SoLIDFieldMap' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSoLKalMatrix(void) {
   /* SoLKalMatrix */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalMatrix));
   G__memfunc_setup("SoLKalMatrix",1179,G__SoLIDTrackingDict_755_0_1, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalMatrix), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 '1' rowdim i - 'Int_t' 0 '1' coldim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SoLKalMatrix",1179,G__SoLIDTrackingDict_755_0_2, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalMatrix), -1, 0, 1, 1, 1, 0, "u 'SoLKalMatrix' - 11 - orig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SoLKalMatrix",1179,G__SoLIDTrackingDict_755_0_3, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalMatrix), -1, 0, 1, 1, 1, 0, "u 'TMatrixT<double>' 'TMatrixD' 11 - orig", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SoLKalMatrix",1179,G__SoLIDTrackingDict_755_0_4, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalMatrix), -1, 0, 2, 1, 1, 0, 
"i 'TMatrixT<double>::EMatrixCreatorsOp1' - 0 - op u 'SoLKalMatrix' - 11 - prototype", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SoLKalMatrix",1179,G__SoLIDTrackingDict_755_0_5, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalMatrix), -1, 0, 2, 1, 1, 0, 
"i 'TMatrixT<double>::EMatrixCreatorsOp1' - 0 - op u 'TMatrixT<double>' 'TMatrixD' 11 - prototype", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SoLKalMatrix",1179,G__SoLIDTrackingDict_755_0_6, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalMatrix), -1, 0, 3, 1, 1, 0, 
"u 'SoLKalMatrix' - 11 - a i 'TMatrixT<double>::EMatrixCreatorsOp2' - 0 - op "
"u 'SoLKalMatrix' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SoLKalMatrix",1179,G__SoLIDTrackingDict_755_0_7, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalMatrix), -1, 0, 3, 1, 1, 0, 
"u 'TMatrixT<double>' 'TMatrixD' 11 - a i 'TMatrixT<double>::EMatrixCreatorsOp2' - 0 - op "
"u 'TMatrixT<double>' 'TMatrixD' 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SoLKalMatrix",1179,G__SoLIDTrackingDict_755_0_8, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalMatrix), -1, 0, 1, 1, 1, 0, "u 'TVector3' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DebugPrint",1012,G__SoLIDTrackingDict_755_0_9, 121, -1, -1, 0, 2, 1, 1, 8, 
"C - 'Option_t' 10 '\"\"' opt i - 'Int_t' 0 '5' nc", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ToKalMat",765,G__SoLIDTrackingDict_755_0_10, 117, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalMatrix), -1, 0, 1, 3, 1, 0, "u 'TVector3' - 11 - vec", (char*)NULL, (void*) G__func2void( (SoLKalMatrix (*)(const TVector3&))(&SoLKalMatrix::ToKalMat) ), 0);
   G__memfunc_setup("ToThreeVec",985,G__SoLIDTrackingDict_755_0_11, 117, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TVector3), -1, 0, 1, 3, 1, 0, "u 'TMatrixT<double>' 'TMatrixD' 11 - mat", (char*)NULL, (void*) G__func2void( (TVector3 (*)(const TMatrixD&))(&SoLKalMatrix::ToThreeVec) ), 0);
   G__memfunc_setup("Class",502,G__SoLIDTrackingDict_755_0_12, 85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SoLKalMatrix::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SoLIDTrackingDict_755_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLKalMatrix::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SoLIDTrackingDict_755_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SoLKalMatrix::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SoLIDTrackingDict_755_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SoLKalMatrix::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SoLIDTrackingDict_755_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SoLIDTrackingDict_755_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLKalMatrix::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SoLIDTrackingDict_755_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SoLKalMatrix::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SoLIDTrackingDict_755_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLKalMatrix::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SoLIDTrackingDict_755_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SoLKalMatrix::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SoLKalMatrix", 1305, G__SoLIDTrackingDict_755_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SoLIDTrackingDict_755_0_25, (int) ('u'), G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalMatrix), -1, 1, 1, 1, 1, 0, "u 'SoLKalMatrix' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSoLKalTrackSystem(void) {
   /* SoLKalTrackSystem */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackSystem));
   G__memfunc_setup("SoLKalTrackSystem",1696,G__SoLIDTrackingDict_756_0_1, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackSystem), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '1' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddAndFilter",1154,G__SoLIDTrackingDict_756_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'SoLKalTrackSite' - 1 - next", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SmoothBackTo",1198,G__SoLIDTrackingDict_756_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - k", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SmoothAll",915,G__SoLIDTrackingDict_756_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InvFilter",915,G__SoLIDTrackingDict_756_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - k", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Add",265,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TObject' - 0 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCurSite",991,G__SoLIDTrackingDict_756_0_7, 117, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackSite), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetState",801,G__SoLIDTrackingDict_756_0_8, 117, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackState), -1, 1, 1, 1, 1, 0, "i 'SoLKalTrackSite::EStType' - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChi2",614,G__SoLIDTrackingDict_756_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IncreaseChi2",1136,G__SoLIDTrackingDict_756_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - dchi2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNDF",504,G__SoLIDTrackingDict_756_0_11, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "g - 'Bool_t' 0 'kTRUE' self", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChi2perNDF",1157,G__SoLIDTrackingDict_756_0_12, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurInstancePtr",1717,G__SoLIDTrackingDict_756_0_13, 85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackSystem), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (SoLKalTrackSystem* (*)())(&SoLKalTrackSystem::GetCurInstancePtr) ), 0);
   G__memfunc_setup("SetCurInstancePtr",1729,G__SoLIDTrackingDict_756_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "U 'SoLKalTrackSystem' - 0 - ksp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSitePtrToLastSite",2019,G__SoLIDTrackingDict_756_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMomentum",1150,G__SoLIDTrackingDict_756_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMomentum",1138,G__SoLIDTrackingDict_756_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTheta",802,G__SoLIDTrackingDict_756_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTheta",790,G__SoLIDTrackingDict_756_0_19, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPhi",589,G__SoLIDTrackingDict_756_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPhi",577,G__SoLIDTrackingDict_756_0_21, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVertexZ",1028,G__SoLIDTrackingDict_756_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVertexZ",1016,G__SoLIDTrackingDict_756_0_23, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMass",704,G__SoLIDTrackingDict_756_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMass",692,G__SoLIDTrackingDict_756_0_25, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCharge",886,G__SoLIDTrackingDict_756_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - q", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCharge",874,G__SoLIDTrackingDict_756_0_27, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetElectron",1128,G__SoLIDTrackingDict_756_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - tof", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsElectron",1016,G__SoLIDTrackingDict_756_0_29, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrackStatus",1433,G__SoLIDTrackingDict_756_0_30, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTrackStatus",1445,G__SoLIDTrackingDict_756_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAngleFlag",1153,G__SoLIDTrackingDict_756_0_32, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAngleFlag",1165,G__SoLIDTrackingDict_756_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSeedType",1091,G__SoLIDTrackingDict_756_0_34, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SeedType), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSeedType",1103,G__SoLIDTrackingDict_756_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "i 'SeedType' - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckTrackStatus",1623,G__SoLIDTrackingDict_756_0_36, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNMissingHits",1504,G__SoLIDTrackingDict_756_0_37, 105, -1, G__defined_typename("Int_t"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddMissingHits",1403,G__SoLIDTrackingDict_756_0_38, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNHits",774,G__SoLIDTrackingDict_756_0_39, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Compare",711,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsSortable",1016,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SoLIDTrackingDict_756_0_42, 85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SoLKalTrackSystem::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SoLIDTrackingDict_756_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLKalTrackSystem::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SoLIDTrackingDict_756_0_44, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SoLKalTrackSystem::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SoLIDTrackingDict_756_0_45, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SoLKalTrackSystem::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SoLIDTrackingDict_756_0_49, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SoLIDTrackingDict_756_0_50, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLKalTrackSystem::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SoLIDTrackingDict_756_0_51, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SoLKalTrackSystem::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SoLIDTrackingDict_756_0_52, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLKalTrackSystem::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SoLIDTrackingDict_756_0_53, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SoLKalTrackSystem::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SoLKalTrackSystem", 1822, G__SoLIDTrackingDict_756_0_54, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSoLKalTrackSite(void) {
   /* SoLKalTrackSite */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackSite));
   G__memfunc_setup("SoLKalTrackSite",1456,G__SoLIDTrackingDict_757_0_1, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackSite), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 'kMdim' m i - 'Int_t' 0 'kSdim' p "
"d - 'Double_t' 0 '60.' chi2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SoLKalTrackSite",1456,G__SoLIDTrackingDict_757_0_2, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackSite), -1, 0, 4, 1, 1, 0, 
"U 'SoLIDGEMHit' - 0 - ht i - 'Int_t' 0 'kMdim' m "
"i - 'Int_t' 0 'kSdim' p d - 'Double_t' 0 '60.' chi2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcExpectedMeasVec",1865,G__SoLIDTrackingDict_757_0_3, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"u 'SoLKalTrackState' - 11 - a u 'SoLKalMatrix' - 1 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcMeasVecDerivative",2090,G__SoLIDTrackingDict_757_0_4, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"u 'SoLKalTrackState' - 11 - a u 'SoLKalMatrix' - 1 - H", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Filter",614,G__SoLIDTrackingDict_757_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Smooth",634,G__SoLIDTrackingDict_757_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "u 'SoLKalTrackSite' - 1 - pre", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InvFilter",915,G__SoLIDTrackingDict_757_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Add",265,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TObject' - 0 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsAccepted",981,G__SoLIDTrackingDict_757_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHitResolution",1669,G__SoLIDTrackingDict_757_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - ex d - 'Double_t' 0 - ey", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMeasurement",1458,G__SoLIDTrackingDict_757_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDimension",1222,G__SoLIDTrackingDict_757_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurState",1099,G__SoLIDTrackingDict_757_0_13, 117, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackState), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurState",1099,G__SoLIDTrackingDict_757_0_14, 117, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackState), -1, 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetState",801,G__SoLIDTrackingDict_757_0_15, 117, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackState), -1, 1, 1, 1, 1, 0, "i 'SoLKalTrackSite::EStType' - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMeasVec",964,G__SoLIDTrackingDict_757_0_16, 117, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalMatrix), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMeasNoiseMat",1478,G__SoLIDTrackingDict_757_0_17, 117, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalMatrix), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetResVec",872,G__SoLIDTrackingDict_757_0_18, 117, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalMatrix), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCovMat",874,G__SoLIDTrackingDict_757_0_19, 117, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalMatrix), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDeltaChi2",1104,G__SoLIDTrackingDict_757_0_20, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZ",378,G__SoLIDTrackingDict_757_0_21, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZ",390,G__SoLIDTrackingDict_757_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetResVec",872,G__SoLIDTrackingDict_757_0_23, 117, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalMatrix), -1, 0, 1, 1, 1, 0, "i 'SoLKalTrackSite::EStType' - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHit",581,G__SoLIDTrackingDict_757_0_24, 85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMHit), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPredInfoHit",1372,G__SoLIDTrackingDict_757_0_25, 85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMHit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateState",1109,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackState), -1, 1, 2, 1, 4, 0, 
"u 'SoLKalMatrix' - 11 - sv i - 'Int_t' 0 '0' type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateState",1109,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackState), -1, 1, 3, 1, 4, 0, 
"u 'SoLKalMatrix' - 11 - sv u 'SoLKalMatrix' - 11 - c "
"i - 'Int_t' 0 '0' type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcXexp",792,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 8, 
"u 'SoLKalTrackState' - 11 - a u 'TVector3' - 1 - xx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SoLIDTrackingDict_757_0_29, 85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SoLKalTrackSite::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SoLIDTrackingDict_757_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLKalTrackSite::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SoLIDTrackingDict_757_0_31, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SoLKalTrackSite::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SoLIDTrackingDict_757_0_32, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SoLKalTrackSite::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SoLIDTrackingDict_757_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SoLIDTrackingDict_757_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLKalTrackSite::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SoLIDTrackingDict_757_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SoLKalTrackSite::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SoLIDTrackingDict_757_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLKalTrackSite::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SoLIDTrackingDict_757_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SoLKalTrackSite::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SoLKalTrackSite", 1582, G__SoLIDTrackingDict_757_0_41, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSoLKalTrackState(void) {
   /* SoLKalTrackState */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackState));
   G__memfunc_setup("SoLKalTrackState",1564,G__SoLIDTrackingDict_758_0_1, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackState), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 '0' type i - 'Int_t' 0 'kSdim' p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SoLKalTrackState",1564,G__SoLIDTrackingDict_758_0_2, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackState), -1, 0, 3, 1, 1, 0, 
"u 'SoLKalMatrix' - 11 - sv i - 'Int_t' 0 '0' type "
"i - 'Int_t' 0 'kSdim' p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SoLKalTrackState",1564,G__SoLIDTrackingDict_758_0_3, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackState), -1, 0, 4, 1, 1, 0, 
"u 'SoLKalMatrix' - 11 - sv u 'SoLKalMatrix' - 11 - c "
"i - 'Int_t' 0 '0' type i - 'Int_t' 0 'kSdim' p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SoLKalTrackState",1564,G__SoLIDTrackingDict_758_0_4, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackState), -1, 0, 4, 1, 1, 0, 
"u 'SoLKalMatrix' - 11 - sv u 'SoLKalTrackSite' - 11 - site "
"i - 'Int_t' 0 '0' type i - 'Int_t' 0 'kSdim' p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SoLKalTrackState",1564,G__SoLIDTrackingDict_758_0_5, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackState), -1, 0, 5, 1, 1, 0, 
"u 'SoLKalMatrix' - 11 - sv u 'SoLKalMatrix' - 11 - c "
"u 'SoLKalTrackSite' - 11 - site i - 'Int_t' 0 '0' type "
"i - 'Int_t' 0 'kSdim' p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MoveTo",602,G__SoLIDTrackingDict_758_0_6, 85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackState), -1, 0, 3, 1, 1, 8, 
"u 'SoLKalTrackSite' - 1 - to u 'SoLKalMatrix' - 1 - F "
"U 'SoLKalMatrix' - 0 '0' QPtr", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MoveTo",602,G__SoLIDTrackingDict_758_0_7, 117, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackState), -1, 1, 3, 1, 1, 8, 
"u 'SoLKalTrackSite' - 1 - to u 'SoLKalMatrix' - 1 - F "
"u 'SoLKalMatrix' - 1 - Q", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MoveToZ",692,G__SoLIDTrackingDict_758_0_8, 85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackState), -1, 0, 3, 1, 1, 8, 
"d - 'Double_t' 0 - z u 'SoLKalMatrix' - 1 - F "
"U 'SoLKalMatrix' - 0 '0' QPtr", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MoveToZ",692,G__SoLIDTrackingDict_758_0_9, 117, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackState), -1, 1, 3, 1, 1, 8, 
"d - 'Double_t' 0 - z u 'SoLKalMatrix' - 1 - F "
"u 'SoLKalMatrix' - 1 - Q", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Propagate",931,G__SoLIDTrackingDict_758_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'SoLKalTrackSite' - 1 - to", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PredictSVatZ",1187,G__SoLIDTrackingDict_758_0_11, 85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackState), -1, 0, 1, 1, 1, 0, "d - 'Double_t' 1 - z", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PredictSVatNextZ",1602,G__SoLIDTrackingDict_758_0_12, 85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackState), -1, 0, 1, 1, 1, 0, "d - 'Double_t' 1 - z", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitPredictSV",1288,G__SoLIDTrackingDict_758_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ClearAttemptSV",1391,G__SoLIDTrackingDict_758_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDimension",1222,G__SoLIDTrackingDict_758_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSite",693,G__SoLIDTrackingDict_758_0_16, 117, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackSite), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCovMat",874,G__SoLIDTrackingDict_758_0_17, 117, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalMatrix), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetProcNoiseMat",1492,G__SoLIDTrackingDict_758_0_18, 117, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalMatrix), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPropMat",995,G__SoLIDTrackingDict_758_0_19, 117, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalMatrix), -1, 1, 1, 1, 1, 9, "C - 'Char_t' 10 '\"\"' t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetType",706,G__SoLIDTrackingDict_758_0_20, 105, -1, G__defined_typename("Int_t"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZ0",426,G__SoLIDTrackingDict_758_0_21, 100, -1, G__defined_typename("Double_t"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStateVec",1099,G__SoLIDTrackingDict_758_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'SoLKalMatrix' - 11 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCovMat",886,G__SoLIDTrackingDict_758_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'SoLKalMatrix' - 11 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetProcNoiseMat",1504,G__SoLIDTrackingDict_758_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'SoLKalMatrix' - 11 - q", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSitePtr",1015,G__SoLIDTrackingDict_758_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "U 'SoLKalTrackSite' - 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZ0",438,G__SoLIDTrackingDict_758_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcDir",658,G__SoLIDTrackingDict_758_0_27, 121, -1, -1, 0, 1, 1, 1, 8, "u 'TVector3' - 1 - dir", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CalcDir",658,G__SoLIDTrackingDict_758_0_28, 121, -1, -1, 0, 2, 3, 1, 0, 
"u 'TVector3' - 1 - dir u 'SoLKalMatrix' - 11 - sv", (char*)NULL, (void*) G__func2void( (void (*)(TVector3&, const SoLKalMatrix&))(&SoLKalTrackState::CalcDir) ), 0);
   G__memfunc_setup("CalcMomVec",954,G__SoLIDTrackingDict_758_0_29, 121, -1, -1, 0, 1, 1, 1, 8, "u 'TVector3' - 1 - dir", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CalcMomVec",954,G__SoLIDTrackingDict_758_0_30, 121, -1, -1, 0, 2, 3, 1, 0, 
"u 'TVector3' - 1 - dir u 'SoLKalMatrix' - 11 - sv", (char*)NULL, (void*) G__func2void( (void (*)(TVector3&, const SoLKalMatrix&))(&SoLKalTrackState::CalcMomVec) ), 0);
   G__memfunc_setup("Class",502,G__SoLIDTrackingDict_758_0_31, 85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SoLKalTrackState::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SoLIDTrackingDict_758_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLKalTrackState::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SoLIDTrackingDict_758_0_33, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SoLKalTrackState::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SoLIDTrackingDict_758_0_34, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SoLKalTrackState::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SoLIDTrackingDict_758_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SoLIDTrackingDict_758_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLKalTrackState::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SoLIDTrackingDict_758_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SoLKalTrackState::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SoLIDTrackingDict_758_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLKalTrackState::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SoLIDTrackingDict_758_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SoLKalTrackState::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SoLKalTrackState", 1564, G__SoLIDTrackingDict_758_0_43, (int) ('i'), G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackState), -1, 0, 1, 1, 1, 0, "u 'SoLKalTrackState' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SoLKalTrackState", 1690, G__SoLIDTrackingDict_758_0_44, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SoLIDTrackingDict_758_0_45, (int) ('u'), G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackState), -1, 1, 1, 1, 1, 0, "u 'SoLKalTrackState' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSoLKalFieldStepper(void) {
   /* SoLKalFieldStepper */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalFieldStepper));
   G__memfunc_setup("GetInstance",1109,G__SoLIDTrackingDict_759_0_1, 85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalFieldStepper), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (SoLKalFieldStepper* (*)())(&SoLKalFieldStepper::GetInstance) ), 0);
   G__memfunc_setup("TurnOnMS",774,G__SoLIDTrackingDict_759_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TurnOffMS",868,G__SoLIDTrackingDict_759_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TurnOnDEDX",907,G__SoLIDTrackingDict_759_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TurnOffDEDX",1001,G__SoLIDTrackingDict_759_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsMSOn",537,G__SoLIDTrackingDict_759_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsDEDXOn",670,G__SoLIDTrackingDict_759_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEnergyLoss",1323,G__SoLIDTrackingDict_759_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrackLength",1399,G__SoLIDTrackingDict_759_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrackPosAtZ",1366,G__SoLIDTrackingDict_759_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Transport",973,G__SoLIDTrackingDict_759_0_11, 121, -1, -1, 0, 5, 1, 1, 0, 
"u 'SoLKalTrackSite' - 11 - from u 'SoLKalTrackSite' - 1 - to "
"u 'SoLKalMatrix' - 1 - sv u 'SoLKalMatrix' - 1 - F "
"u 'SoLKalMatrix' - 1 - Q", "process noise matrix", (void*) NULL, 0);
   G__memfunc_setup("Transport",973,G__SoLIDTrackingDict_759_0_12, 121, -1, -1, 0, 5, 1, 1, 0, 
"u 'SoLKalTrackSite' - 11 - from d - 'Double_t' 1 - finalZ "
"u 'SoLKalMatrix' - 1 - sv u 'SoLKalMatrix' - 1 - F "
"u 'SoLKalMatrix' - 1 - Q", "process noise matrix", (void*) NULL, 0);
   G__memfunc_setup("Transport",973,G__SoLIDTrackingDict_759_0_13, 121, -1, -1, 0, 5, 1, 1, 0, 
"u 'SoLKalTrackState' - 11 - sv_from d - 'Double_t' 1 - finalZ "
"u 'SoLKalMatrix' - 1 - sv u 'SoLKalMatrix' - 1 - F "
"u 'SoLKalMatrix' - 1 - Q", "process noise matrix", (void*) NULL, 0);
   G__memfunc_setup("RKPropagation",1313,G__SoLIDTrackingDict_759_0_14, 100, -1, G__defined_typename("Double_t"), 0, 5, 1, 1, 0, 
"u 'SoLKalMatrix' - 1 - stateVec u 'SoLKalMatrix' - 1 - fPropStep "
"d - 'Double_t' 0 - stepSize g - 'Bool_t' 0 - bCalcJac "
"g - 'Bool_t' 0 - dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PropagationClassicalRK4",2276,G__SoLIDTrackingDict_759_0_15, 121, -1, -1, 0, 7, 1, 1, 0, 
"u 'TVector3' - 1 - inMom u 'TVector3' - 1 - inPos "
"d - 'Double_t' 1 - finalZ d - 'Double_t' 1 - charge "
"d - 'Double_t' 1 - stepSize u 'TVector3' - 1 - fiMom "
"u 'TVector3' - 1 - fiPos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RightHandSide",1278,G__SoLIDTrackingDict_759_0_16, 121, -1, -1, 0, 4, 1, 1, 0, 
"D - 'Double_t' 10 - y d - 'Double_t' 10 - charge "
"d - 'Double_t' 10 - mom_mag D - 'Double_t' 0 - dydx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Distance2Points",1498,G__SoLIDTrackingDict_759_0_17, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"u 'TVector3' - 11 - vec1 u 'TVector3' - 11 - vec2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindTargetPlaneIntersection",2767,G__SoLIDTrackingDict_759_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"u 'TVector3' - 1 - intersection d - 'Double_t' 0 - target_z "
"u 'TVector3' - 1 - dir u 'TVector3' - 1 - pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PropagateStraightLine",2161,G__SoLIDTrackingDict_759_0_19, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'SoLKalMatrix' - 1 - stateVec u 'SoLKalMatrix' - 1 - fPropChange "
"d - 'Double_t' 1 - zPos d - 'Double_t' 0 - dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PropagateStraightLine",2161,G__SoLIDTrackingDict_759_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"u 'SoLKalMatrix' - 1 - stateVec u 'SoLKalMatrix' - 1 - fPropChange "
"d - 'Double_t' 1 - zPos d - 'Double_t' 10 - target_z "
"g - 'Bool_t' 0 - propDir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitTrack",905,G__SoLIDTrackingDict_759_0_21, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - 'Double_t' 1 - mass d - 'Double_t' 1 - charge "
"g - 'Bool_t' 1 - isElectron g - 'Bool_t' 0 - dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UseDefaultStep",1422,G__SoLIDTrackingDict_759_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UseFineStep",1099,G__SoLIDTrackingDict_759_0_23, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcMultScat",1184,G__SoLIDTrackingDict_759_0_24, 100, -1, G__defined_typename("Double_t"), 0, 5, 1, 1, 0, 
"u 'SoLKalMatrix' - 1 - Q u 'SoLKalMatrix' - 1 - sv_to "
"d - 'Double_t' 0 - length d - 'Double_t' 0 - beta "
"i 'SoLMatType' - 0 'kAir' type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcEnergyLoss",1406,G__SoLIDTrackingDict_759_0_25, 100, -1, G__defined_typename("Double_t"), 0, 6, 1, 1, 0, 
"u 'SoLKalMatrix' - 1 - Q u 'SoLKalMatrix' - 1 - sv_to "
"d - 'Double_t' 0 - length d - 'Double_t' 0 - qp "
"d - 'Double_t' 0 - beta i 'SoLMatType' - 0 'kAir' type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcRadLoss",1067,G__SoLIDTrackingDict_759_0_26, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 1, 0, 
"u 'SoLKalMatrix' - 1 - Q d - 'Double_t' 0 - length "
"d - 'Double_t' 0 - qp d - 'Double_t' 0 - radLength", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcDEDXIonLepton",1584,G__SoLIDTrackingDict_759_0_27, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 - qp d - 'Double_t' 0 - ZoverA "
"d - 'Double_t' 0 - density d - 'Double_t' 0 - I", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcDEDXBetheBloch",1640,G__SoLIDTrackingDict_759_0_28, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 - beta d - 'Double_t' 0 - ZoverA "
"d - 'Double_t' 0 - density d - 'Double_t' 0 - I", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SoLKalFieldStepper",1773,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalFieldStepper), -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitDetMaterial",1504,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("SoLKalFieldStepper", 1773, G__SoLIDTrackingDict_759_0_31, (int) ('i'), G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalFieldStepper), -1, 0, 1, 1, 1, 0, "u 'SoLKalFieldStepper' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SoLKalFieldStepper", 1899, G__SoLIDTrackingDict_759_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SoLIDTrackingDict_759_0_33, (int) ('u'), G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalFieldStepper), -1, 1, 1, 1, 1, 0, "u 'SoLKalFieldStepper' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSoLKalTrackFinder(void) {
   /* SoLKalTrackFinder */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackFinder));
   G__memfunc_setup("SoLKalTrackFinder",1651,G__SoLIDTrackingDict_760_0_1, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackFinder), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SoLKalTrackFinder",1651,G__SoLIDTrackingDict_760_0_2, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackFinder), -1, 0, 2, 1, 1, 0, 
"g - - 0 - isMC i - 'Int_t' 0 - ntrackers", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetGEMDetector",1343,G__SoLIDTrackingDict_760_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<SoLIDGEMTracker*,allocator<SoLIDGEMTracker*> >' 'vector<SoLIDGEMTracker*>' 0 - thetrackers", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetECalDetector",1467,G__SoLIDTrackingDict_760_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'SoLIDECal' - 0 - theECal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessHits",1143,G__SoLIDTrackingDict_760_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TClonesArray' - 0 - theTracks", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCaloHit",976,G__SoLIDTrackingDict_760_0_6, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 - xpos d - 'Double_t' 0 - ypos "
"i - 'Int_t' 0 - plane d - 'Double_t' 0 - edp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBPM",523,G__SoLIDTrackingDict_760_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalCircle",866,G__SoLIDTrackingDict_760_0_8, 121, -1, -1, 0, 9, 1, 1, 0, 
"d - 'Double_t' 0 - x1 d - 'Double_t' 0 - y1 "
"d - 'Double_t' 0 - x2 d - 'Double_t' 0 - y2 "
"d - 'Double_t' 0 - x3 d - 'Double_t' 0 - y3 "
"D - 'Double_t' 0 - R D - 'Double_t' 0 - Xc "
"D - 'Double_t' 0 - Yc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__SoLIDTrackingDict_760_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNSeeds",866,G__SoLIDTrackingDict_760_0_10, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSeedEfficiency",1686,G__SoLIDTrackingDict_760_0_11, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMCTrackEfficiency",1946,G__SoLIDTrackingDict_760_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindDoubletSeed",1489,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"i - 'Int_t' 0 - planej i - 'Int_t' 0 - planek "
"i 'ECType' - 0 'kFAEC' type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MergeSeed",881,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TrackFollow",1128,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CoarseCheckVertex",1721,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindandAddVertex",1595,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FinalSelection",1424,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "U 'TClonesArray' - 0 - theTracks", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CopyTrack",912,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"U 'SoLIDTrack' - 0 - soltrack U 'SoLKalTrackSystem' - 0 - kaltrack", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ECalFinalMatch",1324,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SiteInitWithSeed",1606,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackSite), -1, 1, 1, 1, 2, 0, "U 'SoLKalTrackFinder::DoubletSeed' - 0 - thisSeed", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TriggerCheck",1202,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 2, 0, 
"U 'SoLIDGEMHit' - 0 - theHit i 'ECType' - 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindCloestHitInWindow",2111,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMHit), -1, 0, 2, 1, 2, 0, 
"d - - 1 - x d - - 1 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalDeltaPhi",1051,(G__InterfaceMethod) NULL, 100, -1, -1, 0, 2, 1, 2, 0, 
"d - - 0 - phi1 d - - 0 - phi2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalDeltaR",844,(G__InterfaceMethod) NULL, 100, -1, -1, 0, 2, 1, 2, 0, 
"d - - 0 - r1 d - - 0 - r2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PredictR",797,(G__InterfaceMethod) NULL, 100, -1, -1, 0, 3, 1, 2, 0, 
"i - 'Int_t' 1 - plane U 'SoLIDGEMHit' - 0 - hit1 "
"U 'SoLIDGEMHit' - 0 - hit2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitsInWindow",1511,(G__InterfaceMethod) NULL, 105, -1, -1, 0, 6, 1, 2, 0, 
"i - - 0 - plane d - - 0 - x "
"d - - 0 - wx d - - 0 - y "
"d - - 0 - wy g - - 0 'false' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindVertexZ",1113,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 2, 0, "U 'SoLKalTrackState' - 0 - thisState", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckChargeAsy",1365,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "U 'SoLKalTrackSystem' - 0 - theSystem", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHitChamberList",1683,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"u 'vector<int,allocator<int> >' 'vector<Int_t>' 1 - theList i - 'Int_t' 0 - thisChamber "
"i - 'Int_t' 0 - size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChamIDFromPos",1516,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 2, 0, 
"d - 'Double_t' 1 - x d - 'Double_t' 1 - y "
"i - 'Int_t' 0 - TrackerID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalInitParForPair",1658,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 7, 1, 2, 0, 
"U 'SoLIDGEMHit' - 0 - hita U 'SoLIDGEMHit' - 0 - hitb "
"d - 'Double_t' 1 - charge d - 'Double_t' 1 - mom "
"d - 'Double_t' 1 - theta d - 'Double_t' 1 - phi "
"i 'ECType' - 1 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BinarySearchForR",1588,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 2, 0, 
"U 'TSeqCollection' - 0 - array d - 'Double_t' 1 - lowr", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("SoLKalTrackFinder", 1651, G__SoLIDTrackingDict_760_0_34, (int) ('i'), G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackFinder), -1, 0, 1, 1, 1, 0, "u 'SoLKalTrackFinder' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SoLKalTrackFinder", 1777, G__SoLIDTrackingDict_760_0_35, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SoLIDTrackingDict_760_0_36, (int) ('u'), G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLKalTrackFinder), -1, 1, 1, 1, 1, 0, "u 'SoLKalTrackFinder' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSoLIDTrackerSystem(void) {
   /* SoLIDTrackerSystem */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDTrackerSystem));
   G__memfunc_setup("SoLIDTrackerSystem",1772,G__SoLIDTrackingDict_786_0_1, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDTrackerSystem), -1, 0, 3, 1, 1, 0, 
"C - - 10 - name C - - 10 '\"\"' description "
"U 'THaApparatus' - 0 '0' app", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SoLIDTrackerSystem",1772,G__SoLIDTrackingDict_786_0_2, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDTrackerSystem), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadDatabase",1169,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TDatime' - 11 - date", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Decode",580,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'THaEvData' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_THaAnalysisObjectcLcLEStatus), -1, 0, 1, 1, 1, 0, "u 'TDatime' - 11 - date", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CoarseTrack",1106,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TClonesArray' - 1 - tracks", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FineTrack",887,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TClonesArray' - 1 - tracks", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DefineVariables",1508,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i 'THaAnalysisObject::EMode' - 0 'kDefine' mode", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PrintDataBase",1282,G__SoLIDTrackingDict_786_0_11, 121, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - level", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDebug",787,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - level", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Begin",485,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'THaRunBase' - 0 '0' r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("End",279,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'THaRunBase' - 0 '0' r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPhi",577,G__SoLIDTrackingDict_786_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "in rad -pi to pi", (void*) NULL, 0);
   G__memfunc_setup("LoadDAQmodel",1127,G__SoLIDTrackingDict_786_0_16, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 8, "U 'THaDetMap::Module' - 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadDAQresolution",1706,G__SoLIDTrackingDict_786_0_17, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "U 'THaDetMap::Module' - 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDAQnchan",1022,G__SoLIDTrackingDict_786_0_18, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 8, "U 'THaDetMap::Module' - 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSystemID",1086,G__SoLIDTrackingDict_786_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSystemID",1074,G__SoLIDTrackingDict_786_0_20, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNTracks",982,G__SoLIDTrackingDict_786_0_21, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNSeeds",866,G__SoLIDTrackingDict_786_0_22, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSeedEfficiency",1686,G__SoLIDTrackingDict_786_0_23, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMCTrackEfficiency",1946,G__SoLIDTrackingDict_786_0_24, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTracker",1004,G__SoLIDTrackingDict_786_0_25, 85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDGEMTracker), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCrateMapDBcols",1636,(G__InterfaceMethod) NULL, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 2, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDBFileName",1191,(G__InterfaceMethod) NULL, 67, -1, -1, 0, 0, 1, 2, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MakePrefix",1004,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadGeometry",1224,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 2, 0, 
"E - - 0 - file u 'TDatime' - 11 - date "
"g - 'Bool_t' 0 'kTRUE' required", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FitMCPoints",1072,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 8, "U 'Podd::MCTrack' - 0 - mctrk", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SoLIDTrackingDict_786_0_31, 85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SoLIDTrackerSystem::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SoLIDTrackingDict_786_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLIDTrackerSystem::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SoLIDTrackingDict_786_0_33, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SoLIDTrackerSystem::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SoLIDTrackingDict_786_0_34, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SoLIDTrackerSystem::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SoLIDTrackingDict_786_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SoLIDTrackingDict_786_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLIDTrackerSystem::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SoLIDTrackingDict_786_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SoLIDTrackerSystem::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SoLIDTrackingDict_786_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLIDTrackerSystem::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SoLIDTrackingDict_786_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SoLIDTrackerSystem::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SoLIDTrackerSystem", 1898, G__SoLIDTrackingDict_786_0_43, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSolTrackInfo(void) {
   /* SolTrackInfo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SolTrackInfo));
   G__memfunc_setup("SolTrackInfo",1199,G__SoLIDTrackingDict_788_0_1, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SolTrackInfo), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SolTrackInfo",1199,G__SoLIDTrackingDict_788_0_2, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SolTrackInfo), -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - sector u 'TVector3' - 11 - point "
"u 'TVector3' - 11 - direction d - 'Double_t' 0 - phi0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMCHitBits",1127,G__SoLIDTrackingDict_788_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNMCHits",918,G__SoLIDTrackingDict_788_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMCHitBits",1139,G__SoLIDTrackingDict_788_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - bits", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNMCHits",930,G__SoLIDTrackingDict_788_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nhits", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SoLIDTrackingDict_788_0_7, 85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SolTrackInfo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SoLIDTrackingDict_788_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SolTrackInfo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SoLIDTrackingDict_788_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SolTrackInfo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SoLIDTrackingDict_788_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SolTrackInfo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SoLIDTrackingDict_788_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SoLIDTrackingDict_788_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SolTrackInfo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SoLIDTrackingDict_788_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SolTrackInfo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SoLIDTrackingDict_788_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SolTrackInfo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SoLIDTrackingDict_788_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SolTrackInfo::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SolTrackInfo", 1199, G__SoLIDTrackingDict_788_0_19, (int) ('i'), G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SolTrackInfo), -1, 0, 1, 1, 1, 0, "u 'SolTrackInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SolTrackInfo", 1325, G__SoLIDTrackingDict_788_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SoLIDTrackingDict_788_0_21, (int) ('u'), G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SolTrackInfo), -1, 1, 1, 1, 1, 0, "u 'SolTrackInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSoLIDSpectrometer(void) {
   /* SoLIDSpectrometer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDSpectrometer));
   G__memfunc_setup("SoLIDSpectrometer",1688,G__SoLIDTrackingDict_789_0_1, 105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_SoLIDSpectrometer), -1, 0, 6, 1, 1, 0, 
"C - - 10 - name C - - 10 - description "
"h - 'UInt_t' 0 '1' nsystem h - 'UInt_t' 0 '6' ntracker "
"h - 'UInt_t' 0 '30' nsector h - 'UInt_t' 0 '2' nreadout", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_THaAnalysisObjectcLcLEStatus), -1, 0, 1, 1, 1, 0, "u 'TDatime' - 11 - run_time", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindVertices",1222,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TClonesArray' - 1 - tracks", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TrackCalc",872,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PrintDataBase",1282,G__SoLIDTrackingDict_789_0_6, 121, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - level", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsSetup",717,G__SoLIDTrackingDict_789_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrackInfo",1185,G__SoLIDTrackingDict_789_0_8, 85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DefineVariables",1508,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "i 'THaAnalysisObject::EMode' - 0 'kDefine' mode", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadRunDatabase",1478,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "u 'TDatime' - 11 - date", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SoLIDTrackingDict_789_0_11, 85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SoLIDSpectrometer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SoLIDTrackingDict_789_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLIDSpectrometer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SoLIDTrackingDict_789_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SoLIDSpectrometer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SoLIDTrackingDict_789_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SoLIDSpectrometer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SoLIDTrackingDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SoLIDTrackingDict_789_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SoLIDTrackingDict_789_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLIDSpectrometer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SoLIDTrackingDict_789_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SoLIDSpectrometer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SoLIDTrackingDict_789_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SoLIDSpectrometer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SoLIDTrackingDict_789_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SoLIDSpectrometer::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SoLIDSpectrometer", 1814, G__SoLIDTrackingDict_789_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncSoLIDTrackingDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalSoLIDTrackingDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {
}

static void G__cpp_setup_func28() {
}

static void G__cpp_setup_func29() {
}

static void G__cpp_setup_func30() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcSoLIDTrackingDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
  G__cpp_setup_func28();
  G__cpp_setup_func29();
  G__cpp_setup_func30();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__SoLIDTrackingDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TCollection = { "TCollection" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR = { "vector<float,allocator<float> >" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_vectorlEboolcOallocatorlEboolgRsPgR = { "vector<bool,allocator<bool> >" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TClonesArray = { "TClonesArray" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TVector2 = { "TVector2" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_THaRunBase = { "THaRunBase" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TDatime = { "TDatime" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_THaEvData = { "THaEvData" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TVector3 = { "TVector3" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_THaAnalysisObject = { "THaAnalysisObject" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_THaAnalysisObjectcLcLEStatus = { "THaAnalysisObject::EStatus" , 101 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_THaAnalysisObjectcLcLEMode = { "THaAnalysisObject::EMode" , 101 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_vectorlEstringcOallocatorlEstringgRsPgR = { "vector<string,allocator<string> >" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<string,allocator<string> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_THaDetector = { "THaDetector" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_THaApparatus = { "THaApparatus" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TElementActionTlEdoublegR = { "TElementActionT<double>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TElementPosActionTlEdoublegR = { "TElementPosActionT<double>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TRotation = { "TRotation" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_THaVertexModule = { "THaVertexModule" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_THaSpectrometer = { "THaSpectrometer" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_THaTrackingModule = { "THaTrackingModule" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TSeqCollection = { "TSeqCollection" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_THaDetMap = { "THaDetMap" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_THaDetectorBase = { "THaDetectorBase" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_THaSpectrometerDetector = { "THaSpectrometerDetector" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TMatrixTSymlEdoublegR = { "TMatrixTSym<double>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TMatrixTlEdoublegR = { "TMatrixT<double>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TMatrixTlEdoublegRcLcLEMatrixCreatorsOp1 = { "TMatrixT<double>::EMatrixCreatorsOp1" , 101 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TMatrixTlEdoublegRcLcLEMatrixCreatorsOp2 = { "TMatrixT<double>::EMatrixCreatorsOp2" , 101 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TMatrixTRow_constlEdoublegR = { "TMatrixTRow_const<double>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TMatrixTRowlEdoublegR = { "TMatrixTRow<double>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TMatrixTDiag_constlEdoublegR = { "TMatrixTDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TMatrixTColumn_constlEdoublegR = { "TMatrixTColumn_const<double>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TMatrixTFlat_constlEdoublegR = { "TMatrixTFlat_const<double>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TMatrixTSub_constlEdoublegR = { "TMatrixTSub_const<double>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TMatrixTSparseRow_constlEdoublegR = { "TMatrixTSparseRow_const<double>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TMatrixTSparseDiag_constlEdoublegR = { "TMatrixTSparseDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TMatrixTColumnlEdoublegR = { "TMatrixTColumn<double>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TMatrixTDiaglEdoublegR = { "TMatrixTDiag<double>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TMatrixTFlatlEdoublegR = { "TMatrixTFlat<double>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TMatrixTSublEdoublegR = { "TMatrixTSub<double>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TMatrixTSparseRowlEdoublegR = { "TMatrixTSparseRow<double>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TMatrixTSparseDiaglEdoublegR = { "TMatrixTSparseDiag<double>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_THashTable = { "THashTable" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_THaTrackingDetector = { "THaTrackingDetector" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_THaDetMapcLcLModule = { "THaDetMap::Module" , 115 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_Podd = { "Podd" , 110 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_PoddcLcLMCTrack = { "Podd::MCTrack" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_PoddcLcLMCHitInfo = { "Podd::MCHitInfo" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_PoddcLcLSimDecoder = { "Podd::SimDecoder" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_THaSubDetector = { "THaSubDetector" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_TH1 = { "TH1" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_SoLIDGEMReadOut = { "SoLIDGEMReadOut" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_Hit = { "Hit" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_SoLIDRawHit = { "SoLIDRawHit" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_SoLIDMCRawHit = { "SoLIDMCRawHit" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_SoLIDGEMHit = { "SoLIDGEMHit" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_SoLIDMCGEMHit = { "SoLIDMCGEMHit" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_StripData_t = { "StripData_t" , 115 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_SoLIDGEMReadOutcLcLEChanMapType = { "SoLIDGEMReadOut::EChanMapType" , 101 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_ECType = { "ECType" , 101 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_SoLMatType = { "SoLMatType" , 101 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_SeedType = { "SeedType" , 101 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_SoLIDGEMTracker = { "SoLIDGEMTracker" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_SoLIDGEMChamber = { "SoLIDGEMChamber" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_vectorlESoLIDGEMReadOutmUcOallocatorlESoLIDGEMReadOutmUgRsPgR = { "vector<SoLIDGEMReadOut*,allocator<SoLIDGEMReadOut*> >" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlESoLIDGEMReadOutmUcOallocatorlESoLIDGEMReadOutmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<SoLIDGEMReadOut*,allocator<SoLIDGEMReadOut*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_vectorlESoLIDGEMChambermUcOallocatorlESoLIDGEMChambermUgRsPgR = { "vector<SoLIDGEMChamber*,allocator<SoLIDGEMChamber*> >" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlESoLIDGEMChambermUcOallocatorlESoLIDGEMChambermUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<SoLIDGEMChamber*,allocator<SoLIDGEMChamber*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_SoLIDECal = { "SoLIDECal" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_maplEintcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgR = { "map<int,vector<float,allocator<float> >,less<int>,allocator<pair<const int,vector<float,allocator<float> > > > >" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_SoLIDTrack = { "SoLIDTrack" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_vectorlESoLIDGEMHitmUcOallocatorlESoLIDGEMHitmUgRsPgR = { "vector<SoLIDGEMHit*,allocator<SoLIDGEMHit*> >" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlESoLIDGEMHitmUcOallocatorlESoLIDGEMHitmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<SoLIDGEMHit*,allocator<SoLIDGEMHit*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_SoLIDMCTrack = { "SoLIDMCTrack" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_ProgressiveTracking = { "ProgressiveTracking" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_vectorlETSeqCollectionmUcOallocatorlETSeqCollectionmUgRsPgR = { "vector<TSeqCollection*,allocator<TSeqCollection*> >" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlETSeqCollectionmUcOallocatorlETSeqCollectionmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TSeqCollection*,allocator<TSeqCollection*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_maplEintcOvectorlETSeqCollectionmUcOallocatorlETSeqCollectionmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlETSeqCollectionmUcOallocatorlETSeqCollectionmUgRsPgRsPgRsPgRsPgR = { "map<int,vector<TSeqCollection*,allocator<TSeqCollection*> >,less<int>,allocator<pair<const int,vector<TSeqCollection*,allocator<TSeqCollection*> > > > >" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_vectorlESoLIDCaloHitcOallocatorlESoLIDCaloHitgRsPgR = { "vector<SoLIDCaloHit,allocator<SoLIDCaloHit> >" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlESoLIDCaloHitcOallocatorlESoLIDCaloHitgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<SoLIDCaloHit,allocator<SoLIDCaloHit> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_SoLIDFieldMap = { "SoLIDFieldMap" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_SoLKalMatrix = { "SoLKalMatrix" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_SoLKalTrackSystem = { "SoLKalTrackSystem" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_SoLKalTrackSite = { "SoLKalTrackSite" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_SoLKalTrackState = { "SoLKalTrackState" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_SoLKalFieldStepper = { "SoLKalFieldStepper" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_SoLKalTrackFinder = { "SoLKalTrackFinder" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_vectorlESoLIDGEMTrackermUcOallocatorlESoLIDGEMTrackermUgRsPgR = { "vector<SoLIDGEMTracker*,allocator<SoLIDGEMTracker*> >" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlESoLIDGEMTrackermUcOallocatorlESoLIDGEMTrackermUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<SoLIDGEMTracker*,allocator<SoLIDGEMTracker*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_SoLKalTrackFindercLcLDoubletSeed = { "SoLKalTrackFinder::DoubletSeed" , 115 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_maplEintcOvectorlESoLIDGEMHitmUcOallocatorlESoLIDGEMHitmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESoLIDGEMHitmUcOallocatorlESoLIDGEMHitmUgRsPgRsPgRsPgRsPgR = { "map<int,vector<SoLIDGEMHit*,allocator<SoLIDGEMHit*> >,less<int>,allocator<pair<const int,vector<SoLIDGEMHit*,allocator<SoLIDGEMHit*> > > > >" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_vectorlESoLKalTrackFindercLcLDoubletSeedcOallocatorlESoLKalTrackFindercLcLDoubletSeedgRsPgR = { "vector<SoLKalTrackFinder::DoubletSeed,allocator<SoLKalTrackFinder::DoubletSeed> >" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlESoLKalTrackFindercLcLDoubletSeedcOallocatorlESoLKalTrackFindercLcLDoubletSeedgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<SoLKalTrackFinder::DoubletSeed,allocator<SoLKalTrackFinder::DoubletSeed> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_maplESeedTypecOvectorlESoLKalTrackFindercLcLDoubletSeedcOallocatorlESoLKalTrackFindercLcLDoubletSeedgRsPgRcOlesslESeedTypegRcOallocatorlEpairlEconstsPSeedTypecOvectorlESoLKalTrackFindercLcLDoubletSeedcOallocatorlESoLKalTrackFindercLcLDoubletSeedgRsPgRsPgRsPgRsPgR = { "map<SeedType,vector<SoLKalTrackFinder::DoubletSeed,allocator<SoLKalTrackFinder::DoubletSeed> >,less<SeedType>,allocator<pair<const SeedType,vector<SoLKalTrackFinder::DoubletSeed,allocator<SoLKalTrackFinder::DoubletSeed> > > > >" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_SoLIDTrackerSystem = { "SoLIDTrackerSystem" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_SoLIDTrackerSystemcLcLdA = { "SoLIDTrackerSystem::$" , 101 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_SolTrackInfo = { "SolTrackInfo" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_SoLIDSpectrometer = { "SoLIDSpectrometer" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_vectorlESoLIDTrackerSystemmUcOallocatorlESoLIDTrackerSystemmUgRsPgR = { "vector<SoLIDTrackerSystem*,allocator<SoLIDTrackerSystem*> >" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlESoLIDTrackerSystemmUcOallocatorlESoLIDTrackerSystemmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<SoLIDTrackerSystem*,allocator<SoLIDTrackerSystem*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SoLIDTrackingDictLN_SoLKalTrackSitecLcLEStType = { "SoLKalTrackSite::EStType" , 101 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableSoLIDTrackingDict() {
  G__SoLIDTrackingDictLN_TClass.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TBuffer.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TMemberInspector.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TObject.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TNamed.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TCollection.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TString.tagnum = -1 ;
  G__SoLIDTrackingDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_vectorlEboolcOallocatorlEboolgRsPgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TObjArray.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TClonesArray.tagnum = -1 ;
  G__SoLIDTrackingDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TVector2.tagnum = -1 ;
  G__SoLIDTrackingDictLN_THaRunBase.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TDatime.tagnum = -1 ;
  G__SoLIDTrackingDictLN_THaEvData.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TVector3.tagnum = -1 ;
  G__SoLIDTrackingDictLN_THaAnalysisObject.tagnum = -1 ;
  G__SoLIDTrackingDictLN_THaAnalysisObjectcLcLEStatus.tagnum = -1 ;
  G__SoLIDTrackingDictLN_THaAnalysisObjectcLcLEMode.tagnum = -1 ;
  G__SoLIDTrackingDictLN_vectorlEstringcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_THaDetector.tagnum = -1 ;
  G__SoLIDTrackingDictLN_THaApparatus.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TElementActionTlEdoublegR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TElementPosActionTlEdoublegR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TRotation.tagnum = -1 ;
  G__SoLIDTrackingDictLN_THaVertexModule.tagnum = -1 ;
  G__SoLIDTrackingDictLN_THaSpectrometer.tagnum = -1 ;
  G__SoLIDTrackingDictLN_THaTrackingModule.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TSeqCollection.tagnum = -1 ;
  G__SoLIDTrackingDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_THaDetMap.tagnum = -1 ;
  G__SoLIDTrackingDictLN_THaDetectorBase.tagnum = -1 ;
  G__SoLIDTrackingDictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_THaSpectrometerDetector.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TMatrixTSymlEdoublegR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TMatrixTlEdoublegR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TMatrixTlEdoublegRcLcLEMatrixCreatorsOp1.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TMatrixTlEdoublegRcLcLEMatrixCreatorsOp2.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TMatrixTRow_constlEdoublegR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TMatrixTRowlEdoublegR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TMatrixTDiag_constlEdoublegR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TMatrixTColumn_constlEdoublegR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TMatrixTFlat_constlEdoublegR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TMatrixTSub_constlEdoublegR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TMatrixTSparseRow_constlEdoublegR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TMatrixTSparseDiag_constlEdoublegR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TMatrixTColumnlEdoublegR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TMatrixTDiaglEdoublegR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TMatrixTFlatlEdoublegR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TMatrixTSublEdoublegR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TMatrixTSparseRowlEdoublegR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TMatrixTSparseDiaglEdoublegR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_THashTable.tagnum = -1 ;
  G__SoLIDTrackingDictLN_THaTrackingDetector.tagnum = -1 ;
  G__SoLIDTrackingDictLN_THaDetMapcLcLModule.tagnum = -1 ;
  G__SoLIDTrackingDictLN_Podd.tagnum = -1 ;
  G__SoLIDTrackingDictLN_PoddcLcLMCTrack.tagnum = -1 ;
  G__SoLIDTrackingDictLN_PoddcLcLMCHitInfo.tagnum = -1 ;
  G__SoLIDTrackingDictLN_PoddcLcLSimDecoder.tagnum = -1 ;
  G__SoLIDTrackingDictLN_THaSubDetector.tagnum = -1 ;
  G__SoLIDTrackingDictLN_TH1.tagnum = -1 ;
  G__SoLIDTrackingDictLN_SoLIDGEMReadOut.tagnum = -1 ;
  G__SoLIDTrackingDictLN_Hit.tagnum = -1 ;
  G__SoLIDTrackingDictLN_SoLIDRawHit.tagnum = -1 ;
  G__SoLIDTrackingDictLN_SoLIDMCRawHit.tagnum = -1 ;
  G__SoLIDTrackingDictLN_SoLIDGEMHit.tagnum = -1 ;
  G__SoLIDTrackingDictLN_SoLIDMCGEMHit.tagnum = -1 ;
  G__SoLIDTrackingDictLN_StripData_t.tagnum = -1 ;
  G__SoLIDTrackingDictLN_SoLIDGEMReadOutcLcLEChanMapType.tagnum = -1 ;
  G__SoLIDTrackingDictLN_ECType.tagnum = -1 ;
  G__SoLIDTrackingDictLN_SoLMatType.tagnum = -1 ;
  G__SoLIDTrackingDictLN_SeedType.tagnum = -1 ;
  G__SoLIDTrackingDictLN_SoLIDGEMTracker.tagnum = -1 ;
  G__SoLIDTrackingDictLN_SoLIDGEMChamber.tagnum = -1 ;
  G__SoLIDTrackingDictLN_vectorlESoLIDGEMReadOutmUcOallocatorlESoLIDGEMReadOutmUgRsPgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlESoLIDGEMReadOutmUcOallocatorlESoLIDGEMReadOutmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_vectorlESoLIDGEMChambermUcOallocatorlESoLIDGEMChambermUgRsPgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlESoLIDGEMChambermUcOallocatorlESoLIDGEMChambermUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_SoLIDECal.tagnum = -1 ;
  G__SoLIDTrackingDictLN_maplEintcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_SoLIDTrack.tagnum = -1 ;
  G__SoLIDTrackingDictLN_vectorlESoLIDGEMHitmUcOallocatorlESoLIDGEMHitmUgRsPgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlESoLIDGEMHitmUcOallocatorlESoLIDGEMHitmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_SoLIDMCTrack.tagnum = -1 ;
  G__SoLIDTrackingDictLN_ProgressiveTracking.tagnum = -1 ;
  G__SoLIDTrackingDictLN_vectorlETSeqCollectionmUcOallocatorlETSeqCollectionmUgRsPgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlETSeqCollectionmUcOallocatorlETSeqCollectionmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_maplEintcOvectorlETSeqCollectionmUcOallocatorlETSeqCollectionmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlETSeqCollectionmUcOallocatorlETSeqCollectionmUgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_vectorlESoLIDCaloHitcOallocatorlESoLIDCaloHitgRsPgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlESoLIDCaloHitcOallocatorlESoLIDCaloHitgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_SoLIDFieldMap.tagnum = -1 ;
  G__SoLIDTrackingDictLN_SoLKalMatrix.tagnum = -1 ;
  G__SoLIDTrackingDictLN_SoLKalTrackSystem.tagnum = -1 ;
  G__SoLIDTrackingDictLN_SoLKalTrackSite.tagnum = -1 ;
  G__SoLIDTrackingDictLN_SoLKalTrackState.tagnum = -1 ;
  G__SoLIDTrackingDictLN_SoLKalFieldStepper.tagnum = -1 ;
  G__SoLIDTrackingDictLN_SoLKalTrackFinder.tagnum = -1 ;
  G__SoLIDTrackingDictLN_vectorlESoLIDGEMTrackermUcOallocatorlESoLIDGEMTrackermUgRsPgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlESoLIDGEMTrackermUcOallocatorlESoLIDGEMTrackermUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_SoLKalTrackFindercLcLDoubletSeed.tagnum = -1 ;
  G__SoLIDTrackingDictLN_maplEintcOvectorlESoLIDGEMHitmUcOallocatorlESoLIDGEMHitmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESoLIDGEMHitmUcOallocatorlESoLIDGEMHitmUgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_vectorlESoLKalTrackFindercLcLDoubletSeedcOallocatorlESoLKalTrackFindercLcLDoubletSeedgRsPgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlESoLKalTrackFindercLcLDoubletSeedcOallocatorlESoLKalTrackFindercLcLDoubletSeedgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_maplESeedTypecOvectorlESoLKalTrackFindercLcLDoubletSeedcOallocatorlESoLKalTrackFindercLcLDoubletSeedgRsPgRcOlesslESeedTypegRcOallocatorlEpairlEconstsPSeedTypecOvectorlESoLKalTrackFindercLcLDoubletSeedcOallocatorlESoLKalTrackFindercLcLDoubletSeedgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_SoLIDTrackerSystem.tagnum = -1 ;
  G__SoLIDTrackingDictLN_SoLIDTrackerSystemcLcLdA.tagnum = -1 ;
  G__SoLIDTrackingDictLN_SolTrackInfo.tagnum = -1 ;
  G__SoLIDTrackingDictLN_SoLIDSpectrometer.tagnum = -1 ;
  G__SoLIDTrackingDictLN_vectorlESoLIDTrackerSystemmUcOallocatorlESoLIDTrackerSystemmUgRsPgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlESoLIDTrackerSystemmUcOallocatorlESoLIDTrackerSystemmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SoLIDTrackingDictLN_SoLKalTrackSitecLcLEStType.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableSoLIDTrackingDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TCollection);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TString);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_vectorlEboolcOallocatorlEboolgRsPgR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TClonesArray);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TVector2);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_THaRunBase);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TDatime);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_THaEvData);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TVector3);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_THaAnalysisObject);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_THaAnalysisObjectcLcLEStatus);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_THaAnalysisObjectcLcLEMode);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_vectorlEstringcOallocatorlEstringgRsPgR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_THaDetector);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_THaApparatus);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TElementActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TElementPosActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TRotation);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_THaVertexModule);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_THaSpectrometer);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_THaTrackingModule);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TSeqCollection);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_THaDetMap);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_THaDetectorBase);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_THaSpectrometerDetector);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TMatrixTSymlEdoublegR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TMatrixTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TMatrixTlEdoublegRcLcLEMatrixCreatorsOp1);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TMatrixTlEdoublegRcLcLEMatrixCreatorsOp2);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TMatrixTRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TMatrixTRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TMatrixTDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TMatrixTColumn_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TMatrixTFlat_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TMatrixTSub_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TMatrixTSparseRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TMatrixTSparseDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TMatrixTColumnlEdoublegR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TMatrixTDiaglEdoublegR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TMatrixTFlatlEdoublegR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TMatrixTSublEdoublegR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TMatrixTSparseRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TMatrixTSparseDiaglEdoublegR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_THashTable);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_THaTrackingDetector);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_THaDetMapcLcLModule);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_Podd);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_PoddcLcLMCTrack);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_PoddcLcLMCHitInfo);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_PoddcLcLSimDecoder);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_THaSubDetector);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_TH1);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_SoLIDGEMReadOut),sizeof(SoLIDGEMReadOut),-1,324864,"One Tracker plane coordinate direction",G__setup_memvarSoLIDGEMReadOut,G__setup_memfuncSoLIDGEMReadOut);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_Hit),sizeof(Hit),-1,324864,"Generic tracker plane hit",G__setup_memvarHit,G__setup_memfuncHit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_SoLIDRawHit),sizeof(SoLIDRawHit),-1,324864,"Hit on an ADC-based readout plane, e.g. GEMs",G__setup_memvarSoLIDRawHit,G__setup_memfuncSoLIDRawHit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_SoLIDMCRawHit),sizeof(SoLIDMCRawHit),-1,324864,"Monte Carlo hit in ADC-based readout plane",G__setup_memvarSoLIDMCRawHit,G__setup_memfuncSoLIDMCRawHit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_SoLIDGEMHit),sizeof(SoLIDGEMHit),-1,324864,(char*)NULL,G__setup_memvarSoLIDGEMHit,G__setup_memfuncSoLIDGEMHit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_SoLIDMCGEMHit),sizeof(SoLIDMCGEMHit),-1,324864,(char*)NULL,G__setup_memvarSoLIDMCGEMHit,G__setup_memfuncSoLIDMCGEMHit);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_StripData_t);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_SoLIDGEMReadOutcLcLEChanMapType);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_ECType);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_SoLMatType);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_SeedType);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_SoLIDGEMTracker),sizeof(SoLIDGEMTracker),-1,324864,"One Tracker plane coordinate direction",G__setup_memvarSoLIDGEMTracker,G__setup_memfuncSoLIDGEMTracker);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_SoLIDGEMChamber),sizeof(SoLIDGEMChamber),-1,324864,(char*)NULL,G__setup_memvarSoLIDGEMChamber,G__setup_memfuncSoLIDGEMChamber);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_vectorlESoLIDGEMReadOutmUcOallocatorlESoLIDGEMReadOutmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlESoLIDGEMReadOutmUcOallocatorlESoLIDGEMReadOutmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_vectorlESoLIDGEMChambermUcOallocatorlESoLIDGEMChambermUgRsPgR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlESoLIDGEMChambermUcOallocatorlESoLIDGEMChambermUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_SoLIDECal),sizeof(SoLIDECal),-1,324864,(char*)NULL,G__setup_memvarSoLIDECal,G__setup_memfuncSoLIDECal);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_maplEintcOvectorlEfloatcOallocatorlEfloatgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_SoLIDTrack),sizeof(SoLIDTrack),-1,292096,(char*)NULL,G__setup_memvarSoLIDTrack,G__setup_memfuncSoLIDTrack);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_vectorlESoLIDGEMHitmUcOallocatorlESoLIDGEMHitmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlESoLIDGEMHitmUcOallocatorlESoLIDGEMHitmUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_SoLIDMCTrack),sizeof(SoLIDMCTrack),-1,292096,(char*)NULL,G__setup_memvarSoLIDMCTrack,G__setup_memfuncSoLIDMCTrack);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_ProgressiveTracking),sizeof(ProgressiveTracking),-1,295936,(char*)NULL,G__setup_memvarProgressiveTracking,G__setup_memfuncProgressiveTracking);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_vectorlETSeqCollectionmUcOallocatorlETSeqCollectionmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlETSeqCollectionmUcOallocatorlETSeqCollectionmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_maplEintcOvectorlETSeqCollectionmUcOallocatorlETSeqCollectionmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlETSeqCollectionmUcOallocatorlETSeqCollectionmUgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_vectorlESoLIDCaloHitcOallocatorlESoLIDCaloHitgRsPgR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlESoLIDCaloHitcOallocatorlESoLIDCaloHitgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_SoLIDFieldMap),sizeof(SoLIDFieldMap),-1,263424,(char*)NULL,G__setup_memvarSoLIDFieldMap,G__setup_memfuncSoLIDFieldMap);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_SoLKalMatrix),sizeof(SoLKalMatrix),-1,325376,"Base class for Kalman matrix",G__setup_memvarSoLKalMatrix,G__setup_memfuncSoLKalMatrix);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_SoLKalTrackSystem),sizeof(SoLKalTrackSystem),-1,292096,"Base class for Kalman Filter",G__setup_memvarSoLKalTrackSystem,G__setup_memfuncSoLKalTrackSystem);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_SoLKalTrackSite),sizeof(SoLKalTrackSite),-1,324864,"Base class for measurement vector objects",G__setup_memvarSoLKalTrackSite,G__setup_memfuncSoLKalTrackSite);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_SoLKalTrackState),sizeof(SoLKalTrackState),-1,324864,"Base class for state vector objects",G__setup_memvarSoLKalTrackState,G__setup_memfuncSoLKalTrackState);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_SoLKalFieldStepper),sizeof(SoLKalFieldStepper),-1,263424,(char*)NULL,G__setup_memvarSoLKalFieldStepper,G__setup_memfuncSoLKalFieldStepper);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_SoLKalTrackFinder),sizeof(SoLKalTrackFinder),-1,296192,(char*)NULL,G__setup_memvarSoLKalTrackFinder,G__setup_memfuncSoLKalTrackFinder);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_vectorlESoLIDGEMTrackermUcOallocatorlESoLIDGEMTrackermUgRsPgR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlESoLIDGEMTrackermUcOallocatorlESoLIDGEMTrackermUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_SoLKalTrackFindercLcLDoubletSeed);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_maplEintcOvectorlESoLIDGEMHitmUcOallocatorlESoLIDGEMHitmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESoLIDGEMHitmUcOallocatorlESoLIDGEMHitmUgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_vectorlESoLKalTrackFindercLcLDoubletSeedcOallocatorlESoLKalTrackFindercLcLDoubletSeedgRsPgR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlESoLKalTrackFindercLcLDoubletSeedcOallocatorlESoLKalTrackFindercLcLDoubletSeedgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_maplESeedTypecOvectorlESoLKalTrackFindercLcLDoubletSeedcOallocatorlESoLKalTrackFindercLcLDoubletSeedgRsPgRcOlesslESeedTypegRcOallocatorlEpairlEconstsPSeedTypecOvectorlESoLKalTrackFindercLcLDoubletSeedcOallocatorlESoLKalTrackFindercLcLDoubletSeedgRsPgRsPgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_SoLIDTrackerSystem),sizeof(SoLIDTrackerSystem),-1,324864,"Collection of GEM trackers in one SoLID sector",G__setup_memvarSoLIDTrackerSystem,G__setup_memfuncSoLIDTrackerSystem);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_SoLIDTrackerSystemcLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_SolTrackInfo),sizeof(SolTrackInfo),-1,323840,"SoLID track coordinates",G__setup_memvarSolTrackInfo,G__setup_memfuncSolTrackInfo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_SoLIDSpectrometer),sizeof(SoLIDSpectrometer),-1,324608,"SoLID spectrometer",G__setup_memvarSoLIDSpectrometer,G__setup_memfuncSoLIDSpectrometer);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_vectorlESoLIDTrackerSystemmUcOallocatorlESoLIDTrackerSystemmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_reverse_iteratorlEvectorlESoLIDTrackerSystemmUcOallocatorlESoLIDTrackerSystemmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SoLIDTrackingDictLN_SoLKalTrackSitecLcLEStType);
}
extern "C" void G__cpp_setupSoLIDTrackingDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupSoLIDTrackingDict()");
  G__set_cpp_environmentSoLIDTrackingDict();
  G__cpp_setup_tagtableSoLIDTrackingDict();

  G__cpp_setup_inheritanceSoLIDTrackingDict();

  G__cpp_setup_typetableSoLIDTrackingDict();

  G__cpp_setup_memvarSoLIDTrackingDict();

  G__cpp_setup_memfuncSoLIDTrackingDict();
  G__cpp_setup_globalSoLIDTrackingDict();
  G__cpp_setup_funcSoLIDTrackingDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncSoLIDTrackingDict();
  return;
}
class G__cpp_setup_initSoLIDTrackingDict {
  public:
    G__cpp_setup_initSoLIDTrackingDict() { G__add_setup_func("SoLIDTrackingDict",(G__incsetup)(&G__cpp_setupSoLIDTrackingDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initSoLIDTrackingDict() { G__remove_setup_func("SoLIDTrackingDict"); }
};
G__cpp_setup_initSoLIDTrackingDict G__cpp_setup_initializerSoLIDTrackingDict;

